
Motorfree.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000027f4  00002888  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000068e  0080007a  0080007a  000028a2  2**0
                  ALLOC
  3 .stab         00002814  00000000  00000000  000028a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000094f  00000000  00000000  000050b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005a08  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b0d  00000000  00000000  00005b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ceb  00000000  00000000  00008675  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fbf  00000000  00000000  00009360  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008d8  00000000  00000000  0000a320  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fe9  00000000  00000000  0000abf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002bfb  00000000  00000000  0000bbe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  0000e7dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 8d 08 	jmp	0x111a	; 0x111a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ef       	ldi	r30, 0xF4	; 244
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	17 e0       	ldi	r17, 0x07	; 7
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 30       	cpi	r26, 0x08	; 8
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 de 06 	call	0xdbc	; 0xdbc <main>
      8a:	0c 94 f8 13 	jmp	0x27f0	; 0x27f0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <capturarADC>:
#include <math.h>

void capturarADC(unsigned char* res){


	if (ADCSRA&0x10)
      92:	34 9b       	sbis	0x06, 4	; 6
      94:	13 c0       	rjmp	.+38     	; 0xbc <capturarADC+0x2a>
	{
		tmp0=ADCL;
      96:	44 b1       	in	r20, 0x04	; 4
      98:	40 93 f7 06 	sts	0x06F7, r20
		tmp1=ADCH&0x03;
      9c:	55 b1       	in	r21, 0x05	; 5
      9e:	53 70       	andi	r21, 0x03	; 3
      a0:	50 93 f8 06 	sts	0x06F8, r21
		*res=(unsigned char)((((unsigned int)tmp1<<8)|((unsigned int)tmp0))>>2);
      a4:	35 2f       	mov	r19, r21
      a6:	20 e0       	ldi	r18, 0x00	; 0
      a8:	50 e0       	ldi	r21, 0x00	; 0
      aa:	24 2b       	or	r18, r20
      ac:	35 2b       	or	r19, r21
      ae:	36 95       	lsr	r19
      b0:	27 95       	ror	r18
      b2:	36 95       	lsr	r19
      b4:	27 95       	ror	r18
      b6:	fc 01       	movw	r30, r24
      b8:	20 83       	st	Z, r18
		ADCSRA &= ~(1<<ADIF);
      ba:	34 98       	cbi	0x06, 4	; 6
      bc:	08 95       	ret

000000be <prom_10datos>:
	}

}

void prom_10datos(float* d, float* v){
      be:	af 92       	push	r10
      c0:	bf 92       	push	r11
      c2:	cf 92       	push	r12
      c4:	df 92       	push	r13
      c6:	ef 92       	push	r14
      c8:	ff 92       	push	r15
      ca:	0f 93       	push	r16
      cc:	1f 93       	push	r17
      ce:	cf 93       	push	r28
      d0:	df 93       	push	r29
      d2:	8c 01       	movw	r16, r24
	*d=0.0;
      d4:	80 e0       	ldi	r24, 0x00	; 0
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	dc 01       	movw	r26, r24
      da:	f8 01       	movw	r30, r16
      dc:	80 83       	st	Z, r24
      de:	91 83       	std	Z+1, r25	; 0x01
      e0:	a2 83       	std	Z+2, r26	; 0x02
      e2:	b3 83       	std	Z+3, r27	; 0x03
      e4:	e6 2e       	mov	r14, r22
      e6:	f7 2e       	mov	r15, r23

	for (int i=0; i<10; i++)
      e8:	c0 e0       	ldi	r28, 0x00	; 0
      ea:	d0 e0       	ldi	r29, 0x00	; 0
	{
		*d=*d+v[i];
      ec:	f8 01       	movw	r30, r16
      ee:	60 81       	ld	r22, Z
      f0:	71 81       	ldd	r23, Z+1	; 0x01
      f2:	82 81       	ldd	r24, Z+2	; 0x02
      f4:	93 81       	ldd	r25, Z+3	; 0x03
      f6:	f7 01       	movw	r30, r14
      f8:	21 91       	ld	r18, Z+
      fa:	31 91       	ld	r19, Z+
      fc:	41 91       	ld	r20, Z+
      fe:	51 91       	ld	r21, Z+
     100:	7f 01       	movw	r14, r30
     102:	0e 94 99 11 	call	0x2332	; 0x2332 <__addsf3>
     106:	d7 2e       	mov	r13, r23
     108:	b8 2e       	mov	r11, r24
     10a:	a9 2e       	mov	r10, r25
     10c:	86 2f       	mov	r24, r22
     10e:	9d 2d       	mov	r25, r13
     110:	ab 2d       	mov	r26, r11
     112:	ba 2d       	mov	r27, r10
     114:	f8 01       	movw	r30, r16
     116:	80 83       	st	Z, r24
     118:	91 83       	std	Z+1, r25	; 0x01
     11a:	a2 83       	std	Z+2, r26	; 0x02
     11c:	b3 83       	std	Z+3, r27	; 0x03
}

void prom_10datos(float* d, float* v){
	*d=0.0;

	for (int i=0; i<10; i++)
     11e:	21 96       	adiw	r28, 0x01	; 1
     120:	ca 30       	cpi	r28, 0x0A	; 10
     122:	d1 05       	cpc	r29, r1
     124:	19 f7       	brne	.-58     	; 0xec <prom_10datos+0x2e>
	{
		*d=*d+v[i];
	}

	*d=*d/10.0;
     126:	bc 01       	movw	r22, r24
     128:	cd 01       	movw	r24, r26
     12a:	20 e0       	ldi	r18, 0x00	; 0
     12c:	30 e0       	ldi	r19, 0x00	; 0
     12e:	40 e2       	ldi	r20, 0x20	; 32
     130:	51 e4       	ldi	r21, 0x41	; 65
     132:	0e 94 01 12 	call	0x2402	; 0x2402 <__divsf3>
     136:	dc 01       	movw	r26, r24
     138:	cb 01       	movw	r24, r22
     13a:	f8 01       	movw	r30, r16
     13c:	80 83       	st	Z, r24
     13e:	91 83       	std	Z+1, r25	; 0x01
     140:	a2 83       	std	Z+2, r26	; 0x02
     142:	b3 83       	std	Z+3, r27	; 0x03

}
     144:	df 91       	pop	r29
     146:	cf 91       	pop	r28
     148:	1f 91       	pop	r17
     14a:	0f 91       	pop	r16
     14c:	ff 90       	pop	r15
     14e:	ef 90       	pop	r14
     150:	df 90       	pop	r13
     152:	cf 90       	pop	r12
     154:	bf 90       	pop	r11
     156:	af 90       	pop	r10
     158:	08 95       	ret

0000015a <calcDeviation>:




void calcDeviation(float prom, unsigned char* v, float* final)
{
     15a:	6f 92       	push	r6
     15c:	7f 92       	push	r7
     15e:	8f 92       	push	r8
     160:	9f 92       	push	r9
     162:	af 92       	push	r10
     164:	bf 92       	push	r11
     166:	cf 92       	push	r12
     168:	df 92       	push	r13
     16a:	ef 92       	push	r14
     16c:	ff 92       	push	r15
     16e:	0f 93       	push	r16
     170:	1f 93       	push	r17
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
     176:	4b 01       	movw	r8, r22
     178:	5c 01       	movw	r10, r24
     17a:	39 01       	movw	r6, r18
	/*El cuadrado de la desviación estandar S es igual al cociente entre la sumatoria del cuadrado de cada elemento menos el promedio y la cantidad de elementos menos 1.
	http://en.wikipedia.org/wiki/Standard_deviation
	es decir, para éste contexto se tiene S^2 = S(tmp[i]-prom)/7 */
	float sum =0;
     17c:	c4 2e       	mov	r12, r20
     17e:	d5 2e       	mov	r13, r21
	for(int i=0; i<10; i++)
     180:	ee 24       	eor	r14, r14
     182:	ff 24       	eor	r15, r15
void calcDeviation(float prom, unsigned char* v, float* final)
{
	/*El cuadrado de la desviación estandar S es igual al cociente entre la sumatoria del cuadrado de cada elemento menos el promedio y la cantidad de elementos menos 1.
	http://en.wikipedia.org/wiki/Standard_deviation
	es decir, para éste contexto se tiene S^2 = S(tmp[i]-prom)/7 */
	float sum =0;
     184:	00 e0       	ldi	r16, 0x00	; 0
     186:	c0 e0       	ldi	r28, 0x00	; 0
     188:	d0 e0       	ldi	r29, 0x00	; 0
     18a:	10 e0       	ldi	r17, 0x00	; 0
	for(int i=0; i<10; i++)
		sum += pow((v[i]-prom)/100, 2);
     18c:	f6 01       	movw	r30, r12
     18e:	61 91       	ld	r22, Z+
     190:	6f 01       	movw	r12, r30
     192:	70 e0       	ldi	r23, 0x00	; 0
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <__floatsisf>
     19c:	a5 01       	movw	r20, r10
     19e:	94 01       	movw	r18, r8
     1a0:	0e 94 98 11 	call	0x2330	; 0x2330 <__subsf3>
     1a4:	20 e0       	ldi	r18, 0x00	; 0
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	48 ec       	ldi	r20, 0xC8	; 200
     1aa:	52 e4       	ldi	r21, 0x42	; 66
     1ac:	0e 94 01 12 	call	0x2402	; 0x2402 <__divsf3>
     1b0:	9b 01       	movw	r18, r22
     1b2:	ac 01       	movw	r20, r24
     1b4:	0e 94 1f 13 	call	0x263e	; 0x263e <__mulsf3>
     1b8:	f6 2f       	mov	r31, r22
     1ba:	e7 2f       	mov	r30, r23
     1bc:	38 2f       	mov	r19, r24
     1be:	29 2f       	mov	r18, r25
     1c0:	40 2f       	mov	r20, r16
     1c2:	5c 2f       	mov	r21, r28
     1c4:	6d 2f       	mov	r22, r29
     1c6:	71 2f       	mov	r23, r17
     1c8:	cb 01       	movw	r24, r22
     1ca:	ba 01       	movw	r22, r20
     1cc:	42 2f       	mov	r20, r18
     1ce:	0f 2f       	mov	r16, r31
     1d0:	1e 2f       	mov	r17, r30
     1d2:	23 2f       	mov	r18, r19
     1d4:	34 2f       	mov	r19, r20
     1d6:	a9 01       	movw	r20, r18
     1d8:	98 01       	movw	r18, r16
     1da:	0e 94 99 11 	call	0x2332	; 0x2332 <__addsf3>
     1de:	06 2f       	mov	r16, r22
     1e0:	c7 2f       	mov	r28, r23
     1e2:	d8 2f       	mov	r29, r24
     1e4:	19 2f       	mov	r17, r25
{
	/*El cuadrado de la desviación estandar S es igual al cociente entre la sumatoria del cuadrado de cada elemento menos el promedio y la cantidad de elementos menos 1.
	http://en.wikipedia.org/wiki/Standard_deviation
	es decir, para éste contexto se tiene S^2 = S(tmp[i]-prom)/7 */
	float sum =0;
	for(int i=0; i<10; i++)
     1e6:	08 94       	sec
     1e8:	e1 1c       	adc	r14, r1
     1ea:	f1 1c       	adc	r15, r1
     1ec:	fa e0       	ldi	r31, 0x0A	; 10
     1ee:	ef 16       	cp	r14, r31
     1f0:	f1 04       	cpc	r15, r1
     1f2:	61 f6       	brne	.-104    	; 0x18c <calcDeviation+0x32>
		sum += pow((v[i]-prom)/100, 2);
	*final= sqrt(sum/10);
     1f4:	86 2f       	mov	r24, r22
     1f6:	9c 2f       	mov	r25, r28
     1f8:	ad 2f       	mov	r26, r29
     1fa:	b1 2f       	mov	r27, r17
     1fc:	bc 01       	movw	r22, r24
     1fe:	cd 01       	movw	r24, r26
     200:	20 e0       	ldi	r18, 0x00	; 0
     202:	30 e0       	ldi	r19, 0x00	; 0
     204:	40 e2       	ldi	r20, 0x20	; 32
     206:	51 e4       	ldi	r21, 0x41	; 65
     208:	0e 94 01 12 	call	0x2402	; 0x2402 <__divsf3>
     20c:	0e 94 86 13 	call	0x270c	; 0x270c <sqrt>
     210:	dc 01       	movw	r26, r24
     212:	cb 01       	movw	r24, r22
     214:	f3 01       	movw	r30, r6
     216:	80 83       	st	Z, r24
     218:	91 83       	std	Z+1, r25	; 0x01
     21a:	a2 83       	std	Z+2, r26	; 0x02
     21c:	b3 83       	std	Z+3, r27	; 0x03

}
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
     222:	1f 91       	pop	r17
     224:	0f 91       	pop	r16
     226:	ff 90       	pop	r15
     228:	ef 90       	pop	r14
     22a:	df 90       	pop	r13
     22c:	cf 90       	pop	r12
     22e:	bf 90       	pop	r11
     230:	af 90       	pop	r10
     232:	9f 90       	pop	r9
     234:	8f 90       	pop	r8
     236:	7f 90       	pop	r7
     238:	6f 90       	pop	r6
     23a:	08 95       	ret

0000023c <des>:

float des(unsigned char *v, float* prom){
     23c:	8f 92       	push	r8
     23e:	9f 92       	push	r9
     240:	af 92       	push	r10
     242:	bf 92       	push	r11
     244:	cf 92       	push	r12
     246:	df 92       	push	r13
     248:	ef 92       	push	r14
     24a:	ff 92       	push	r15
     24c:	0f 93       	push	r16
     24e:	1f 93       	push	r17
     250:	cf 93       	push	r28
     252:	df 93       	push	r29

	float final=0;

	float sum =0;
	for(int i=0; i<10; i++)
	sum += pow((v[i]-*prom)/100, 2);
     254:	fb 01       	movw	r30, r22
     256:	80 80       	ld	r8, Z
     258:	91 80       	ldd	r9, Z+1	; 0x01
     25a:	a2 80       	ldd	r10, Z+2	; 0x02
     25c:	b3 80       	ldd	r11, Z+3	; 0x03
     25e:	c8 2e       	mov	r12, r24
     260:	d9 2e       	mov	r13, r25


	float final=0;

	float sum =0;
	for(int i=0; i<10; i++)
     262:	ee 24       	eor	r14, r14
     264:	ff 24       	eor	r15, r15
float des(unsigned char *v, float* prom){


	float final=0;

	float sum =0;
     266:	00 e0       	ldi	r16, 0x00	; 0
     268:	c0 e0       	ldi	r28, 0x00	; 0
     26a:	d0 e0       	ldi	r29, 0x00	; 0
     26c:	10 e0       	ldi	r17, 0x00	; 0
	for(int i=0; i<10; i++)
	sum += pow((v[i]-*prom)/100, 2);
     26e:	f6 01       	movw	r30, r12
     270:	61 91       	ld	r22, Z+
     272:	6f 01       	movw	r12, r30
     274:	70 e0       	ldi	r23, 0x00	; 0
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <__floatsisf>
     27e:	a5 01       	movw	r20, r10
     280:	94 01       	movw	r18, r8
     282:	0e 94 98 11 	call	0x2330	; 0x2330 <__subsf3>
     286:	20 e0       	ldi	r18, 0x00	; 0
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	48 ec       	ldi	r20, 0xC8	; 200
     28c:	52 e4       	ldi	r21, 0x42	; 66
     28e:	0e 94 01 12 	call	0x2402	; 0x2402 <__divsf3>
     292:	9b 01       	movw	r18, r22
     294:	ac 01       	movw	r20, r24
     296:	0e 94 1f 13 	call	0x263e	; 0x263e <__mulsf3>
     29a:	f6 2f       	mov	r31, r22
     29c:	e7 2f       	mov	r30, r23
     29e:	38 2f       	mov	r19, r24
     2a0:	29 2f       	mov	r18, r25
     2a2:	40 2f       	mov	r20, r16
     2a4:	5c 2f       	mov	r21, r28
     2a6:	6d 2f       	mov	r22, r29
     2a8:	71 2f       	mov	r23, r17
     2aa:	cb 01       	movw	r24, r22
     2ac:	ba 01       	movw	r22, r20
     2ae:	42 2f       	mov	r20, r18
     2b0:	0f 2f       	mov	r16, r31
     2b2:	1e 2f       	mov	r17, r30
     2b4:	23 2f       	mov	r18, r19
     2b6:	34 2f       	mov	r19, r20
     2b8:	a9 01       	movw	r20, r18
     2ba:	98 01       	movw	r18, r16
     2bc:	0e 94 99 11 	call	0x2332	; 0x2332 <__addsf3>
     2c0:	06 2f       	mov	r16, r22
     2c2:	c7 2f       	mov	r28, r23
     2c4:	d8 2f       	mov	r29, r24
     2c6:	19 2f       	mov	r17, r25


	float final=0;

	float sum =0;
	for(int i=0; i<10; i++)
     2c8:	08 94       	sec
     2ca:	e1 1c       	adc	r14, r1
     2cc:	f1 1c       	adc	r15, r1
     2ce:	fa e0       	ldi	r31, 0x0A	; 10
     2d0:	ef 16       	cp	r14, r31
     2d2:	f1 04       	cpc	r15, r1
     2d4:	61 f6       	brne	.-104    	; 0x26e <des+0x32>
	sum += pow((v[i]-*prom)/100, 2);
	final= sqrt(sum/10);
     2d6:	86 2f       	mov	r24, r22
     2d8:	9c 2f       	mov	r25, r28
     2da:	ad 2f       	mov	r26, r29
     2dc:	b1 2f       	mov	r27, r17
     2de:	bc 01       	movw	r22, r24
     2e0:	cd 01       	movw	r24, r26
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	40 e2       	ldi	r20, 0x20	; 32
     2e8:	51 e4       	ldi	r21, 0x41	; 65
     2ea:	0e 94 01 12 	call	0x2402	; 0x2402 <__divsf3>
     2ee:	0e 94 86 13 	call	0x270c	; 0x270c <sqrt>
	return final;
}
     2f2:	46 2f       	mov	r20, r22
     2f4:	57 2f       	mov	r21, r23
     2f6:	68 2f       	mov	r22, r24
     2f8:	79 2f       	mov	r23, r25
     2fa:	cb 01       	movw	r24, r22
     2fc:	ba 01       	movw	r22, r20
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	1f 91       	pop	r17
     304:	0f 91       	pop	r16
     306:	ff 90       	pop	r15
     308:	ef 90       	pop	r14
     30a:	df 90       	pop	r13
     30c:	cf 90       	pop	r12
     30e:	bf 90       	pop	r11
     310:	af 90       	pop	r10
     312:	9f 90       	pop	r9
     314:	8f 90       	pop	r8
     316:	08 95       	ret

00000318 <mostrarLamp>:

void mostrarLamp(unsigned char d){

	switch ((int)d)
     318:	88 23       	and	r24, r24
     31a:	19 f0       	breq	.+6      	; 0x322 <mostrarLamp+0xa>
     31c:	81 30       	cpi	r24, 0x01	; 1
     31e:	99 f5       	brne	.+102    	; 0x386 <mostrarLamp+0x6e>
     320:	2f c0       	rjmp	.+94     	; 0x380 <mostrarLamp+0x68>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     322:	8f ef       	ldi	r24, 0xFF	; 255
     324:	91 eb       	ldi	r25, 0xB1	; 177
     326:	ac e0       	ldi	r26, 0x0C	; 12
     328:	81 50       	subi	r24, 0x01	; 1
     32a:	90 40       	sbci	r25, 0x00	; 0
     32c:	a0 40       	sbci	r26, 0x00	; 0
     32e:	e1 f7       	brne	.-8      	; 0x328 <mostrarLamp+0x10>
     330:	00 c0       	rjmp	.+0      	; 0x332 <mostrarLamp+0x1a>
     332:	00 00       	nop
     334:	8f ef       	ldi	r24, 0xFF	; 255
     336:	91 eb       	ldi	r25, 0xB1	; 177
     338:	ac e0       	ldi	r26, 0x0C	; 12
     33a:	81 50       	subi	r24, 0x01	; 1
     33c:	90 40       	sbci	r25, 0x00	; 0
     33e:	a0 40       	sbci	r26, 0x00	; 0
     340:	e1 f7       	brne	.-8      	; 0x33a <mostrarLamp+0x22>
     342:	00 c0       	rjmp	.+0      	; 0x344 <mostrarLamp+0x2c>
     344:	00 00       	nop
     346:	8f ef       	ldi	r24, 0xFF	; 255
     348:	91 eb       	ldi	r25, 0xB1	; 177
     34a:	ac e0       	ldi	r26, 0x0C	; 12
     34c:	81 50       	subi	r24, 0x01	; 1
     34e:	90 40       	sbci	r25, 0x00	; 0
     350:	a0 40       	sbci	r26, 0x00	; 0
     352:	e1 f7       	brne	.-8      	; 0x34c <mostrarLamp+0x34>
     354:	00 c0       	rjmp	.+0      	; 0x356 <mostrarLamp+0x3e>
     356:	00 00       	nop
     358:	8f ef       	ldi	r24, 0xFF	; 255
     35a:	91 eb       	ldi	r25, 0xB1	; 177
     35c:	ac e0       	ldi	r26, 0x0C	; 12
     35e:	81 50       	subi	r24, 0x01	; 1
     360:	90 40       	sbci	r25, 0x00	; 0
     362:	a0 40       	sbci	r26, 0x00	; 0
     364:	e1 f7       	brne	.-8      	; 0x35e <mostrarLamp+0x46>
     366:	00 c0       	rjmp	.+0      	; 0x368 <mostrarLamp+0x50>
     368:	00 00       	nop
     36a:	8f ef       	ldi	r24, 0xFF	; 255
     36c:	91 eb       	ldi	r25, 0xB1	; 177
     36e:	ac e0       	ldi	r26, 0x0C	; 12
     370:	81 50       	subi	r24, 0x01	; 1
     372:	90 40       	sbci	r25, 0x00	; 0
     374:	a0 40       	sbci	r26, 0x00	; 0
     376:	e1 f7       	brne	.-8      	; 0x370 <mostrarLamp+0x58>
     378:	00 c0       	rjmp	.+0      	; 0x37a <mostrarLamp+0x62>
     37a:	00 00       	nop
		_delay_ms(260);
		_delay_ms(260);
		_delay_ms(260);
		_delay_ms(260);
		_delay_ms(260);
		PORTD=0b00000000;
     37c:	12 ba       	out	0x12, r1	; 18
		d=0;
		break;
     37e:	08 95       	ret

		case 1:
		PORTD=0b00000001;
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	82 bb       	out	0x12, r24	; 18
				k=1;
				d=1;
		break;
     384:	08 95       	ret

		default:
		PORTD=0b01010101;
     386:	85 e5       	ldi	r24, 0x55	; 85
     388:	82 bb       	out	0x12, r24	; 18
     38a:	08 95       	ret

0000038c <xCoRoutineCreate>:
     38c:	af 92       	push	r10
     38e:	bf 92       	push	r11
     390:	cf 92       	push	r12
     392:	df 92       	push	r13
     394:	ef 92       	push	r14
     396:	ff 92       	push	r15
     398:	0f 93       	push	r16
     39a:	1f 93       	push	r17
     39c:	cf 93       	push	r28
     39e:	df 93       	push	r29
     3a0:	6c 01       	movw	r12, r24
     3a2:	e6 2e       	mov	r14, r22
     3a4:	f4 2e       	mov	r15, r20
     3a6:	8a e1       	ldi	r24, 0x1A	; 26
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <pvPortMalloc>
     3ae:	8c 01       	movw	r16, r24
     3b0:	00 97       	sbiw	r24, 0x00	; 0
     3b2:	09 f4       	brne	.+2      	; 0x3b6 <xCoRoutineCreate+0x2a>
     3b4:	62 c0       	rjmp	.+196    	; 0x47a <xCoRoutineCreate+0xee>
     3b6:	80 91 7a 00 	lds	r24, 0x007A
     3ba:	90 91 7b 00 	lds	r25, 0x007B
     3be:	00 97       	sbiw	r24, 0x00	; 0
     3c0:	39 f5       	brne	.+78     	; 0x410 <xCoRoutineCreate+0x84>
     3c2:	10 93 7b 00 	sts	0x007B, r17
     3c6:	00 93 7a 00 	sts	0x007A, r16
     3ca:	cd e7       	ldi	r28, 0x7D	; 125
     3cc:	d0 e0       	ldi	r29, 0x00	; 0
     3ce:	ce 01       	movw	r24, r28
     3d0:	0e 94 30 04 	call	0x860	; 0x860 <vListInitialise>
     3d4:	ce 01       	movw	r24, r28
     3d6:	09 96       	adiw	r24, 0x09	; 9
     3d8:	0e 94 30 04 	call	0x860	; 0x860 <vListInitialise>
     3dc:	cf e8       	ldi	r28, 0x8F	; 143
     3de:	d0 e0       	ldi	r29, 0x00	; 0
     3e0:	ce 01       	movw	r24, r28
     3e2:	0e 94 30 04 	call	0x860	; 0x860 <vListInitialise>
     3e6:	0f 2e       	mov	r0, r31
     3e8:	f8 e9       	ldi	r31, 0x98	; 152
     3ea:	af 2e       	mov	r10, r31
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	bf 2e       	mov	r11, r31
     3f0:	f0 2d       	mov	r31, r0
     3f2:	c5 01       	movw	r24, r10
     3f4:	0e 94 30 04 	call	0x860	; 0x860 <vListInitialise>
     3f8:	81 ea       	ldi	r24, 0xA1	; 161
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	0e 94 30 04 	call	0x860	; 0x860 <vListInitialise>
     400:	d0 93 ab 00 	sts	0x00AB, r29
     404:	c0 93 aa 00 	sts	0x00AA, r28
     408:	b0 92 ad 00 	sts	0x00AD, r11
     40c:	a0 92 ac 00 	sts	0x00AC, r10
     410:	ce 2d       	mov	r28, r14
     412:	e1 10       	cpse	r14, r1
     414:	c1 e0       	ldi	r28, 0x01	; 1
     416:	f8 01       	movw	r30, r16
     418:	11 8e       	std	Z+25, r1	; 0x19
     41a:	10 8e       	std	Z+24, r1	; 0x18
     41c:	c6 8b       	std	Z+22, r28	; 0x16
     41e:	f7 8a       	std	Z+23, r15	; 0x17
     420:	c1 92       	st	Z+, r12
     422:	d1 92       	st	Z+, r13
     424:	7f 01       	movw	r14, r30
     426:	cf 01       	movw	r24, r30
     428:	0e 94 3e 04 	call	0x87c	; 0x87c <vListInitialiseItem>
     42c:	c8 01       	movw	r24, r16
     42e:	0c 96       	adiw	r24, 0x0c	; 12
     430:	0e 94 3e 04 	call	0x87c	; 0x87c <vListInitialiseItem>
     434:	f8 01       	movw	r30, r16
     436:	11 87       	std	Z+9, r17	; 0x09
     438:	00 87       	std	Z+8, r16	; 0x08
     43a:	13 8b       	std	Z+19, r17	; 0x13
     43c:	02 8b       	std	Z+18, r16	; 0x12
     43e:	84 e0       	ldi	r24, 0x04	; 4
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	8c 1b       	sub	r24, r28
     444:	91 09       	sbc	r25, r1
     446:	95 87       	std	Z+13, r25	; 0x0d
     448:	84 87       	std	Z+12, r24	; 0x0c
     44a:	86 89       	ldd	r24, Z+22	; 0x16
     44c:	90 91 7c 00 	lds	r25, 0x007C
     450:	98 17       	cp	r25, r24
     452:	10 f4       	brcc	.+4      	; 0x458 <xCoRoutineCreate+0xcc>
     454:	80 93 7c 00 	sts	0x007C, r24
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	9c 01       	movw	r18, r24
     45c:	22 0f       	add	r18, r18
     45e:	33 1f       	adc	r19, r19
     460:	22 0f       	add	r18, r18
     462:	33 1f       	adc	r19, r19
     464:	22 0f       	add	r18, r18
     466:	33 1f       	adc	r19, r19
     468:	82 0f       	add	r24, r18
     46a:	93 1f       	adc	r25, r19
     46c:	83 58       	subi	r24, 0x83	; 131
     46e:	9f 4f       	sbci	r25, 0xFF	; 255
     470:	b7 01       	movw	r22, r14
     472:	0e 94 42 04 	call	0x884	; 0x884 <vListInsertEnd>
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	01 c0       	rjmp	.+2      	; 0x47c <xCoRoutineCreate+0xf0>
     47a:	8f ef       	ldi	r24, 0xFF	; 255
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	1f 91       	pop	r17
     482:	0f 91       	pop	r16
     484:	ff 90       	pop	r15
     486:	ef 90       	pop	r14
     488:	df 90       	pop	r13
     48a:	cf 90       	pop	r12
     48c:	bf 90       	pop	r11
     48e:	af 90       	pop	r10
     490:	08 95       	ret

00000492 <vCoRoutineAddToDelayedList>:
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	8b 01       	movw	r16, r22
     49c:	c0 91 ae 00 	lds	r28, 0x00AE
     4a0:	d0 91 af 00 	lds	r29, 0x00AF
     4a4:	c8 0f       	add	r28, r24
     4a6:	d9 1f       	adc	r29, r25
     4a8:	80 91 7a 00 	lds	r24, 0x007A
     4ac:	90 91 7b 00 	lds	r25, 0x007B
     4b0:	02 96       	adiw	r24, 0x02	; 2
     4b2:	0e 94 a8 04 	call	0x950	; 0x950 <uxListRemove>
     4b6:	e0 91 7a 00 	lds	r30, 0x007A
     4ba:	f0 91 7b 00 	lds	r31, 0x007B
     4be:	d3 83       	std	Z+3, r29	; 0x03
     4c0:	c2 83       	std	Z+2, r28	; 0x02
     4c2:	80 91 ae 00 	lds	r24, 0x00AE
     4c6:	90 91 af 00 	lds	r25, 0x00AF
     4ca:	c8 17       	cp	r28, r24
     4cc:	d9 07       	cpc	r29, r25
     4ce:	50 f4       	brcc	.+20     	; 0x4e4 <vCoRoutineAddToDelayedList+0x52>
     4d0:	bf 01       	movw	r22, r30
     4d2:	6e 5f       	subi	r22, 0xFE	; 254
     4d4:	7f 4f       	sbci	r23, 0xFF	; 255
     4d6:	80 91 ac 00 	lds	r24, 0x00AC
     4da:	90 91 ad 00 	lds	r25, 0x00AD
     4de:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <vListInsert>
     4e2:	09 c0       	rjmp	.+18     	; 0x4f6 <vCoRoutineAddToDelayedList+0x64>
     4e4:	bf 01       	movw	r22, r30
     4e6:	6e 5f       	subi	r22, 0xFE	; 254
     4e8:	7f 4f       	sbci	r23, 0xFF	; 255
     4ea:	80 91 aa 00 	lds	r24, 0x00AA
     4ee:	90 91 ab 00 	lds	r25, 0x00AB
     4f2:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <vListInsert>
     4f6:	01 15       	cp	r16, r1
     4f8:	11 05       	cpc	r17, r1
     4fa:	49 f0       	breq	.+18     	; 0x50e <vCoRoutineAddToDelayedList+0x7c>
     4fc:	60 91 7a 00 	lds	r22, 0x007A
     500:	70 91 7b 00 	lds	r23, 0x007B
     504:	64 5f       	subi	r22, 0xF4	; 244
     506:	7f 4f       	sbci	r23, 0xFF	; 255
     508:	c8 01       	movw	r24, r16
     50a:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <vListInsert>
     50e:	df 91       	pop	r29
     510:	cf 91       	pop	r28
     512:	1f 91       	pop	r17
     514:	0f 91       	pop	r16
     516:	08 95       	ret

00000518 <vCoRoutineSchedule>:
     518:	cf 92       	push	r12
     51a:	df 92       	push	r13
     51c:	ef 92       	push	r14
     51e:	ff 92       	push	r15
     520:	0f 93       	push	r16
     522:	1f 93       	push	r17
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	80 91 a1 00 	lds	r24, 0x00A1
     52c:	88 23       	and	r24, r24
     52e:	b9 f1       	breq	.+110    	; 0x59e <vCoRoutineSchedule+0x86>
     530:	0f 2e       	mov	r0, r31
     532:	f6 ea       	ldi	r31, 0xA6	; 166
     534:	ef 2e       	mov	r14, r31
     536:	f0 e0       	ldi	r31, 0x00	; 0
     538:	ff 2e       	mov	r15, r31
     53a:	f0 2d       	mov	r31, r0
     53c:	0f 2e       	mov	r0, r31
     53e:	f1 ea       	ldi	r31, 0xA1	; 161
     540:	cf 2e       	mov	r12, r31
     542:	f0 e0       	ldi	r31, 0x00	; 0
     544:	df 2e       	mov	r13, r31
     546:	f0 2d       	mov	r31, r0
     548:	f8 94       	cli
     54a:	d7 01       	movw	r26, r14
     54c:	ed 91       	ld	r30, X+
     54e:	fc 91       	ld	r31, X
     550:	c6 81       	ldd	r28, Z+6	; 0x06
     552:	d7 81       	ldd	r29, Z+7	; 0x07
     554:	ce 01       	movw	r24, r28
     556:	0c 96       	adiw	r24, 0x0c	; 12
     558:	0e 94 a8 04 	call	0x950	; 0x950 <uxListRemove>
     55c:	78 94       	sei
     55e:	8e 01       	movw	r16, r28
     560:	0e 5f       	subi	r16, 0xFE	; 254
     562:	1f 4f       	sbci	r17, 0xFF	; 255
     564:	c8 01       	movw	r24, r16
     566:	0e 94 a8 04 	call	0x950	; 0x950 <uxListRemove>
     56a:	8e 89       	ldd	r24, Y+22	; 0x16
     56c:	90 91 7c 00 	lds	r25, 0x007C
     570:	98 17       	cp	r25, r24
     572:	10 f4       	brcc	.+4      	; 0x578 <vCoRoutineSchedule+0x60>
     574:	80 93 7c 00 	sts	0x007C, r24
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	9c 01       	movw	r18, r24
     57c:	22 0f       	add	r18, r18
     57e:	33 1f       	adc	r19, r19
     580:	22 0f       	add	r18, r18
     582:	33 1f       	adc	r19, r19
     584:	22 0f       	add	r18, r18
     586:	33 1f       	adc	r19, r19
     588:	82 0f       	add	r24, r18
     58a:	93 1f       	adc	r25, r19
     58c:	83 58       	subi	r24, 0x83	; 131
     58e:	9f 4f       	sbci	r25, 0xFF	; 255
     590:	b8 01       	movw	r22, r16
     592:	0e 94 42 04 	call	0x884	; 0x884 <vListInsertEnd>
     596:	f6 01       	movw	r30, r12
     598:	80 81       	ld	r24, Z
     59a:	88 23       	and	r24, r24
     59c:	a9 f6       	brne	.-86     	; 0x548 <vCoRoutineSchedule+0x30>
     59e:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <xTaskGetTickCount>
     5a2:	20 91 b0 00 	lds	r18, 0x00B0
     5a6:	30 91 b1 00 	lds	r19, 0x00B1
     5aa:	82 1b       	sub	r24, r18
     5ac:	93 0b       	sbc	r25, r19
     5ae:	90 93 b3 00 	sts	0x00B3, r25
     5b2:	80 93 b2 00 	sts	0x00B2, r24
     5b6:	74 c0       	rjmp	.+232    	; 0x6a0 <vCoRoutineSchedule+0x188>
     5b8:	20 91 ae 00 	lds	r18, 0x00AE
     5bc:	30 91 af 00 	lds	r19, 0x00AF
     5c0:	2f 5f       	subi	r18, 0xFF	; 255
     5c2:	3f 4f       	sbci	r19, 0xFF	; 255
     5c4:	30 93 af 00 	sts	0x00AF, r19
     5c8:	20 93 ae 00 	sts	0x00AE, r18
     5cc:	01 97       	sbiw	r24, 0x01	; 1
     5ce:	90 93 b3 00 	sts	0x00B3, r25
     5d2:	80 93 b2 00 	sts	0x00B2, r24
     5d6:	21 15       	cp	r18, r1
     5d8:	31 05       	cpc	r19, r1
     5da:	81 f4       	brne	.+32     	; 0x5fc <vCoRoutineSchedule+0xe4>
     5dc:	80 91 aa 00 	lds	r24, 0x00AA
     5e0:	90 91 ab 00 	lds	r25, 0x00AB
     5e4:	20 91 ac 00 	lds	r18, 0x00AC
     5e8:	30 91 ad 00 	lds	r19, 0x00AD
     5ec:	30 93 ab 00 	sts	0x00AB, r19
     5f0:	20 93 aa 00 	sts	0x00AA, r18
     5f4:	90 93 ad 00 	sts	0x00AD, r25
     5f8:	80 93 ac 00 	sts	0x00AC, r24
     5fc:	e0 91 aa 00 	lds	r30, 0x00AA
     600:	f0 91 ab 00 	lds	r31, 0x00AB
     604:	80 81       	ld	r24, Z
     606:	88 23       	and	r24, r24
     608:	09 f4       	brne	.+2      	; 0x60c <vCoRoutineSchedule+0xf4>
     60a:	4a c0       	rjmp	.+148    	; 0x6a0 <vCoRoutineSchedule+0x188>
     60c:	05 80       	ldd	r0, Z+5	; 0x05
     60e:	f6 81       	ldd	r31, Z+6	; 0x06
     610:	e0 2d       	mov	r30, r0
     612:	c6 81       	ldd	r28, Z+6	; 0x06
     614:	d7 81       	ldd	r29, Z+7	; 0x07
     616:	2a 81       	ldd	r18, Y+2	; 0x02
     618:	3b 81       	ldd	r19, Y+3	; 0x03
     61a:	80 91 ae 00 	lds	r24, 0x00AE
     61e:	90 91 af 00 	lds	r25, 0x00AF
     622:	82 17       	cp	r24, r18
     624:	93 07       	cpc	r25, r19
     626:	78 f4       	brcc	.+30     	; 0x646 <vCoRoutineSchedule+0x12e>
     628:	3b c0       	rjmp	.+118    	; 0x6a0 <vCoRoutineSchedule+0x188>
     62a:	05 80       	ldd	r0, Z+5	; 0x05
     62c:	f6 81       	ldd	r31, Z+6	; 0x06
     62e:	e0 2d       	mov	r30, r0
     630:	c6 81       	ldd	r28, Z+6	; 0x06
     632:	d7 81       	ldd	r29, Z+7	; 0x07
     634:	2a 81       	ldd	r18, Y+2	; 0x02
     636:	3b 81       	ldd	r19, Y+3	; 0x03
     638:	80 91 ae 00 	lds	r24, 0x00AE
     63c:	90 91 af 00 	lds	r25, 0x00AF
     640:	82 17       	cp	r24, r18
     642:	93 07       	cpc	r25, r19
     644:	68 f1       	brcs	.+90     	; 0x6a0 <vCoRoutineSchedule+0x188>
     646:	f8 94       	cli
     648:	8e 01       	movw	r16, r28
     64a:	0e 5f       	subi	r16, 0xFE	; 254
     64c:	1f 4f       	sbci	r17, 0xFF	; 255
     64e:	c8 01       	movw	r24, r16
     650:	0e 94 a8 04 	call	0x950	; 0x950 <uxListRemove>
     654:	8c 89       	ldd	r24, Y+20	; 0x14
     656:	9d 89       	ldd	r25, Y+21	; 0x15
     658:	00 97       	sbiw	r24, 0x00	; 0
     65a:	21 f0       	breq	.+8      	; 0x664 <vCoRoutineSchedule+0x14c>
     65c:	ce 01       	movw	r24, r28
     65e:	0c 96       	adiw	r24, 0x0c	; 12
     660:	0e 94 a8 04 	call	0x950	; 0x950 <uxListRemove>
     664:	78 94       	sei
     666:	8e 89       	ldd	r24, Y+22	; 0x16
     668:	90 91 7c 00 	lds	r25, 0x007C
     66c:	98 17       	cp	r25, r24
     66e:	10 f4       	brcc	.+4      	; 0x674 <vCoRoutineSchedule+0x15c>
     670:	80 93 7c 00 	sts	0x007C, r24
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	9c 01       	movw	r18, r24
     678:	22 0f       	add	r18, r18
     67a:	33 1f       	adc	r19, r19
     67c:	22 0f       	add	r18, r18
     67e:	33 1f       	adc	r19, r19
     680:	22 0f       	add	r18, r18
     682:	33 1f       	adc	r19, r19
     684:	82 0f       	add	r24, r18
     686:	93 1f       	adc	r25, r19
     688:	83 58       	subi	r24, 0x83	; 131
     68a:	9f 4f       	sbci	r25, 0xFF	; 255
     68c:	b8 01       	movw	r22, r16
     68e:	0e 94 42 04 	call	0x884	; 0x884 <vListInsertEnd>
     692:	e0 91 aa 00 	lds	r30, 0x00AA
     696:	f0 91 ab 00 	lds	r31, 0x00AB
     69a:	80 81       	ld	r24, Z
     69c:	88 23       	and	r24, r24
     69e:	29 f6       	brne	.-118    	; 0x62a <vCoRoutineSchedule+0x112>
     6a0:	80 91 b2 00 	lds	r24, 0x00B2
     6a4:	90 91 b3 00 	lds	r25, 0x00B3
     6a8:	00 97       	sbiw	r24, 0x00	; 0
     6aa:	09 f0       	breq	.+2      	; 0x6ae <vCoRoutineSchedule+0x196>
     6ac:	85 cf       	rjmp	.-246    	; 0x5b8 <vCoRoutineSchedule+0xa0>
     6ae:	80 91 ae 00 	lds	r24, 0x00AE
     6b2:	90 91 af 00 	lds	r25, 0x00AF
     6b6:	90 93 b1 00 	sts	0x00B1, r25
     6ba:	80 93 b0 00 	sts	0x00B0, r24
     6be:	20 91 7c 00 	lds	r18, 0x007C
     6c2:	82 2f       	mov	r24, r18
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	fc 01       	movw	r30, r24
     6c8:	ee 0f       	add	r30, r30
     6ca:	ff 1f       	adc	r31, r31
     6cc:	ee 0f       	add	r30, r30
     6ce:	ff 1f       	adc	r31, r31
     6d0:	ee 0f       	add	r30, r30
     6d2:	ff 1f       	adc	r31, r31
     6d4:	e8 0f       	add	r30, r24
     6d6:	f9 1f       	adc	r31, r25
     6d8:	e3 58       	subi	r30, 0x83	; 131
     6da:	ff 4f       	sbci	r31, 0xFF	; 255
     6dc:	30 81       	ld	r19, Z
     6de:	33 23       	and	r19, r19
     6e0:	d9 f4       	brne	.+54     	; 0x718 <vCoRoutineSchedule+0x200>
     6e2:	22 23       	and	r18, r18
     6e4:	31 f4       	brne	.+12     	; 0x6f2 <vCoRoutineSchedule+0x1da>
     6e6:	47 c0       	rjmp	.+142    	; 0x776 <vCoRoutineSchedule+0x25e>
     6e8:	22 23       	and	r18, r18
     6ea:	19 f4       	brne	.+6      	; 0x6f2 <vCoRoutineSchedule+0x1da>
     6ec:	20 93 7c 00 	sts	0x007C, r18
     6f0:	42 c0       	rjmp	.+132    	; 0x776 <vCoRoutineSchedule+0x25e>
     6f2:	21 50       	subi	r18, 0x01	; 1
     6f4:	82 2f       	mov	r24, r18
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	fc 01       	movw	r30, r24
     6fa:	ee 0f       	add	r30, r30
     6fc:	ff 1f       	adc	r31, r31
     6fe:	ee 0f       	add	r30, r30
     700:	ff 1f       	adc	r31, r31
     702:	ee 0f       	add	r30, r30
     704:	ff 1f       	adc	r31, r31
     706:	e8 0f       	add	r30, r24
     708:	f9 1f       	adc	r31, r25
     70a:	e3 58       	subi	r30, 0x83	; 131
     70c:	ff 4f       	sbci	r31, 0xFF	; 255
     70e:	30 81       	ld	r19, Z
     710:	33 23       	and	r19, r19
     712:	51 f3       	breq	.-44     	; 0x6e8 <vCoRoutineSchedule+0x1d0>
     714:	20 93 7c 00 	sts	0x007C, r18
     718:	fc 01       	movw	r30, r24
     71a:	ee 0f       	add	r30, r30
     71c:	ff 1f       	adc	r31, r31
     71e:	ee 0f       	add	r30, r30
     720:	ff 1f       	adc	r31, r31
     722:	ee 0f       	add	r30, r30
     724:	ff 1f       	adc	r31, r31
     726:	8e 0f       	add	r24, r30
     728:	9f 1f       	adc	r25, r31
     72a:	fc 01       	movw	r30, r24
     72c:	e3 58       	subi	r30, 0x83	; 131
     72e:	ff 4f       	sbci	r31, 0xFF	; 255
     730:	a1 81       	ldd	r26, Z+1	; 0x01
     732:	b2 81       	ldd	r27, Z+2	; 0x02
     734:	12 96       	adiw	r26, 0x02	; 2
     736:	0d 90       	ld	r0, X+
     738:	bc 91       	ld	r27, X
     73a:	a0 2d       	mov	r26, r0
     73c:	b2 83       	std	Z+2, r27	; 0x02
     73e:	a1 83       	std	Z+1, r26	; 0x01
     740:	cf 01       	movw	r24, r30
     742:	03 96       	adiw	r24, 0x03	; 3
     744:	a8 17       	cp	r26, r24
     746:	b9 07       	cpc	r27, r25
     748:	31 f4       	brne	.+12     	; 0x756 <vCoRoutineSchedule+0x23e>
     74a:	12 96       	adiw	r26, 0x02	; 2
     74c:	8d 91       	ld	r24, X+
     74e:	9c 91       	ld	r25, X
     750:	13 97       	sbiw	r26, 0x03	; 3
     752:	92 83       	std	Z+2, r25	; 0x02
     754:	81 83       	std	Z+1, r24	; 0x01
     756:	01 80       	ldd	r0, Z+1	; 0x01
     758:	f2 81       	ldd	r31, Z+2	; 0x02
     75a:	e0 2d       	mov	r30, r0
     75c:	a6 81       	ldd	r26, Z+6	; 0x06
     75e:	b7 81       	ldd	r27, Z+7	; 0x07
     760:	b0 93 7b 00 	sts	0x007B, r27
     764:	a0 93 7a 00 	sts	0x007A, r26
     768:	ed 91       	ld	r30, X+
     76a:	fc 91       	ld	r31, X
     76c:	11 97       	sbiw	r26, 0x01	; 1
     76e:	cd 01       	movw	r24, r26
     770:	57 96       	adiw	r26, 0x17	; 23
     772:	6c 91       	ld	r22, X
     774:	09 95       	icall
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	1f 91       	pop	r17
     77c:	0f 91       	pop	r16
     77e:	ff 90       	pop	r15
     780:	ef 90       	pop	r14
     782:	df 90       	pop	r13
     784:	cf 90       	pop	r12
     786:	08 95       	ret

00000788 <xCoRoutineRemoveFromEventList>:
     788:	0f 93       	push	r16
     78a:	1f 93       	push	r17
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	dc 01       	movw	r26, r24
     792:	15 96       	adiw	r26, 0x05	; 5
     794:	ed 91       	ld	r30, X+
     796:	fc 91       	ld	r31, X
     798:	16 97       	sbiw	r26, 0x06	; 6
     79a:	06 81       	ldd	r16, Z+6	; 0x06
     79c:	17 81       	ldd	r17, Z+7	; 0x07
     79e:	e8 01       	movw	r28, r16
     7a0:	2c 96       	adiw	r28, 0x0c	; 12
     7a2:	ce 01       	movw	r24, r28
     7a4:	0e 94 a8 04 	call	0x950	; 0x950 <uxListRemove>
     7a8:	81 ea       	ldi	r24, 0xA1	; 161
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	be 01       	movw	r22, r28
     7ae:	0e 94 42 04 	call	0x884	; 0x884 <vListInsertEnd>
     7b2:	e0 91 7a 00 	lds	r30, 0x007A
     7b6:	f0 91 7b 00 	lds	r31, 0x007B
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	d8 01       	movw	r26, r16
     7be:	56 96       	adiw	r26, 0x16	; 22
     7c0:	2c 91       	ld	r18, X
     7c2:	56 97       	sbiw	r26, 0x16	; 22
     7c4:	96 89       	ldd	r25, Z+22	; 0x16
     7c6:	29 17       	cp	r18, r25
     7c8:	08 f4       	brcc	.+2      	; 0x7cc <xCoRoutineRemoveFromEventList+0x44>
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	1f 91       	pop	r17
     7d2:	0f 91       	pop	r16
     7d4:	08 95       	ret

000007d6 <pvPortMalloc>:
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
     7da:	ec 01       	movw	r28, r24
     7dc:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <vTaskSuspendAll>
     7e0:	80 91 b4 00 	lds	r24, 0x00B4
     7e4:	90 91 b5 00 	lds	r25, 0x00B5
     7e8:	00 97       	sbiw	r24, 0x00	; 0
     7ea:	31 f4       	brne	.+12     	; 0x7f8 <pvPortMalloc+0x22>
     7ec:	87 eb       	ldi	r24, 0xB7	; 183
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	90 93 b5 00 	sts	0x00B5, r25
     7f4:	80 93 b4 00 	sts	0x00B4, r24
     7f8:	20 91 92 06 	lds	r18, 0x0692
     7fc:	30 91 93 06 	lds	r19, 0x0693
     800:	ce 01       	movw	r24, r28
     802:	82 0f       	add	r24, r18
     804:	93 1f       	adc	r25, r19
     806:	45 e0       	ldi	r20, 0x05	; 5
     808:	8b 3d       	cpi	r24, 0xDB	; 219
     80a:	94 07       	cpc	r25, r20
     80c:	70 f4       	brcc	.+28     	; 0x82a <pvPortMalloc+0x54>
     80e:	28 17       	cp	r18, r24
     810:	39 07       	cpc	r19, r25
     812:	70 f4       	brcc	.+28     	; 0x830 <pvPortMalloc+0x5a>
     814:	c0 91 b4 00 	lds	r28, 0x00B4
     818:	d0 91 b5 00 	lds	r29, 0x00B5
     81c:	c2 0f       	add	r28, r18
     81e:	d3 1f       	adc	r29, r19
     820:	90 93 93 06 	sts	0x0693, r25
     824:	80 93 92 06 	sts	0x0692, r24
     828:	05 c0       	rjmp	.+10     	; 0x834 <pvPortMalloc+0x5e>
     82a:	c0 e0       	ldi	r28, 0x00	; 0
     82c:	d0 e0       	ldi	r29, 0x00	; 0
     82e:	02 c0       	rjmp	.+4      	; 0x834 <pvPortMalloc+0x5e>
     830:	c0 e0       	ldi	r28, 0x00	; 0
     832:	d0 e0       	ldi	r29, 0x00	; 0
     834:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <xTaskResumeAll>
     838:	8c 2f       	mov	r24, r28
     83a:	9d 2f       	mov	r25, r29
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	08 95       	ret

00000842 <vPortFree>:
     842:	08 95       	ret

00000844 <vPortInitialiseBlocks>:
     844:	10 92 93 06 	sts	0x0693, r1
     848:	10 92 92 06 	sts	0x0692, r1
     84c:	08 95       	ret

0000084e <xPortGetFreeHeapSize>:
     84e:	20 91 92 06 	lds	r18, 0x0692
     852:	30 91 93 06 	lds	r19, 0x0693
     856:	8b ed       	ldi	r24, 0xDB	; 219
     858:	95 e0       	ldi	r25, 0x05	; 5
     85a:	82 1b       	sub	r24, r18
     85c:	93 0b       	sbc	r25, r19
     85e:	08 95       	ret

00000860 <vListInitialise>:
     860:	fc 01       	movw	r30, r24
     862:	03 96       	adiw	r24, 0x03	; 3
     864:	92 83       	std	Z+2, r25	; 0x02
     866:	81 83       	std	Z+1, r24	; 0x01
     868:	2f ef       	ldi	r18, 0xFF	; 255
     86a:	3f ef       	ldi	r19, 0xFF	; 255
     86c:	34 83       	std	Z+4, r19	; 0x04
     86e:	23 83       	std	Z+3, r18	; 0x03
     870:	96 83       	std	Z+6, r25	; 0x06
     872:	85 83       	std	Z+5, r24	; 0x05
     874:	90 87       	std	Z+8, r25	; 0x08
     876:	87 83       	std	Z+7, r24	; 0x07
     878:	10 82       	st	Z, r1
     87a:	08 95       	ret

0000087c <vListInitialiseItem>:
     87c:	fc 01       	movw	r30, r24
     87e:	11 86       	std	Z+9, r1	; 0x09
     880:	10 86       	std	Z+8, r1	; 0x08
     882:	08 95       	ret

00000884 <vListInsertEnd>:
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	ec 01       	movw	r28, r24
     88a:	fb 01       	movw	r30, r22
     88c:	89 81       	ldd	r24, Y+1	; 0x01
     88e:	9a 81       	ldd	r25, Y+2	; 0x02
     890:	dc 01       	movw	r26, r24
     892:	12 96       	adiw	r26, 0x02	; 2
     894:	2d 91       	ld	r18, X+
     896:	3c 91       	ld	r19, X
     898:	13 97       	sbiw	r26, 0x03	; 3
     89a:	33 83       	std	Z+3, r19	; 0x03
     89c:	22 83       	std	Z+2, r18	; 0x02
     89e:	29 81       	ldd	r18, Y+1	; 0x01
     8a0:	3a 81       	ldd	r19, Y+2	; 0x02
     8a2:	35 83       	std	Z+5, r19	; 0x05
     8a4:	24 83       	std	Z+4, r18	; 0x04
     8a6:	12 96       	adiw	r26, 0x02	; 2
     8a8:	2d 91       	ld	r18, X+
     8aa:	3c 91       	ld	r19, X
     8ac:	13 97       	sbiw	r26, 0x03	; 3
     8ae:	d9 01       	movw	r26, r18
     8b0:	15 96       	adiw	r26, 0x05	; 5
     8b2:	7c 93       	st	X, r23
     8b4:	6e 93       	st	-X, r22
     8b6:	14 97       	sbiw	r26, 0x04	; 4
     8b8:	dc 01       	movw	r26, r24
     8ba:	13 96       	adiw	r26, 0x03	; 3
     8bc:	7c 93       	st	X, r23
     8be:	6e 93       	st	-X, r22
     8c0:	12 97       	sbiw	r26, 0x02	; 2
     8c2:	7a 83       	std	Y+2, r23	; 0x02
     8c4:	69 83       	std	Y+1, r22	; 0x01
     8c6:	d1 87       	std	Z+9, r29	; 0x09
     8c8:	c0 87       	std	Z+8, r28	; 0x08
     8ca:	88 81       	ld	r24, Y
     8cc:	8f 5f       	subi	r24, 0xFF	; 255
     8ce:	88 83       	st	Y, r24
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	08 95       	ret

000008d6 <vListInsert>:
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
     8da:	ac 01       	movw	r20, r24
     8dc:	eb 01       	movw	r28, r22
     8de:	28 81       	ld	r18, Y
     8e0:	39 81       	ldd	r19, Y+1	; 0x01
     8e2:	8f ef       	ldi	r24, 0xFF	; 255
     8e4:	2f 3f       	cpi	r18, 0xFF	; 255
     8e6:	38 07       	cpc	r19, r24
     8e8:	21 f4       	brne	.+8      	; 0x8f2 <vListInsert+0x1c>
     8ea:	fa 01       	movw	r30, r20
     8ec:	a7 81       	ldd	r26, Z+7	; 0x07
     8ee:	b0 85       	ldd	r27, Z+8	; 0x08
     8f0:	18 c0       	rjmp	.+48     	; 0x922 <vListInsert+0x4c>
     8f2:	da 01       	movw	r26, r20
     8f4:	13 96       	adiw	r26, 0x03	; 3
     8f6:	fa 01       	movw	r30, r20
     8f8:	85 81       	ldd	r24, Z+5	; 0x05
     8fa:	96 81       	ldd	r25, Z+6	; 0x06
     8fc:	fc 01       	movw	r30, r24
     8fe:	80 81       	ld	r24, Z
     900:	91 81       	ldd	r25, Z+1	; 0x01
     902:	28 17       	cp	r18, r24
     904:	39 07       	cpc	r19, r25
     906:	68 f0       	brcs	.+26     	; 0x922 <vListInsert+0x4c>
     908:	12 96       	adiw	r26, 0x02	; 2
     90a:	0d 90       	ld	r0, X+
     90c:	bc 91       	ld	r27, X
     90e:	a0 2d       	mov	r26, r0
     910:	12 96       	adiw	r26, 0x02	; 2
     912:	ed 91       	ld	r30, X+
     914:	fc 91       	ld	r31, X
     916:	13 97       	sbiw	r26, 0x03	; 3
     918:	80 81       	ld	r24, Z
     91a:	91 81       	ldd	r25, Z+1	; 0x01
     91c:	28 17       	cp	r18, r24
     91e:	39 07       	cpc	r19, r25
     920:	98 f7       	brcc	.-26     	; 0x908 <vListInsert+0x32>
     922:	12 96       	adiw	r26, 0x02	; 2
     924:	ed 91       	ld	r30, X+
     926:	fc 91       	ld	r31, X
     928:	13 97       	sbiw	r26, 0x03	; 3
     92a:	fb 83       	std	Y+3, r31	; 0x03
     92c:	ea 83       	std	Y+2, r30	; 0x02
     92e:	d5 83       	std	Z+5, r29	; 0x05
     930:	c4 83       	std	Z+4, r28	; 0x04
     932:	bd 83       	std	Y+5, r27	; 0x05
     934:	ac 83       	std	Y+4, r26	; 0x04
     936:	13 96       	adiw	r26, 0x03	; 3
     938:	dc 93       	st	X, r29
     93a:	ce 93       	st	-X, r28
     93c:	12 97       	sbiw	r26, 0x02	; 2
     93e:	59 87       	std	Y+9, r21	; 0x09
     940:	48 87       	std	Y+8, r20	; 0x08
     942:	fa 01       	movw	r30, r20
     944:	80 81       	ld	r24, Z
     946:	8f 5f       	subi	r24, 0xFF	; 255
     948:	80 83       	st	Z, r24
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	08 95       	ret

00000950 <uxListRemove>:
     950:	fc 01       	movw	r30, r24
     952:	a2 81       	ldd	r26, Z+2	; 0x02
     954:	b3 81       	ldd	r27, Z+3	; 0x03
     956:	84 81       	ldd	r24, Z+4	; 0x04
     958:	95 81       	ldd	r25, Z+5	; 0x05
     95a:	15 96       	adiw	r26, 0x05	; 5
     95c:	9c 93       	st	X, r25
     95e:	8e 93       	st	-X, r24
     960:	14 97       	sbiw	r26, 0x04	; 4
     962:	a4 81       	ldd	r26, Z+4	; 0x04
     964:	b5 81       	ldd	r27, Z+5	; 0x05
     966:	82 81       	ldd	r24, Z+2	; 0x02
     968:	93 81       	ldd	r25, Z+3	; 0x03
     96a:	13 96       	adiw	r26, 0x03	; 3
     96c:	9c 93       	st	X, r25
     96e:	8e 93       	st	-X, r24
     970:	12 97       	sbiw	r26, 0x02	; 2
     972:	a0 85       	ldd	r26, Z+8	; 0x08
     974:	b1 85       	ldd	r27, Z+9	; 0x09
     976:	11 96       	adiw	r26, 0x01	; 1
     978:	8d 91       	ld	r24, X+
     97a:	9c 91       	ld	r25, X
     97c:	12 97       	sbiw	r26, 0x02	; 2
     97e:	8e 17       	cp	r24, r30
     980:	9f 07       	cpc	r25, r31
     982:	31 f4       	brne	.+12     	; 0x990 <uxListRemove+0x40>
     984:	84 81       	ldd	r24, Z+4	; 0x04
     986:	95 81       	ldd	r25, Z+5	; 0x05
     988:	12 96       	adiw	r26, 0x02	; 2
     98a:	9c 93       	st	X, r25
     98c:	8e 93       	st	-X, r24
     98e:	11 97       	sbiw	r26, 0x01	; 1
     990:	11 86       	std	Z+9, r1	; 0x09
     992:	10 86       	std	Z+8, r1	; 0x08
     994:	8c 91       	ld	r24, X
     996:	81 50       	subi	r24, 0x01	; 1
     998:	8c 93       	st	X, r24
     99a:	8c 91       	ld	r24, X
     99c:	08 95       	ret

0000099e <getData>:
		
	}


void getData() // Tarea para sumar componetes de los sensores no activos,girar el eje cordenado con la matriz y cambiar la velocidad de los motores
{unsigned char dato_u[3], frame_type, dato[5] ,validar=0;
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	cd b7       	in	r28, 0x3d	; 61
     9a4:	de b7       	in	r29, 0x3e	; 62
     9a6:	2c 97       	sbiw	r28, 0x0c	; 12
     9a8:	0f b6       	in	r0, 0x3f	; 63
     9aa:	f8 94       	cli
     9ac:	de bf       	out	0x3e, r29	; 62
     9ae:	0f be       	out	0x3f, r0	; 63
     9b0:	cd bf       	out	0x3d, r28	; 61
     9b2:	77 24       	eor	r7, r7
					{
						wb.byte[i]=dato[3-i];
					}
					
					valor_max=wb.word;
					for (i=0;i<3;i++)
     9b4:	8e 01       	movw	r16, r28
     9b6:	0f 5f       	subi	r16, 0xFF	; 255
     9b8:	1f 4f       	sbci	r17, 0xFF	; 255
		
		
	}


void getData() // Tarea para sumar componetes de los sensores no activos,girar el eje cordenado con la matriz y cambiar la velocidad de los motores
     9ba:	ae 01       	movw	r20, r28
     9bc:	4c 5f       	subi	r20, 0xFC	; 252
     9be:	5f 4f       	sbci	r21, 0xFF	; 255
     9c0:	60 2f       	mov	r22, r16
     9c2:	71 2f       	mov	r23, r17
     9c4:	ce 01       	movw	r24, r28
     9c6:	09 96       	adiw	r24, 0x09	; 9
			{
				if (dato[4]==0xff)
				{
					for (i=0;i<4;i++)
					{
						wb.byte[i]=dato[3-i];
     9c8:	0f 2e       	mov	r0, r31
     9ca:	fe ef       	ldi	r31, 0xFE	; 254
     9cc:	ef 2e       	mov	r14, r31
     9ce:	f6 e0       	ldi	r31, 0x06	; 6
     9d0:	ff 2e       	mov	r15, r31
     9d2:	f0 2d       	mov	r31, r0
     9d4:	27 01       	movw	r4, r14
     9d6:	08 94       	sec
     9d8:	41 1c       	adc	r4, r1
     9da:	51 1c       	adc	r5, r1
     9dc:	97 01       	movw	r18, r14
     9de:	2e 5f       	subi	r18, 0xFE	; 254
     9e0:	3f 4f       	sbci	r19, 0xFF	; 255
     9e2:	3a 87       	std	Y+10, r19	; 0x0a
     9e4:	29 87       	std	Y+9, r18	; 0x09
     9e6:	f7 01       	movw	r30, r14
     9e8:	33 96       	adiw	r30, 0x03	; 3
     9ea:	fc 87       	std	Y+12, r31	; 0x0c
     9ec:	eb 87       	std	Y+11, r30	; 0x0b
					}
					
					valor_max=wb.word;
					for (i=0;i<3;i++)
     9ee:	cc 24       	eor	r12, r12
     9f0:	dd 24       	eor	r13, r13
     9f2:	d8 01       	movw	r26, r16
		
		
	}


void getData() // Tarea para sumar componetes de los sensores no activos,girar el eje cordenado con la matriz y cambiar la velocidad de los motores
     9f4:	e6 2f       	mov	r30, r22
     9f6:	f7 2f       	mov	r31, r23
	while(1){
	
		
		for (i=0; i<3; i++)
		{
			while ((UCSRA & (1<<RXC)) == 0 );
     9f8:	5f 9b       	sbis	0x0b, 7	; 11
     9fa:	fe cf       	rjmp	.-4      	; 0x9f8 <getData+0x5a>
			dato_u[i]=UDR; //Capturar el frame 'U'
     9fc:	2c b1       	in	r18, 0x0c	; 12
     9fe:	21 93       	st	Z+, r18
{unsigned char dato_u[3], frame_type, dato[5] ,validar=0;
	int i;
	while(1){
	
		
		for (i=0; i<3; i++)
     a00:	e4 17       	cp	r30, r20
     a02:	f5 07       	cpc	r31, r21
     a04:	c9 f7       	brne	.-14     	; 0x9f8 <getData+0x5a>
		{
			while ((UCSRA & (1<<RXC)) == 0 );
			dato_u[i]=UDR; //Capturar el frame 'U'
		}
		while ((UCSRA & (1<<RXC)) == 0 );
     a06:	5f 9b       	sbis	0x0b, 7	; 11
     a08:	fe cf       	rjmp	.-4      	; 0xa06 <getData+0x68>
		frame_type=UDR;
     a0a:	3c b1       	in	r19, 0x0c	; 12
     a0c:	fa 01       	movw	r30, r20
		
		for (i=0;i<5;i++)
		{
			while ((UCSRA & (1<<RXC)) == 0 );
     a0e:	5f 9b       	sbis	0x0b, 7	; 11
     a10:	fe cf       	rjmp	.-4      	; 0xa0e <getData+0x70>
			dato[i]=UDR;
     a12:	2c b1       	in	r18, 0x0c	; 12
     a14:	21 93       	st	Z+, r18
			dato_u[i]=UDR; //Capturar el frame 'U'
		}
		while ((UCSRA & (1<<RXC)) == 0 );
		frame_type=UDR;
		
		for (i=0;i<5;i++)
     a16:	e8 17       	cp	r30, r24
     a18:	f9 07       	cpc	r31, r25
     a1a:	c9 f7       	brne	.-14     	; 0xa0e <getData+0x70>
		{
			while ((UCSRA & (1<<RXC)) == 0 );
			dato[i]=UDR;
		}
		
		if (dato_u[0]==0x55 && dato_u[1]==0x55 && dato_u[2]==0x55) //Validar que llego el caracter U
     a1c:	29 81       	ldd	r18, Y+1	; 0x01
     a1e:	25 35       	cpi	r18, 0x55	; 85
     a20:	41 f7       	brne	.-48     	; 0x9f2 <getData+0x54>
     a22:	2a 81       	ldd	r18, Y+2	; 0x02
     a24:	25 35       	cpi	r18, 0x55	; 85
     a26:	29 f7       	brne	.-54     	; 0x9f2 <getData+0x54>
     a28:	2b 81       	ldd	r18, Y+3	; 0x03
     a2a:	25 35       	cpi	r18, 0x55	; 85
     a2c:	11 f7       	brne	.-60     	; 0x9f2 <getData+0x54>
		{
			if (frame_type==0x10 && validar==0) //Peguntar por la presencia de dispositivo
     a2e:	30 31       	cpi	r19, 0x10	; 16
     a30:	61 f5       	brne	.+88     	; 0xa8a <getData+0xec>
     a32:	77 20       	and	r7, r7
     a34:	51 f5       	brne	.+84     	; 0xa8a <getData+0xec>
			{
				
				if (dato[4]==0xff)//Pregunta por el address
     a36:	28 85       	ldd	r18, Y+8	; 0x08
     a38:	2f 3f       	cpi	r18, 0xFF	; 255
     a3a:	39 f5       	brne	.+78     	; 0xa8a <getData+0xec>
     a3c:	e6 2f       	mov	r30, r22
     a3e:	f7 2f       	mov	r31, r23
				{
					
					for (i=0;i<3;i++)
					{
						while ((UCSRA & (1<<UDRE)) == 0 );
     a40:	5d 9b       	sbis	0x0b, 5	; 11
     a42:	fe cf       	rjmp	.-4      	; 0xa40 <getData+0xa2>
						UDR=dato_u[i];//Imprime U's en la terminal
     a44:	21 91       	ld	r18, Z+
     a46:	2c b9       	out	0x0c, r18	; 12
			{
				
				if (dato[4]==0xff)//Pregunta por el address
				{
					
					for (i=0;i<3;i++)
     a48:	e4 17       	cp	r30, r20
     a4a:	f5 07       	cpc	r31, r21
     a4c:	c9 f7       	brne	.-14     	; 0xa40 <getData+0xa2>
						while ((UCSRA & (1<<UDRE)) == 0 );
						UDR=dato_u[i];//Imprime U's en la terminal
					}
					
					
					while ((UCSRA & (1<<UDRE)) == 0 );
     a4e:	5d 9b       	sbis	0x0b, 5	; 11
     a50:	fe cf       	rjmp	.-4      	; 0xa4e <getData+0xb0>
					UDR=frame_type;//Imprime frame_type.
     a52:	f0 e1       	ldi	r31, 0x10	; 16
     a54:	fc b9       	out	0x0c, r31	; 12
     a56:	0f 2e       	mov	r0, r31
     a58:	f7 e0       	ldi	r31, 0x07	; 7
     a5a:	8f 2e       	mov	r8, r31
     a5c:	99 24       	eor	r9, r9
     a5e:	f0 2d       	mov	r31, r0
     a60:	8c 0e       	add	r8, r28
     a62:	9d 1e       	adc	r9, r29


					for (i=3;i<=4;i++)
     a64:	e3 e0       	ldi	r30, 0x03	; 3
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	54 01       	movw	r10, r8
     a6a:	83 2e       	mov	r8, r19
     a6c:	9d 01       	movw	r18, r26
     a6e:	d5 01       	movw	r26, r10
					{
						while ((UCSRA & (1<<UDRE)) == 0 );
     a70:	5d 9b       	sbis	0x0b, 5	; 11
     a72:	fe cf       	rjmp	.-4      	; 0xa70 <getData+0xd2>
						UDR=dato[i];//Imprime dato en la terminal.
     a74:	7d 90       	ld	r7, X+
     a76:	7c b8       	out	0x0c, r7	; 12
					
					while ((UCSRA & (1<<UDRE)) == 0 );
					UDR=frame_type;//Imprime frame_type.


					for (i=3;i<=4;i++)
     a78:	31 96       	adiw	r30, 0x01	; 1
     a7a:	e5 30       	cpi	r30, 0x05	; 5
     a7c:	f1 05       	cpc	r31, r1
     a7e:	c1 f7       	brne	.-16     	; 0xa70 <getData+0xd2>
     a80:	d9 01       	movw	r26, r18
     a82:	38 2d       	mov	r19, r8
					{
						while ((UCSRA & (1<<UDRE)) == 0 );
						UDR=dato[i];//Imprime dato en la terminal.
					}
					
					validar=1;
     a84:	77 24       	eor	r7, r7
     a86:	73 94       	inc	r7
     a88:	59 c0       	rjmp	.+178    	; 0xb3c <getData+0x19e>
				}
			}
			
			if (frame_type==0x20 && validar==1) //Peguntar por estado de parqueadero
     a8a:	30 32       	cpi	r19, 0x20	; 32
     a8c:	f1 f4       	brne	.+60     	; 0xaca <getData+0x12c>
     a8e:	21 e0       	ldi	r18, 0x01	; 1
     a90:	72 16       	cp	r7, r18
     a92:	d9 f4       	brne	.+54     	; 0xaca <getData+0x12c>
			{
				if (dato[4]==0xff)//Pregunta por el address
     a94:	28 85       	ldd	r18, Y+8	; 0x08
     a96:	2f 3f       	cpi	r18, 0xFF	; 255
     a98:	c1 f4       	brne	.+48     	; 0xaca <getData+0x12c>
     a9a:	96 01       	movw	r18, r12
				{
					
					for (i=0;i<3;i++)
					{
						while ((UCSRA & (1<<UDRE)) == 0 );
     a9c:	5d 9b       	sbis	0x0b, 5	; 11
     a9e:	fe cf       	rjmp	.-4      	; 0xa9c <getData+0xfe>
						UDR=dato_u[i];//Imprime U's en la terminal
     aa0:	ed 91       	ld	r30, X+
     aa2:	ec b9       	out	0x0c, r30	; 12
			if (frame_type==0x20 && validar==1) //Peguntar por estado de parqueadero
			{
				if (dato[4]==0xff)//Pregunta por el address
				{
					
					for (i=0;i<3;i++)
     aa4:	2f 5f       	subi	r18, 0xFF	; 255
     aa6:	3f 4f       	sbci	r19, 0xFF	; 255
     aa8:	23 30       	cpi	r18, 0x03	; 3
     aaa:	31 05       	cpc	r19, r1
     aac:	b9 f7       	brne	.-18     	; 0xa9c <getData+0xfe>
						while ((UCSRA & (1<<UDRE)) == 0 );
						UDR=dato_u[i];//Imprime U's en la terminal
					}
					
					
					while ((UCSRA & (1<<UDRE)) == 0 );
     aae:	5d 9b       	sbis	0x0b, 5	; 11
     ab0:	fe cf       	rjmp	.-4      	; 0xaae <getData+0x110>
					UDR=frame_type;//Imprime frame_type.
     ab2:	30 e2       	ldi	r19, 0x20	; 32
     ab4:	3c b9       	out	0x0c, r19	; 12


					while ((UCSRA & (1<<UDRE)) == 0 );
     ab6:	5d 9b       	sbis	0x0b, 5	; 11
     ab8:	fe cf       	rjmp	.-4      	; 0xab6 <getData+0x118>
					UDR=dato[4];//Imprime dato en la terminal.
     aba:	28 85       	ldd	r18, Y+8	; 0x08
     abc:	2c b9       	out	0x0c, r18	; 12
					
					while ((UCSRA & (1<<UDRE)) == 0 );
     abe:	5d 9b       	sbis	0x0b, 5	; 11
     ac0:	fe cf       	rjmp	.-4      	; 0xabe <getData+0x120>
					UDR=state;
     ac2:	20 91 fb 06 	lds	r18, 0x06FB
     ac6:	2c b9       	out	0x0c, r18	; 12
     ac8:	94 cf       	rjmp	.-216    	; 0x9f2 <getData+0x54>
				}
			}
			
			if (frame_type==0x31 && validar==1) //Configurar minimo rango
     aca:	31 33       	cpi	r19, 0x31	; 49
     acc:	b9 f5       	brne	.+110    	; 0xb3c <getData+0x19e>
     ace:	e1 e0       	ldi	r30, 0x01	; 1
     ad0:	7e 16       	cp	r7, r30
     ad2:	a1 f5       	brne	.+104    	; 0xb3c <getData+0x19e>
			{
				if (dato[4]==0xff)
     ad4:	28 85       	ldd	r18, Y+8	; 0x08
     ad6:	2f 3f       	cpi	r18, 0xFF	; 255
     ad8:	89 f5       	brne	.+98     	; 0xb3c <getData+0x19e>
				{
					for (i=0;i<4;i++)
					{
						wb.byte[i]=dato[3-i];
     ada:	2f 81       	ldd	r18, Y+7	; 0x07
     adc:	f7 01       	movw	r30, r14
     ade:	20 83       	st	Z, r18
     ae0:	2e 81       	ldd	r18, Y+6	; 0x06
     ae2:	f2 01       	movw	r30, r4
     ae4:	20 83       	st	Z, r18
     ae6:	2d 81       	ldd	r18, Y+5	; 0x05
     ae8:	e9 85       	ldd	r30, Y+9	; 0x09
     aea:	fa 85       	ldd	r31, Y+10	; 0x0a
     aec:	20 83       	st	Z, r18
     aee:	2c 81       	ldd	r18, Y+4	; 0x04
     af0:	eb 85       	ldd	r30, Y+11	; 0x0b
     af2:	fc 85       	ldd	r31, Y+12	; 0x0c
     af4:	20 83       	st	Z, r18
					}
					
					valor_min=wb.word;
     af6:	f7 01       	movw	r30, r14
     af8:	80 80       	ld	r8, Z
     afa:	91 80       	ldd	r9, Z+1	; 0x01
     afc:	a2 80       	ldd	r10, Z+2	; 0x02
     afe:	b3 80       	ldd	r11, Z+3	; 0x03
     b00:	80 92 6f 00 	sts	0x006F, r8
     b04:	90 92 70 00 	sts	0x0070, r9
     b08:	a0 92 71 00 	sts	0x0071, r10
     b0c:	b0 92 72 00 	sts	0x0072, r11
					for (i=0;i<3;i++)
     b10:	96 01       	movw	r18, r12
					{
						while ((UCSRA & (1<<UDRE)) == 0 );
     b12:	5d 9b       	sbis	0x0b, 5	; 11
     b14:	fe cf       	rjmp	.-4      	; 0xb12 <getData+0x174>
						UDR=dato_u[i];//Imprime U's en la terminal
     b16:	ed 91       	ld	r30, X+
     b18:	ec b9       	out	0x0c, r30	; 12
					{
						wb.byte[i]=dato[3-i];
					}
					
					valor_min=wb.word;
					for (i=0;i<3;i++)
     b1a:	2f 5f       	subi	r18, 0xFF	; 255
     b1c:	3f 4f       	sbci	r19, 0xFF	; 255
     b1e:	23 30       	cpi	r18, 0x03	; 3
     b20:	31 05       	cpc	r19, r1
     b22:	b9 f7       	brne	.-18     	; 0xb12 <getData+0x174>
						while ((UCSRA & (1<<UDRE)) == 0 );
						UDR=dato_u[i];//Imprime U's en la terminal
					}
					
					
					while ((UCSRA & (1<<UDRE)) == 0 );
     b24:	5d 9b       	sbis	0x0b, 5	; 11
     b26:	fe cf       	rjmp	.-4      	; 0xb24 <getData+0x186>
					UDR=frame_type;//Imprime frame_type.
     b28:	f1 e3       	ldi	r31, 0x31	; 49
     b2a:	fc b9       	out	0x0c, r31	; 12
					
					while ((UCSRA & (1<<UDRE)) == 0 );
     b2c:	5d 9b       	sbis	0x0b, 5	; 11
     b2e:	fe cf       	rjmp	.-4      	; 0xb2c <getData+0x18e>
					UDR=0x00;
     b30:	1c b8       	out	0x0c, r1	; 12

					while ((UCSRA & (1<<UDRE)) == 0 );
     b32:	5d 9b       	sbis	0x0b, 5	; 11
     b34:	fe cf       	rjmp	.-4      	; 0xb32 <getData+0x194>
					UDR=dato[4];//Imprime dato en la terminal.
     b36:	28 85       	ldd	r18, Y+8	; 0x08
     b38:	2c b9       	out	0x0c, r18	; 12
     b3a:	5b cf       	rjmp	.-330    	; 0x9f2 <getData+0x54>

					
				}
			}
			
			if (frame_type==0x32 && validar==1) //Configurar minimo rango
     b3c:	32 33       	cpi	r19, 0x32	; 50
     b3e:	09 f0       	breq	.+2      	; 0xb42 <getData+0x1a4>
     b40:	58 cf       	rjmp	.-336    	; 0x9f2 <getData+0x54>
     b42:	21 e0       	ldi	r18, 0x01	; 1
     b44:	72 16       	cp	r7, r18
     b46:	09 f0       	breq	.+2      	; 0xb4a <getData+0x1ac>
     b48:	54 cf       	rjmp	.-344    	; 0x9f2 <getData+0x54>
			{
				if (dato[4]==0xff)
     b4a:	28 85       	ldd	r18, Y+8	; 0x08
     b4c:	2f 3f       	cpi	r18, 0xFF	; 255
     b4e:	09 f0       	breq	.+2      	; 0xb52 <getData+0x1b4>
     b50:	50 cf       	rjmp	.-352    	; 0x9f2 <getData+0x54>
				{
					for (i=0;i<4;i++)
					{
						wb.byte[i]=dato[3-i];
     b52:	2f 81       	ldd	r18, Y+7	; 0x07
     b54:	f7 01       	movw	r30, r14
     b56:	20 83       	st	Z, r18
     b58:	2e 81       	ldd	r18, Y+6	; 0x06
     b5a:	f2 01       	movw	r30, r4
     b5c:	20 83       	st	Z, r18
     b5e:	2d 81       	ldd	r18, Y+5	; 0x05
     b60:	e9 85       	ldd	r30, Y+9	; 0x09
     b62:	fa 85       	ldd	r31, Y+10	; 0x0a
     b64:	20 83       	st	Z, r18
     b66:	2c 81       	ldd	r18, Y+4	; 0x04
     b68:	eb 85       	ldd	r30, Y+11	; 0x0b
     b6a:	fc 85       	ldd	r31, Y+12	; 0x0c
     b6c:	20 83       	st	Z, r18
					}
					
					valor_max=wb.word;
     b6e:	f7 01       	movw	r30, r14
     b70:	80 80       	ld	r8, Z
     b72:	91 80       	ldd	r9, Z+1	; 0x01
     b74:	a2 80       	ldd	r10, Z+2	; 0x02
     b76:	b3 80       	ldd	r11, Z+3	; 0x03
     b78:	80 92 6b 00 	sts	0x006B, r8
     b7c:	90 92 6c 00 	sts	0x006C, r9
     b80:	a0 92 6d 00 	sts	0x006D, r10
     b84:	b0 92 6e 00 	sts	0x006E, r11
					for (i=0;i<3;i++)
     b88:	96 01       	movw	r18, r12
					{
						while ((UCSRA & (1<<UDRE)) == 0 );
     b8a:	5d 9b       	sbis	0x0b, 5	; 11
     b8c:	fe cf       	rjmp	.-4      	; 0xb8a <getData+0x1ec>
						UDR=dato_u[i];//Imprime U's en la terminal
     b8e:	ed 91       	ld	r30, X+
     b90:	ec b9       	out	0x0c, r30	; 12
					{
						wb.byte[i]=dato[3-i];
					}
					
					valor_max=wb.word;
					for (i=0;i<3;i++)
     b92:	2f 5f       	subi	r18, 0xFF	; 255
     b94:	3f 4f       	sbci	r19, 0xFF	; 255
     b96:	23 30       	cpi	r18, 0x03	; 3
     b98:	31 05       	cpc	r19, r1
     b9a:	b9 f7       	brne	.-18     	; 0xb8a <getData+0x1ec>
						while ((UCSRA & (1<<UDRE)) == 0 );
						UDR=dato_u[i];//Imprime U's en la terminal
					}
					
					
					while ((UCSRA & (1<<UDRE)) == 0 );
     b9c:	5d 9b       	sbis	0x0b, 5	; 11
     b9e:	fe cf       	rjmp	.-4      	; 0xb9c <getData+0x1fe>
					UDR=frame_type;//Imprime frame_type.
     ba0:	f2 e3       	ldi	r31, 0x32	; 50
     ba2:	fc b9       	out	0x0c, r31	; 12

					while ((UCSRA & (1<<UDRE)) == 0 );
     ba4:	5d 9b       	sbis	0x0b, 5	; 11
     ba6:	fe cf       	rjmp	.-4      	; 0xba4 <getData+0x206>
					UDR=0x00;
     ba8:	1c b8       	out	0x0c, r1	; 12
					
					while ((UCSRA & (1<<UDRE)) == 0 );
     baa:	5d 9b       	sbis	0x0b, 5	; 11
     bac:	fe cf       	rjmp	.-4      	; 0xbaa <getData+0x20c>
					UDR=dato[4];//Imprime dato en la terminal.
     bae:	28 85       	ldd	r18, Y+8	; 0x08
     bb0:	2c b9       	out	0x0c, r18	; 12
     bb2:	1f cf       	rjmp	.-450    	; 0x9f2 <getData+0x54>

00000bb4 <controlMotor>:




void controlMotor(void) //Tarea para activar componentes de los sensores no activos
{
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62
     bbc:	ac 97       	sbiw	r28, 0x2c	; 44
     bbe:	0f b6       	in	r0, 0x3f	; 63
     bc0:	f8 94       	cli
     bc2:	de bf       	out	0x3e, r29	; 62
     bc4:	0f be       	out	0x3f, r0	; 63
     bc6:	cd bf       	out	0x3d, r28	; 61
	int k=0,a=0;
     bc8:	cc 24       	eor	r12, r12
     bca:	dd 24       	eor	r13, r13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bcc:	44 24       	eor	r4, r4
     bce:	55 24       	eor	r5, r5
	//sprintf(buf1,"dura: %4.4f",duration);
	//lcd_puts(buf1);
	//_delay_ms(10);
	k++;
	if (k>=10)
	{prom_10datos(&distancep, distance2);
     bd0:	0f 2e       	mov	r0, r31
     bd2:	f9 e2       	ldi	r31, 0x29	; 41
     bd4:	6f 2e       	mov	r6, r31
     bd6:	77 24       	eor	r7, r7
     bd8:	f0 2d       	mov	r31, r0
     bda:	6c 0e       	add	r6, r28
     bdc:	7d 1e       	adc	r7, r29
		}
		k=0;
		for (int i; i<10; i++)
		{distance2[i]=0;
		}
		distancep=0;
     bde:	0f 2e       	mov	r0, r31
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	8f 2e       	mov	r8, r31
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	9f 2e       	mov	r9, r31
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	af 2e       	mov	r10, r31
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	bf 2e       	mov	r11, r31
     bf0:	f0 2d       	mov	r31, r0
	float duration=0;
	float distance=0;
	float distance2[10];
	float distancep;
	
	while(1){PORTB |= 1 << PINB1;//ping the sonic
     bf2:	c1 9a       	sbi	0x18, 1	; 24
     bf4:	20 e4       	ldi	r18, 0x40	; 64
     bf6:	2a 95       	dec	r18
     bf8:	f1 f7       	brne	.-4      	; 0xbf6 <controlMotor+0x42>
	_delay_us(12);      //wave every
	PORTB &= ~(1 << PINB1);// 10 us
     bfa:	c1 98       	cbi	0x18, 1	; 24
     bfc:	8f ec       	ldi	r24, 0xCF	; 207
     bfe:	97 e0       	ldi	r25, 0x07	; 7
     c00:	01 97       	sbiw	r24, 0x01	; 1
     c02:	f1 f7       	brne	.-4      	; 0xc00 <controlMotor+0x4c>
     c04:	00 c0       	rjmp	.+0      	; 0xc06 <controlMotor+0x52>
     c06:	00 00       	nop
     c08:	92 01       	movw	r18, r4
     c0a:	08 c0       	rjmp	.+16     	; 0xc1c <controlMotor+0x68>
	_delay_us(500);
	while ((PINA)&&(1<<PA0))
	{TCCR0 |= (1 << CS01);
     c0c:	83 b7       	in	r24, 0x33	; 51
     c0e:	82 60       	ori	r24, 0x02	; 2
     c10:	83 bf       	out	0x33, r24	; 51
		if (TCNT0>=255)
     c12:	82 b7       	in	r24, 0x32	; 50
     c14:	8f 3f       	cpi	r24, 0xFF	; 255
     c16:	11 f4       	brne	.+4      	; 0xc1c <controlMotor+0x68>
		{
			a++;
     c18:	2f 5f       	subi	r18, 0xFF	; 255
     c1a:	3f 4f       	sbci	r19, 0xFF	; 255
	
	while(1){PORTB |= 1 << PINB1;//ping the sonic
	_delay_us(12);      //wave every
	PORTB &= ~(1 << PINB1);// 10 us
	_delay_us(500);
	while ((PINA)&&(1<<PA0))
     c1c:	89 b3       	in	r24, 0x19	; 25
     c1e:	88 23       	and	r24, r24
     c20:	a9 f7       	brne	.-22     	; 0xc0c <controlMotor+0x58>
		{
			a++;
		}
		
	}
	duration=TCNT0+255*a;
     c22:	42 b7       	in	r20, 0x32	; 50
	a=0;
	TCCR0 = 0x00;//stop timer
     c24:	13 be       	out	0x33, r1	; 51
	
	TCNT0=0;
     c26:	12 be       	out	0x32, r1	; 50
		{
			a++;
		}
		
	}
	duration=TCNT0+255*a;
     c28:	92 2f       	mov	r25, r18
     c2a:	88 27       	eor	r24, r24
     c2c:	82 1b       	sub	r24, r18
     c2e:	93 0b       	sbc	r25, r19
     c30:	84 0f       	add	r24, r20
     c32:	91 1d       	adc	r25, r1
     c34:	9c 01       	movw	r18, r24
     c36:	b9 01       	movw	r22, r18
     c38:	88 27       	eor	r24, r24
     c3a:	77 fd       	sbrc	r23, 7
     c3c:	80 95       	com	r24
     c3e:	98 2f       	mov	r25, r24
     c40:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <__floatsisf>
	a=0;
	TCCR0 = 0x00;//stop timer
	
	TCNT0=0;
	
	distance=(duration*7.0)/314;
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	40 ee       	ldi	r20, 0xE0	; 224
     c4a:	50 e4       	ldi	r21, 0x40	; 64
     c4c:	0e 94 1f 13 	call	0x263e	; 0x263e <__mulsf3>
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	4d e9       	ldi	r20, 0x9D	; 157
     c56:	53 e4       	ldi	r21, 0x43	; 67
     c58:	0e 94 01 12 	call	0x2402	; 0x2402 <__divsf3>
     c5c:	16 2f       	mov	r17, r22
     c5e:	07 2f       	mov	r16, r23
     c60:	f8 2e       	mov	r15, r24
     c62:	e9 2e       	mov	r14, r25
	
	if (distance>400.0)
     c64:	86 2f       	mov	r24, r22
     c66:	90 2f       	mov	r25, r16
     c68:	af 2d       	mov	r26, r15
     c6a:	be 2d       	mov	r27, r14
     c6c:	bc 01       	movw	r22, r24
     c6e:	cd 01       	movw	r24, r26
     c70:	20 e0       	ldi	r18, 0x00	; 0
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	48 ec       	ldi	r20, 0xC8	; 200
     c76:	53 e4       	ldi	r21, 0x43	; 67
     c78:	0e 94 1b 13 	call	0x2636	; 0x2636 <__gesf2>
     c7c:	18 16       	cp	r1, r24
     c7e:	a4 f4       	brge	.+40     	; 0xca8 <controlMotor+0xf4>
	{distance2[k]=400.0;
     c80:	f6 01       	movw	r30, r12
     c82:	ee 0f       	add	r30, r30
     c84:	ff 1f       	adc	r31, r31
     c86:	ee 0f       	add	r30, r30
     c88:	ff 1f       	adc	r31, r31
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	8c 0f       	add	r24, r28
     c90:	9d 1f       	adc	r25, r29
     c92:	e8 0f       	add	r30, r24
     c94:	f9 1f       	adc	r31, r25
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	a8 ec       	ldi	r26, 0xC8	; 200
     c9c:	b3 e4       	ldi	r27, 0x43	; 67
     c9e:	80 83       	st	Z, r24
     ca0:	91 83       	std	Z+1, r25	; 0x01
     ca2:	a2 83       	std	Z+2, r26	; 0x02
     ca4:	b3 83       	std	Z+3, r27	; 0x03
     ca6:	13 c0       	rjmp	.+38     	; 0xcce <controlMotor+0x11a>
	}
	else{
		distance2[k]=distance;
     ca8:	c6 01       	movw	r24, r12
     caa:	88 0f       	add	r24, r24
     cac:	99 1f       	adc	r25, r25
     cae:	88 0f       	add	r24, r24
     cb0:	99 1f       	adc	r25, r25
     cb2:	e1 e0       	ldi	r30, 0x01	; 1
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	ec 0f       	add	r30, r28
     cb8:	fd 1f       	adc	r31, r29
     cba:	e8 0f       	add	r30, r24
     cbc:	f9 1f       	adc	r31, r25
     cbe:	81 2f       	mov	r24, r17
     cc0:	90 2f       	mov	r25, r16
     cc2:	af 2d       	mov	r26, r15
     cc4:	be 2d       	mov	r27, r14
     cc6:	80 83       	st	Z, r24
     cc8:	91 83       	std	Z+1, r25	; 0x01
     cca:	a2 83       	std	Z+2, r26	; 0x02
     ccc:	b3 83       	std	Z+3, r27	; 0x03
	//lcd_puts(buf);
	//lcd_gotoxy(0,1);
	//sprintf(buf1,"dura: %4.4f",duration);
	//lcd_puts(buf1);
	//_delay_ms(10);
	k++;
     cce:	08 94       	sec
     cd0:	c1 1c       	adc	r12, r1
     cd2:	d1 1c       	adc	r13, r1
	if (k>=10)
     cd4:	9a e0       	ldi	r25, 0x0A	; 10
     cd6:	c9 16       	cp	r12, r25
     cd8:	d1 04       	cpc	r13, r1
     cda:	0c f4       	brge	.+2      	; 0xcde <controlMotor+0x12a>
     cdc:	5f c0       	rjmp	.+190    	; 0xd9c <controlMotor+0x1e8>
	{prom_10datos(&distancep, distance2);
     cde:	c3 01       	movw	r24, r6
     ce0:	be 01       	movw	r22, r28
     ce2:	6f 5f       	subi	r22, 0xFF	; 255
     ce4:	7f 4f       	sbci	r23, 0xFF	; 255
     ce6:	0e 94 5f 00 	call	0xbe	; 0xbe <prom_10datos>
		if (distancep>=valor_min*100&&distancep<=valor_max*100)
     cea:	c9 a4       	lds	r28, 0xa9
     cec:	da a4       	lds	r29, 0xaa
     cee:	eb a4       	lds	r30, 0xab
     cf0:	fc a4       	lds	r31, 0xac
     cf2:	60 91 6f 00 	lds	r22, 0x006F
     cf6:	70 91 70 00 	lds	r23, 0x0070
     cfa:	80 91 71 00 	lds	r24, 0x0071
     cfe:	90 91 72 00 	lds	r25, 0x0072
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	48 ec       	ldi	r20, 0xC8	; 200
     d08:	52 e4       	ldi	r21, 0x42	; 66
     d0a:	0e 94 1f 13 	call	0x263e	; 0x263e <__mulsf3>
     d0e:	a7 01       	movw	r20, r14
     d10:	96 01       	movw	r18, r12
     d12:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__cmpsf2>
     d16:	18 16       	cp	r1, r24
     d18:	e4 f0       	brlt	.+56     	; 0xd52 <controlMotor+0x19e>
     d1a:	60 91 6b 00 	lds	r22, 0x006B
     d1e:	70 91 6c 00 	lds	r23, 0x006C
     d22:	80 91 6d 00 	lds	r24, 0x006D
     d26:	90 91 6e 00 	lds	r25, 0x006E
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	48 ec       	ldi	r20, 0xC8	; 200
     d30:	52 e4       	ldi	r21, 0x42	; 66
     d32:	0e 94 1f 13 	call	0x263e	; 0x263e <__mulsf3>
     d36:	9b 01       	movw	r18, r22
     d38:	ac 01       	movw	r20, r24
     d3a:	c7 01       	movw	r24, r14
     d3c:	b6 01       	movw	r22, r12
     d3e:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__cmpsf2>
     d42:	18 16       	cp	r1, r24
     d44:	34 f0       	brlt	.+12     	; 0xd52 <controlMotor+0x19e>
		{   PORTC=0x00;
     d46:	15 ba       	out	0x15, r1	; 21
			PORTC=0x01;
     d48:	21 e0       	ldi	r18, 0x01	; 1
     d4a:	25 bb       	out	0x15, r18	; 21
			state=1;
     d4c:	20 93 fb 06 	sts	0x06FB, r18
     d50:	05 c0       	rjmp	.+10     	; 0xd5c <controlMotor+0x1a8>
		}
		else{
			PORTC=0x00;
     d52:	15 ba       	out	0x15, r1	; 21
			PORTC=0x02;
     d54:	32 e0       	ldi	r19, 0x02	; 2
     d56:	35 bb       	out	0x15, r19	; 21
			state=0;
     d58:	10 92 fb 06 	sts	0x06FB, r1
		}
		k=0;
		for (int i; i<10; i++)
     d5c:	8a e0       	ldi	r24, 0x0A	; 10
     d5e:	28 16       	cp	r2, r24
     d60:	31 04       	cpc	r3, r1
     d62:	bc f4       	brge	.+46     	; 0xd92 <controlMotor+0x1de>
}




void controlMotor(void) //Tarea para activar componentes de los sensores no activos
     d64:	f1 01       	movw	r30, r2
     d66:	ee 0f       	add	r30, r30
     d68:	ff 1f       	adc	r31, r31
     d6a:	ee 0f       	add	r30, r30
     d6c:	ff 1f       	adc	r31, r31
     d6e:	21 e0       	ldi	r18, 0x01	; 1
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	2c 0f       	add	r18, r28
     d74:	3d 1f       	adc	r19, r29
     d76:	e2 0f       	add	r30, r18
     d78:	f3 1f       	adc	r31, r19
			PORTC=0x02;
			state=0;
		}
		k=0;
		for (int i; i<10; i++)
		{distance2[i]=0;
     d7a:	81 92       	st	Z+, r8
     d7c:	91 92       	st	Z+, r9
     d7e:	a1 92       	st	Z+, r10
     d80:	b1 92       	st	Z+, r11
			PORTC=0x00;
			PORTC=0x02;
			state=0;
		}
		k=0;
		for (int i; i<10; i++)
     d82:	e6 15       	cp	r30, r6
     d84:	f7 05       	cpc	r31, r7
     d86:	c9 f7       	brne	.-14     	; 0xd7a <controlMotor+0x1c6>
}




void controlMotor(void) //Tarea para activar componentes de los sensores no activos
     d88:	0f 2e       	mov	r0, r31
     d8a:	fa e0       	ldi	r31, 0x0A	; 10
     d8c:	2f 2e       	mov	r2, r31
     d8e:	33 24       	eor	r3, r3
     d90:	f0 2d       	mov	r31, r0
		}
		k=0;
		for (int i; i<10; i++)
		{distance2[i]=0;
		}
		distancep=0;
     d92:	89 a6       	lds	r24, 0xb9
     d94:	9a a6       	lds	r25, 0xba
     d96:	ab a6       	lds	r26, 0xbb
     d98:	bc a6       	lds	r27, 0xbc
		else{
			PORTC=0x00;
			PORTC=0x02;
			state=0;
		}
		k=0;
     d9a:	62 01       	movw	r12, r4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d9c:	8f e7       	ldi	r24, 0x7F	; 127
     d9e:	9e e3       	ldi	r25, 0x3E	; 62
     da0:	01 97       	sbiw	r24, 0x01	; 1
     da2:	f1 f7       	brne	.-4      	; 0xda0 <controlMotor+0x1ec>
     da4:	00 c0       	rjmp	.+0      	; 0xda6 <controlMotor+0x1f2>
     da6:	00 00       	nop
     da8:	24 cf       	rjmp	.-440    	; 0xbf2 <controlMotor+0x3e>

00000daa <usart_init>:
	// Communication Parameters: 8 Data, 1 Stop, No Parity
	// USART Receiver: On
	// USART Transmitter: On
	// USART Mode: Asynchronous
	// USART Baud Rate: 9600
	UCSRA=0x00;
     daa:	1b b8       	out	0x0b, r1	; 11
	UCSRB=0x18;
     dac:	88 e1       	ldi	r24, 0x18	; 24
     dae:	8a b9       	out	0x0a, r24	; 10
	UCSRC=0x86;
     db0:	86 e8       	ldi	r24, 0x86	; 134
     db2:	80 bd       	out	0x20, r24	; 32
	UBRRH=0x00;
     db4:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x67;
     db6:	87 e6       	ldi	r24, 0x67	; 103
     db8:	89 b9       	out	0x09, r24	; 9

}
     dba:	08 95       	ret

00000dbc <main>:




int main(void)
{
     dbc:	af 92       	push	r10
     dbe:	bf 92       	push	r11
     dc0:	cf 92       	push	r12
     dc2:	df 92       	push	r13
     dc4:	ef 92       	push	r14
     dc6:	ff 92       	push	r15
     dc8:	0f 93       	push	r16
	//inicializacion de puertos
	
	
	DDRA=0x02;
     dca:	82 e0       	ldi	r24, 0x02	; 2
     dcc:	8a bb       	out	0x1a, r24	; 26
	DDRB=0xff;
     dce:	8f ef       	ldi	r24, 0xFF	; 255
     dd0:	87 bb       	out	0x17, r24	; 23
	DDRC=0xff;
     dd2:	84 bb       	out	0x14, r24	; 20
	usart_init();
     dd4:	0e 94 d5 06 	call	0xdaa	; 0xdaa <usart_init>
	
	
	//Inicializacion de las tareas
	xTaskCreate( controlMotor, (signed portCHAR *)"motor", configMINIMAL_STACK_SIZE,
     dd8:	8a ed       	ldi	r24, 0xDA	; 218
     dda:	95 e0       	ldi	r25, 0x05	; 5
     ddc:	60 e6       	ldi	r22, 0x60	; 96
     dde:	70 e0       	ldi	r23, 0x00	; 0
     de0:	4a e5       	ldi	r20, 0x5A	; 90
     de2:	50 e0       	ldi	r21, 0x00	; 0
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	00 e0       	ldi	r16, 0x00	; 0
     dea:	ee 24       	eor	r14, r14
     dec:	ff 24       	eor	r15, r15
     dee:	cc 24       	eor	r12, r12
     df0:	dd 24       	eor	r13, r13
     df2:	aa 24       	eor	r10, r10
     df4:	bb 24       	eor	r11, r11
     df6:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <xTaskGenericCreate>
	NULL, tskIDLE_PRIORITY, ( xTaskHandle * ) NULL ); 
	
	xTaskCreate( getData, (signed portCHAR *)"data", configMINIMAL_STACK_SIZE,
     dfa:	8f ec       	ldi	r24, 0xCF	; 207
     dfc:	94 e0       	ldi	r25, 0x04	; 4
     dfe:	66 e6       	ldi	r22, 0x66	; 102
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	4a e5       	ldi	r20, 0x5A	; 90
     e04:	50 e0       	ldi	r21, 0x00	; 0
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <xTaskGenericCreate>
	NULL, tskIDLE_PRIORITY, ( xTaskHandle * ) NULL ); 
		
	vTaskStartScheduler(); 
     e0e:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <vTaskStartScheduler>

	return 0;
}
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	0f 91       	pop	r16
     e18:	ff 90       	pop	r15
     e1a:	ef 90       	pop	r14
     e1c:	df 90       	pop	r13
     e1e:	cf 90       	pop	r12
     e20:	bf 90       	pop	r11
     e22:	af 90       	pop	r10
     e24:	08 95       	ret

00000e26 <pxPortInitialiseStack>:
     e26:	21 e1       	ldi	r18, 0x11	; 17
     e28:	fc 01       	movw	r30, r24
     e2a:	20 83       	st	Z, r18
     e2c:	31 97       	sbiw	r30, 0x01	; 1
     e2e:	32 e2       	ldi	r19, 0x22	; 34
     e30:	30 83       	st	Z, r19
     e32:	fc 01       	movw	r30, r24
     e34:	32 97       	sbiw	r30, 0x02	; 2
     e36:	a3 e3       	ldi	r26, 0x33	; 51
     e38:	a0 83       	st	Z, r26
     e3a:	fc 01       	movw	r30, r24
     e3c:	33 97       	sbiw	r30, 0x03	; 3
     e3e:	60 83       	st	Z, r22
     e40:	fc 01       	movw	r30, r24
     e42:	34 97       	sbiw	r30, 0x04	; 4
     e44:	70 83       	st	Z, r23
     e46:	fc 01       	movw	r30, r24
     e48:	35 97       	sbiw	r30, 0x05	; 5
     e4a:	10 82       	st	Z, r1
     e4c:	fc 01       	movw	r30, r24
     e4e:	36 97       	sbiw	r30, 0x06	; 6
     e50:	60 e8       	ldi	r22, 0x80	; 128
     e52:	60 83       	st	Z, r22
     e54:	fc 01       	movw	r30, r24
     e56:	37 97       	sbiw	r30, 0x07	; 7
     e58:	10 82       	st	Z, r1
     e5a:	fc 01       	movw	r30, r24
     e5c:	38 97       	sbiw	r30, 0x08	; 8
     e5e:	62 e0       	ldi	r22, 0x02	; 2
     e60:	60 83       	st	Z, r22
     e62:	fc 01       	movw	r30, r24
     e64:	39 97       	sbiw	r30, 0x09	; 9
     e66:	63 e0       	ldi	r22, 0x03	; 3
     e68:	60 83       	st	Z, r22
     e6a:	fc 01       	movw	r30, r24
     e6c:	3a 97       	sbiw	r30, 0x0a	; 10
     e6e:	64 e0       	ldi	r22, 0x04	; 4
     e70:	60 83       	st	Z, r22
     e72:	fc 01       	movw	r30, r24
     e74:	3b 97       	sbiw	r30, 0x0b	; 11
     e76:	65 e0       	ldi	r22, 0x05	; 5
     e78:	60 83       	st	Z, r22
     e7a:	fc 01       	movw	r30, r24
     e7c:	3c 97       	sbiw	r30, 0x0c	; 12
     e7e:	66 e0       	ldi	r22, 0x06	; 6
     e80:	60 83       	st	Z, r22
     e82:	fc 01       	movw	r30, r24
     e84:	3d 97       	sbiw	r30, 0x0d	; 13
     e86:	67 e0       	ldi	r22, 0x07	; 7
     e88:	60 83       	st	Z, r22
     e8a:	fc 01       	movw	r30, r24
     e8c:	3e 97       	sbiw	r30, 0x0e	; 14
     e8e:	68 e0       	ldi	r22, 0x08	; 8
     e90:	60 83       	st	Z, r22
     e92:	fc 01       	movw	r30, r24
     e94:	3f 97       	sbiw	r30, 0x0f	; 15
     e96:	69 e0       	ldi	r22, 0x09	; 9
     e98:	60 83       	st	Z, r22
     e9a:	fc 01       	movw	r30, r24
     e9c:	70 97       	sbiw	r30, 0x10	; 16
     e9e:	60 e1       	ldi	r22, 0x10	; 16
     ea0:	60 83       	st	Z, r22
     ea2:	fc 01       	movw	r30, r24
     ea4:	71 97       	sbiw	r30, 0x11	; 17
     ea6:	20 83       	st	Z, r18
     ea8:	fc 01       	movw	r30, r24
     eaa:	72 97       	sbiw	r30, 0x12	; 18
     eac:	22 e1       	ldi	r18, 0x12	; 18
     eae:	20 83       	st	Z, r18
     eb0:	fc 01       	movw	r30, r24
     eb2:	73 97       	sbiw	r30, 0x13	; 19
     eb4:	23 e1       	ldi	r18, 0x13	; 19
     eb6:	20 83       	st	Z, r18
     eb8:	fc 01       	movw	r30, r24
     eba:	74 97       	sbiw	r30, 0x14	; 20
     ebc:	24 e1       	ldi	r18, 0x14	; 20
     ebe:	20 83       	st	Z, r18
     ec0:	fc 01       	movw	r30, r24
     ec2:	75 97       	sbiw	r30, 0x15	; 21
     ec4:	25 e1       	ldi	r18, 0x15	; 21
     ec6:	20 83       	st	Z, r18
     ec8:	fc 01       	movw	r30, r24
     eca:	76 97       	sbiw	r30, 0x16	; 22
     ecc:	26 e1       	ldi	r18, 0x16	; 22
     ece:	20 83       	st	Z, r18
     ed0:	fc 01       	movw	r30, r24
     ed2:	77 97       	sbiw	r30, 0x17	; 23
     ed4:	27 e1       	ldi	r18, 0x17	; 23
     ed6:	20 83       	st	Z, r18
     ed8:	fc 01       	movw	r30, r24
     eda:	78 97       	sbiw	r30, 0x18	; 24
     edc:	28 e1       	ldi	r18, 0x18	; 24
     ede:	20 83       	st	Z, r18
     ee0:	fc 01       	movw	r30, r24
     ee2:	79 97       	sbiw	r30, 0x19	; 25
     ee4:	29 e1       	ldi	r18, 0x19	; 25
     ee6:	20 83       	st	Z, r18
     ee8:	fc 01       	movw	r30, r24
     eea:	7a 97       	sbiw	r30, 0x1a	; 26
     eec:	20 e2       	ldi	r18, 0x20	; 32
     eee:	20 83       	st	Z, r18
     ef0:	fc 01       	movw	r30, r24
     ef2:	7b 97       	sbiw	r30, 0x1b	; 27
     ef4:	21 e2       	ldi	r18, 0x21	; 33
     ef6:	20 83       	st	Z, r18
     ef8:	fc 01       	movw	r30, r24
     efa:	7c 97       	sbiw	r30, 0x1c	; 28
     efc:	30 83       	st	Z, r19
     efe:	fc 01       	movw	r30, r24
     f00:	7d 97       	sbiw	r30, 0x1d	; 29
     f02:	23 e2       	ldi	r18, 0x23	; 35
     f04:	20 83       	st	Z, r18
     f06:	fc 01       	movw	r30, r24
     f08:	7e 97       	sbiw	r30, 0x1e	; 30
     f0a:	40 83       	st	Z, r20
     f0c:	fc 01       	movw	r30, r24
     f0e:	7f 97       	sbiw	r30, 0x1f	; 31
     f10:	50 83       	st	Z, r21
     f12:	fc 01       	movw	r30, r24
     f14:	b0 97       	sbiw	r30, 0x20	; 32
     f16:	26 e2       	ldi	r18, 0x26	; 38
     f18:	20 83       	st	Z, r18
     f1a:	fc 01       	movw	r30, r24
     f1c:	b1 97       	sbiw	r30, 0x21	; 33
     f1e:	27 e2       	ldi	r18, 0x27	; 39
     f20:	20 83       	st	Z, r18
     f22:	fc 01       	movw	r30, r24
     f24:	b2 97       	sbiw	r30, 0x22	; 34
     f26:	28 e2       	ldi	r18, 0x28	; 40
     f28:	20 83       	st	Z, r18
     f2a:	fc 01       	movw	r30, r24
     f2c:	b3 97       	sbiw	r30, 0x23	; 35
     f2e:	29 e2       	ldi	r18, 0x29	; 41
     f30:	20 83       	st	Z, r18
     f32:	fc 01       	movw	r30, r24
     f34:	b4 97       	sbiw	r30, 0x24	; 36
     f36:	20 e3       	ldi	r18, 0x30	; 48
     f38:	20 83       	st	Z, r18
     f3a:	fc 01       	movw	r30, r24
     f3c:	b5 97       	sbiw	r30, 0x25	; 37
     f3e:	21 e3       	ldi	r18, 0x31	; 49
     f40:	20 83       	st	Z, r18
     f42:	86 97       	sbiw	r24, 0x26	; 38
     f44:	08 95       	ret

00000f46 <xPortStartScheduler>:
     f46:	1b bc       	out	0x2b, r1	; 43
     f48:	89 ef       	ldi	r24, 0xF9	; 249
     f4a:	8a bd       	out	0x2a, r24	; 42
     f4c:	8b e0       	ldi	r24, 0x0B	; 11
     f4e:	8e bd       	out	0x2e, r24	; 46
     f50:	89 b7       	in	r24, 0x39	; 57
     f52:	80 61       	ori	r24, 0x10	; 16
     f54:	89 bf       	out	0x39, r24	; 57
     f56:	a0 91 94 06 	lds	r26, 0x0694
     f5a:	b0 91 95 06 	lds	r27, 0x0695
     f5e:	cd 91       	ld	r28, X+
     f60:	cd bf       	out	0x3d, r28	; 61
     f62:	dd 91       	ld	r29, X+
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	ff 91       	pop	r31
     f68:	ef 91       	pop	r30
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	bf 91       	pop	r27
     f70:	af 91       	pop	r26
     f72:	9f 91       	pop	r25
     f74:	8f 91       	pop	r24
     f76:	7f 91       	pop	r23
     f78:	6f 91       	pop	r22
     f7a:	5f 91       	pop	r21
     f7c:	4f 91       	pop	r20
     f7e:	3f 91       	pop	r19
     f80:	2f 91       	pop	r18
     f82:	1f 91       	pop	r17
     f84:	0f 91       	pop	r16
     f86:	ff 90       	pop	r15
     f88:	ef 90       	pop	r14
     f8a:	df 90       	pop	r13
     f8c:	cf 90       	pop	r12
     f8e:	bf 90       	pop	r11
     f90:	af 90       	pop	r10
     f92:	9f 90       	pop	r9
     f94:	8f 90       	pop	r8
     f96:	7f 90       	pop	r7
     f98:	6f 90       	pop	r6
     f9a:	5f 90       	pop	r5
     f9c:	4f 90       	pop	r4
     f9e:	3f 90       	pop	r3
     fa0:	2f 90       	pop	r2
     fa2:	1f 90       	pop	r1
     fa4:	0f 90       	pop	r0
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	0f 90       	pop	r0
     faa:	08 95       	ret
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	08 95       	ret

00000fb0 <vPortEndScheduler>:
     fb0:	08 95       	ret

00000fb2 <vPortYield>:
     fb2:	0f 92       	push	r0
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	f8 94       	cli
     fb8:	0f 92       	push	r0
     fba:	1f 92       	push	r1
     fbc:	11 24       	eor	r1, r1
     fbe:	2f 92       	push	r2
     fc0:	3f 92       	push	r3
     fc2:	4f 92       	push	r4
     fc4:	5f 92       	push	r5
     fc6:	6f 92       	push	r6
     fc8:	7f 92       	push	r7
     fca:	8f 92       	push	r8
     fcc:	9f 92       	push	r9
     fce:	af 92       	push	r10
     fd0:	bf 92       	push	r11
     fd2:	cf 92       	push	r12
     fd4:	df 92       	push	r13
     fd6:	ef 92       	push	r14
     fd8:	ff 92       	push	r15
     fda:	0f 93       	push	r16
     fdc:	1f 93       	push	r17
     fde:	2f 93       	push	r18
     fe0:	3f 93       	push	r19
     fe2:	4f 93       	push	r20
     fe4:	5f 93       	push	r21
     fe6:	6f 93       	push	r22
     fe8:	7f 93       	push	r23
     fea:	8f 93       	push	r24
     fec:	9f 93       	push	r25
     fee:	af 93       	push	r26
     ff0:	bf 93       	push	r27
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	ef 93       	push	r30
     ff8:	ff 93       	push	r31
     ffa:	a0 91 94 06 	lds	r26, 0x0694
     ffe:	b0 91 95 06 	lds	r27, 0x0695
    1002:	0d b6       	in	r0, 0x3d	; 61
    1004:	0d 92       	st	X+, r0
    1006:	0e b6       	in	r0, 0x3e	; 62
    1008:	0d 92       	st	X+, r0
    100a:	0e 94 2a 10 	call	0x2054	; 0x2054 <vTaskSwitchContext>
    100e:	a0 91 94 06 	lds	r26, 0x0694
    1012:	b0 91 95 06 	lds	r27, 0x0695
    1016:	cd 91       	ld	r28, X+
    1018:	cd bf       	out	0x3d, r28	; 61
    101a:	dd 91       	ld	r29, X+
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	ff 91       	pop	r31
    1020:	ef 91       	pop	r30
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	bf 91       	pop	r27
    1028:	af 91       	pop	r26
    102a:	9f 91       	pop	r25
    102c:	8f 91       	pop	r24
    102e:	7f 91       	pop	r23
    1030:	6f 91       	pop	r22
    1032:	5f 91       	pop	r21
    1034:	4f 91       	pop	r20
    1036:	3f 91       	pop	r19
    1038:	2f 91       	pop	r18
    103a:	1f 91       	pop	r17
    103c:	0f 91       	pop	r16
    103e:	ff 90       	pop	r15
    1040:	ef 90       	pop	r14
    1042:	df 90       	pop	r13
    1044:	cf 90       	pop	r12
    1046:	bf 90       	pop	r11
    1048:	af 90       	pop	r10
    104a:	9f 90       	pop	r9
    104c:	8f 90       	pop	r8
    104e:	7f 90       	pop	r7
    1050:	6f 90       	pop	r6
    1052:	5f 90       	pop	r5
    1054:	4f 90       	pop	r4
    1056:	3f 90       	pop	r3
    1058:	2f 90       	pop	r2
    105a:	1f 90       	pop	r1
    105c:	0f 90       	pop	r0
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	0f 90       	pop	r0
    1062:	08 95       	ret

00001064 <vPortYieldFromTick>:
    1064:	0f 92       	push	r0
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	f8 94       	cli
    106a:	0f 92       	push	r0
    106c:	1f 92       	push	r1
    106e:	11 24       	eor	r1, r1
    1070:	2f 92       	push	r2
    1072:	3f 92       	push	r3
    1074:	4f 92       	push	r4
    1076:	5f 92       	push	r5
    1078:	6f 92       	push	r6
    107a:	7f 92       	push	r7
    107c:	8f 92       	push	r8
    107e:	9f 92       	push	r9
    1080:	af 92       	push	r10
    1082:	bf 92       	push	r11
    1084:	cf 92       	push	r12
    1086:	df 92       	push	r13
    1088:	ef 92       	push	r14
    108a:	ff 92       	push	r15
    108c:	0f 93       	push	r16
    108e:	1f 93       	push	r17
    1090:	2f 93       	push	r18
    1092:	3f 93       	push	r19
    1094:	4f 93       	push	r20
    1096:	5f 93       	push	r21
    1098:	6f 93       	push	r22
    109a:	7f 93       	push	r23
    109c:	8f 93       	push	r24
    109e:	9f 93       	push	r25
    10a0:	af 93       	push	r26
    10a2:	bf 93       	push	r27
    10a4:	cf 93       	push	r28
    10a6:	df 93       	push	r29
    10a8:	ef 93       	push	r30
    10aa:	ff 93       	push	r31
    10ac:	a0 91 94 06 	lds	r26, 0x0694
    10b0:	b0 91 95 06 	lds	r27, 0x0695
    10b4:	0d b6       	in	r0, 0x3d	; 61
    10b6:	0d 92       	st	X+, r0
    10b8:	0e b6       	in	r0, 0x3e	; 62
    10ba:	0d 92       	st	X+, r0
    10bc:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <vTaskIncrementTick>
    10c0:	0e 94 2a 10 	call	0x2054	; 0x2054 <vTaskSwitchContext>
    10c4:	a0 91 94 06 	lds	r26, 0x0694
    10c8:	b0 91 95 06 	lds	r27, 0x0695
    10cc:	cd 91       	ld	r28, X+
    10ce:	cd bf       	out	0x3d, r28	; 61
    10d0:	dd 91       	ld	r29, X+
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	ff 91       	pop	r31
    10d6:	ef 91       	pop	r30
    10d8:	df 91       	pop	r29
    10da:	cf 91       	pop	r28
    10dc:	bf 91       	pop	r27
    10de:	af 91       	pop	r26
    10e0:	9f 91       	pop	r25
    10e2:	8f 91       	pop	r24
    10e4:	7f 91       	pop	r23
    10e6:	6f 91       	pop	r22
    10e8:	5f 91       	pop	r21
    10ea:	4f 91       	pop	r20
    10ec:	3f 91       	pop	r19
    10ee:	2f 91       	pop	r18
    10f0:	1f 91       	pop	r17
    10f2:	0f 91       	pop	r16
    10f4:	ff 90       	pop	r15
    10f6:	ef 90       	pop	r14
    10f8:	df 90       	pop	r13
    10fa:	cf 90       	pop	r12
    10fc:	bf 90       	pop	r11
    10fe:	af 90       	pop	r10
    1100:	9f 90       	pop	r9
    1102:	8f 90       	pop	r8
    1104:	7f 90       	pop	r7
    1106:	6f 90       	pop	r6
    1108:	5f 90       	pop	r5
    110a:	4f 90       	pop	r4
    110c:	3f 90       	pop	r3
    110e:	2f 90       	pop	r2
    1110:	1f 90       	pop	r1
    1112:	0f 90       	pop	r0
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	0f 90       	pop	r0
    1118:	08 95       	ret

0000111a <__vector_7>:
    111a:	0e 94 32 08 	call	0x1064	; 0x1064 <vPortYieldFromTick>
    111e:	18 95       	reti

00001120 <prvCopyDataFromQueue>:
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	dc 01       	movw	r26, r24
    1126:	cd 91       	ld	r28, X+
    1128:	dc 91       	ld	r29, X
    112a:	11 97       	sbiw	r26, 0x01	; 1
    112c:	20 97       	sbiw	r28, 0x00	; 0
    112e:	21 f1       	breq	.+72     	; 0x1178 <prvCopyDataFromQueue+0x58>
    1130:	5c 96       	adiw	r26, 0x1c	; 28
    1132:	4c 91       	ld	r20, X
    1134:	5c 97       	sbiw	r26, 0x1c	; 28
    1136:	16 96       	adiw	r26, 0x06	; 6
    1138:	2d 91       	ld	r18, X+
    113a:	3c 91       	ld	r19, X
    113c:	17 97       	sbiw	r26, 0x07	; 7
    113e:	24 0f       	add	r18, r20
    1140:	31 1d       	adc	r19, r1
    1142:	17 96       	adiw	r26, 0x07	; 7
    1144:	3c 93       	st	X, r19
    1146:	2e 93       	st	-X, r18
    1148:	16 97       	sbiw	r26, 0x06	; 6
    114a:	12 96       	adiw	r26, 0x02	; 2
    114c:	ed 91       	ld	r30, X+
    114e:	fc 91       	ld	r31, X
    1150:	13 97       	sbiw	r26, 0x03	; 3
    1152:	2e 17       	cp	r18, r30
    1154:	3f 07       	cpc	r19, r31
    1156:	20 f0       	brcs	.+8      	; 0x1160 <prvCopyDataFromQueue+0x40>
    1158:	17 96       	adiw	r26, 0x07	; 7
    115a:	dc 93       	st	X, r29
    115c:	ce 93       	st	-X, r28
    115e:	16 97       	sbiw	r26, 0x06	; 6
    1160:	16 96       	adiw	r26, 0x06	; 6
    1162:	3c 91       	ld	r19, X
    1164:	16 97       	sbiw	r26, 0x06	; 6
    1166:	17 96       	adiw	r26, 0x07	; 7
    1168:	2c 91       	ld	r18, X
    116a:	86 2f       	mov	r24, r22
    116c:	97 2f       	mov	r25, r23
    116e:	63 2f       	mov	r22, r19
    1170:	72 2f       	mov	r23, r18
    1172:	50 e0       	ldi	r21, 0x00	; 0
    1174:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <memcpy>
    1178:	df 91       	pop	r29
    117a:	cf 91       	pop	r28
    117c:	08 95       	ret

0000117e <prvCopyDataToQueue>:
    117e:	cf 93       	push	r28
    1180:	df 93       	push	r29
    1182:	ec 01       	movw	r28, r24
    1184:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1186:	22 23       	and	r18, r18
    1188:	a9 f1       	breq	.+106    	; 0x11f4 <prvCopyDataToQueue+0x76>
    118a:	44 23       	and	r20, r20
    118c:	b9 f4       	brne	.+46     	; 0x11bc <prvCopyDataToQueue+0x3e>
    118e:	8c 81       	ldd	r24, Y+4	; 0x04
    1190:	9d 81       	ldd	r25, Y+5	; 0x05
    1192:	42 2f       	mov	r20, r18
    1194:	50 e0       	ldi	r21, 0x00	; 0
    1196:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <memcpy>
    119a:	2c 8d       	ldd	r18, Y+28	; 0x1c
    119c:	8c 81       	ldd	r24, Y+4	; 0x04
    119e:	9d 81       	ldd	r25, Y+5	; 0x05
    11a0:	82 0f       	add	r24, r18
    11a2:	91 1d       	adc	r25, r1
    11a4:	9d 83       	std	Y+5, r25	; 0x05
    11a6:	8c 83       	std	Y+4, r24	; 0x04
    11a8:	2a 81       	ldd	r18, Y+2	; 0x02
    11aa:	3b 81       	ldd	r19, Y+3	; 0x03
    11ac:	82 17       	cp	r24, r18
    11ae:	93 07       	cpc	r25, r19
    11b0:	08 f1       	brcs	.+66     	; 0x11f4 <prvCopyDataToQueue+0x76>
    11b2:	88 81       	ld	r24, Y
    11b4:	99 81       	ldd	r25, Y+1	; 0x01
    11b6:	9d 83       	std	Y+5, r25	; 0x05
    11b8:	8c 83       	std	Y+4, r24	; 0x04
    11ba:	1c c0       	rjmp	.+56     	; 0x11f4 <prvCopyDataToQueue+0x76>
    11bc:	8e 81       	ldd	r24, Y+6	; 0x06
    11be:	9f 81       	ldd	r25, Y+7	; 0x07
    11c0:	42 2f       	mov	r20, r18
    11c2:	50 e0       	ldi	r21, 0x00	; 0
    11c4:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <memcpy>
    11c8:	4c 8d       	ldd	r20, Y+28	; 0x1c
    11ca:	50 e0       	ldi	r21, 0x00	; 0
    11cc:	50 95       	com	r21
    11ce:	41 95       	neg	r20
    11d0:	5f 4f       	sbci	r21, 0xFF	; 255
    11d2:	8e 81       	ldd	r24, Y+6	; 0x06
    11d4:	9f 81       	ldd	r25, Y+7	; 0x07
    11d6:	84 0f       	add	r24, r20
    11d8:	95 1f       	adc	r25, r21
    11da:	9f 83       	std	Y+7, r25	; 0x07
    11dc:	8e 83       	std	Y+6, r24	; 0x06
    11de:	28 81       	ld	r18, Y
    11e0:	39 81       	ldd	r19, Y+1	; 0x01
    11e2:	82 17       	cp	r24, r18
    11e4:	93 07       	cpc	r25, r19
    11e6:	30 f4       	brcc	.+12     	; 0x11f4 <prvCopyDataToQueue+0x76>
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	9b 81       	ldd	r25, Y+3	; 0x03
    11ec:	48 0f       	add	r20, r24
    11ee:	59 1f       	adc	r21, r25
    11f0:	5f 83       	std	Y+7, r21	; 0x07
    11f2:	4e 83       	std	Y+6, r20	; 0x06
    11f4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    11f6:	8f 5f       	subi	r24, 0xFF	; 255
    11f8:	8a 8f       	std	Y+26, r24	; 0x1a
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	08 95       	ret

00001200 <prvUnlockQueue>:
    1200:	0f 93       	push	r16
    1202:	1f 93       	push	r17
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
    1208:	ec 01       	movw	r28, r24
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	0f 92       	push	r0
    1210:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1212:	18 16       	cp	r1, r24
    1214:	c4 f4       	brge	.+48     	; 0x1246 <prvUnlockQueue+0x46>
    1216:	89 89       	ldd	r24, Y+17	; 0x11
    1218:	88 23       	and	r24, r24
    121a:	29 f4       	brne	.+10     	; 0x1226 <prvUnlockQueue+0x26>
    121c:	14 c0       	rjmp	.+40     	; 0x1246 <prvUnlockQueue+0x46>
    121e:	89 89       	ldd	r24, Y+17	; 0x11
    1220:	88 23       	and	r24, r24
    1222:	21 f4       	brne	.+8      	; 0x122c <prvUnlockQueue+0x2c>
    1224:	10 c0       	rjmp	.+32     	; 0x1246 <prvUnlockQueue+0x46>
    1226:	8e 01       	movw	r16, r28
    1228:	0f 5e       	subi	r16, 0xEF	; 239
    122a:	1f 4f       	sbci	r17, 0xFF	; 255
    122c:	c8 01       	movw	r24, r16
    122e:	0e 94 03 11 	call	0x2206	; 0x2206 <xTaskRemoveFromEventList>
    1232:	88 23       	and	r24, r24
    1234:	11 f0       	breq	.+4      	; 0x123a <prvUnlockQueue+0x3a>
    1236:	0e 94 94 11 	call	0x2328	; 0x2328 <vTaskMissedYield>
    123a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    123c:	81 50       	subi	r24, 0x01	; 1
    123e:	8e 8f       	std	Y+30, r24	; 0x1e
    1240:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1242:	18 16       	cp	r1, r24
    1244:	64 f3       	brlt	.-40     	; 0x121e <prvUnlockQueue+0x1e>
    1246:	8f ef       	ldi	r24, 0xFF	; 255
    1248:	8e 8f       	std	Y+30, r24	; 0x1e
    124a:	0f 90       	pop	r0
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	0f 92       	push	r0
    1254:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1256:	18 16       	cp	r1, r24
    1258:	c4 f4       	brge	.+48     	; 0x128a <prvUnlockQueue+0x8a>
    125a:	88 85       	ldd	r24, Y+8	; 0x08
    125c:	88 23       	and	r24, r24
    125e:	29 f4       	brne	.+10     	; 0x126a <prvUnlockQueue+0x6a>
    1260:	14 c0       	rjmp	.+40     	; 0x128a <prvUnlockQueue+0x8a>
    1262:	88 85       	ldd	r24, Y+8	; 0x08
    1264:	88 23       	and	r24, r24
    1266:	21 f4       	brne	.+8      	; 0x1270 <prvUnlockQueue+0x70>
    1268:	10 c0       	rjmp	.+32     	; 0x128a <prvUnlockQueue+0x8a>
    126a:	8e 01       	movw	r16, r28
    126c:	08 5f       	subi	r16, 0xF8	; 248
    126e:	1f 4f       	sbci	r17, 0xFF	; 255
    1270:	c8 01       	movw	r24, r16
    1272:	0e 94 03 11 	call	0x2206	; 0x2206 <xTaskRemoveFromEventList>
    1276:	88 23       	and	r24, r24
    1278:	11 f0       	breq	.+4      	; 0x127e <prvUnlockQueue+0x7e>
    127a:	0e 94 94 11 	call	0x2328	; 0x2328 <vTaskMissedYield>
    127e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1280:	81 50       	subi	r24, 0x01	; 1
    1282:	8d 8f       	std	Y+29, r24	; 0x1d
    1284:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1286:	18 16       	cp	r1, r24
    1288:	64 f3       	brlt	.-40     	; 0x1262 <prvUnlockQueue+0x62>
    128a:	8f ef       	ldi	r24, 0xFF	; 255
    128c:	8d 8f       	std	Y+29, r24	; 0x1d
    128e:	0f 90       	pop	r0
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	df 91       	pop	r29
    1294:	cf 91       	pop	r28
    1296:	1f 91       	pop	r17
    1298:	0f 91       	pop	r16
    129a:	08 95       	ret

0000129c <xQueueGenericReset>:
    129c:	cf 93       	push	r28
    129e:	df 93       	push	r29
    12a0:	ec 01       	movw	r28, r24
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	f8 94       	cli
    12a6:	0f 92       	push	r0
    12a8:	48 81       	ld	r20, Y
    12aa:	59 81       	ldd	r21, Y+1	; 0x01
    12ac:	2b 8d       	ldd	r18, Y+27	; 0x1b
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	ec 8d       	ldd	r30, Y+28	; 0x1c
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	2e 9f       	mul	r18, r30
    12b6:	c0 01       	movw	r24, r0
    12b8:	2f 9f       	mul	r18, r31
    12ba:	90 0d       	add	r25, r0
    12bc:	3e 9f       	mul	r19, r30
    12be:	90 0d       	add	r25, r0
    12c0:	11 24       	eor	r1, r1
    12c2:	84 0f       	add	r24, r20
    12c4:	95 1f       	adc	r25, r21
    12c6:	9b 83       	std	Y+3, r25	; 0x03
    12c8:	8a 83       	std	Y+2, r24	; 0x02
    12ca:	1a 8e       	std	Y+26, r1	; 0x1a
    12cc:	5d 83       	std	Y+5, r21	; 0x05
    12ce:	4c 83       	std	Y+4, r20	; 0x04
    12d0:	c9 01       	movw	r24, r18
    12d2:	01 97       	sbiw	r24, 0x01	; 1
    12d4:	e8 9f       	mul	r30, r24
    12d6:	90 01       	movw	r18, r0
    12d8:	e9 9f       	mul	r30, r25
    12da:	30 0d       	add	r19, r0
    12dc:	f8 9f       	mul	r31, r24
    12de:	30 0d       	add	r19, r0
    12e0:	11 24       	eor	r1, r1
    12e2:	24 0f       	add	r18, r20
    12e4:	35 1f       	adc	r19, r21
    12e6:	3f 83       	std	Y+7, r19	; 0x07
    12e8:	2e 83       	std	Y+6, r18	; 0x06
    12ea:	8f ef       	ldi	r24, 0xFF	; 255
    12ec:	8d 8f       	std	Y+29, r24	; 0x1d
    12ee:	8e 8f       	std	Y+30, r24	; 0x1e
    12f0:	66 23       	and	r22, r22
    12f2:	61 f4       	brne	.+24     	; 0x130c <xQueueGenericReset+0x70>
    12f4:	88 85       	ldd	r24, Y+8	; 0x08
    12f6:	88 23       	and	r24, r24
    12f8:	89 f0       	breq	.+34     	; 0x131c <xQueueGenericReset+0x80>
    12fa:	ce 01       	movw	r24, r28
    12fc:	08 96       	adiw	r24, 0x08	; 8
    12fe:	0e 94 03 11 	call	0x2206	; 0x2206 <xTaskRemoveFromEventList>
    1302:	81 30       	cpi	r24, 0x01	; 1
    1304:	59 f4       	brne	.+22     	; 0x131c <xQueueGenericReset+0x80>
    1306:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <vPortYield>
    130a:	08 c0       	rjmp	.+16     	; 0x131c <xQueueGenericReset+0x80>
    130c:	ce 01       	movw	r24, r28
    130e:	08 96       	adiw	r24, 0x08	; 8
    1310:	0e 94 30 04 	call	0x860	; 0x860 <vListInitialise>
    1314:	ce 01       	movw	r24, r28
    1316:	41 96       	adiw	r24, 0x11	; 17
    1318:	0e 94 30 04 	call	0x860	; 0x860 <vListInitialise>
    131c:	0f 90       	pop	r0
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	df 91       	pop	r29
    1324:	cf 91       	pop	r28
    1326:	08 95       	ret

00001328 <xQueueGenericCreate>:
    1328:	0f 93       	push	r16
    132a:	1f 93       	push	r17
    132c:	cf 93       	push	r28
    132e:	df 93       	push	r29
    1330:	18 2f       	mov	r17, r24
    1332:	06 2f       	mov	r16, r22
    1334:	88 23       	and	r24, r24
    1336:	f9 f0       	breq	.+62     	; 0x1376 <xQueueGenericCreate+0x4e>
    1338:	8f e1       	ldi	r24, 0x1F	; 31
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <pvPortMalloc>
    1340:	ec 01       	movw	r28, r24
    1342:	00 97       	sbiw	r24, 0x00	; 0
    1344:	d9 f0       	breq	.+54     	; 0x137c <xQueueGenericCreate+0x54>
    1346:	01 9f       	mul	r16, r17
    1348:	c0 01       	movw	r24, r0
    134a:	11 24       	eor	r1, r1
    134c:	01 96       	adiw	r24, 0x01	; 1
    134e:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <pvPortMalloc>
    1352:	99 83       	std	Y+1, r25	; 0x01
    1354:	88 83       	st	Y, r24
    1356:	00 97       	sbiw	r24, 0x00	; 0
    1358:	41 f0       	breq	.+16     	; 0x136a <xQueueGenericCreate+0x42>
    135a:	1b 8f       	std	Y+27, r17	; 0x1b
    135c:	0c 8f       	std	Y+28, r16	; 0x1c
    135e:	ce 01       	movw	r24, r28
    1360:	61 e0       	ldi	r22, 0x01	; 1
    1362:	0e 94 4e 09 	call	0x129c	; 0x129c <xQueueGenericReset>
    1366:	ce 01       	movw	r24, r28
    1368:	0b c0       	rjmp	.+22     	; 0x1380 <xQueueGenericCreate+0x58>
    136a:	ce 01       	movw	r24, r28
    136c:	0e 94 21 04 	call	0x842	; 0x842 <vPortFree>
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	05 c0       	rjmp	.+10     	; 0x1380 <xQueueGenericCreate+0x58>
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <xQueueGenericCreate+0x58>
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	df 91       	pop	r29
    1382:	cf 91       	pop	r28
    1384:	1f 91       	pop	r17
    1386:	0f 91       	pop	r16
    1388:	08 95       	ret

0000138a <xQueueGenericSend>:
    138a:	8f 92       	push	r8
    138c:	9f 92       	push	r9
    138e:	bf 92       	push	r11
    1390:	cf 92       	push	r12
    1392:	df 92       	push	r13
    1394:	ef 92       	push	r14
    1396:	ff 92       	push	r15
    1398:	0f 93       	push	r16
    139a:	1f 93       	push	r17
    139c:	cf 93       	push	r28
    139e:	df 93       	push	r29
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <xQueueGenericSend+0x18>
    13a2:	00 d0       	rcall	.+0      	; 0x13a4 <xQueueGenericSend+0x1a>
    13a4:	0f 92       	push	r0
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	8c 01       	movw	r16, r24
    13ac:	4b 01       	movw	r8, r22
    13ae:	5d 83       	std	Y+5, r21	; 0x05
    13b0:	4c 83       	std	Y+4, r20	; 0x04
    13b2:	b2 2e       	mov	r11, r18
    13b4:	ff 24       	eor	r15, r15
    13b6:	ee 24       	eor	r14, r14
    13b8:	e3 94       	inc	r14
    13ba:	cc 24       	eor	r12, r12
    13bc:	dd 24       	eor	r13, r13
    13be:	68 94       	set
    13c0:	c3 f8       	bld	r12, 3
    13c2:	c8 0e       	add	r12, r24
    13c4:	d9 1e       	adc	r13, r25
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	f8 94       	cli
    13ca:	0f 92       	push	r0
    13cc:	f8 01       	movw	r30, r16
    13ce:	92 8d       	ldd	r25, Z+26	; 0x1a
    13d0:	83 8d       	ldd	r24, Z+27	; 0x1b
    13d2:	98 17       	cp	r25, r24
    13d4:	a8 f4       	brcc	.+42     	; 0x1400 <xQueueGenericSend+0x76>
    13d6:	c8 01       	movw	r24, r16
    13d8:	b4 01       	movw	r22, r8
    13da:	4b 2d       	mov	r20, r11
    13dc:	0e 94 bf 08 	call	0x117e	; 0x117e <prvCopyDataToQueue>
    13e0:	f8 01       	movw	r30, r16
    13e2:	81 89       	ldd	r24, Z+17	; 0x11
    13e4:	88 23       	and	r24, r24
    13e6:	41 f0       	breq	.+16     	; 0x13f8 <xQueueGenericSend+0x6e>
    13e8:	c8 01       	movw	r24, r16
    13ea:	41 96       	adiw	r24, 0x11	; 17
    13ec:	0e 94 03 11 	call	0x2206	; 0x2206 <xTaskRemoveFromEventList>
    13f0:	81 30       	cpi	r24, 0x01	; 1
    13f2:	11 f4       	brne	.+4      	; 0x13f8 <xQueueGenericSend+0x6e>
    13f4:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <vPortYield>
    13f8:	0f 90       	pop	r0
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	52 c0       	rjmp	.+164    	; 0x14a4 <xQueueGenericSend+0x11a>
    1400:	8c 81       	ldd	r24, Y+4	; 0x04
    1402:	9d 81       	ldd	r25, Y+5	; 0x05
    1404:	00 97       	sbiw	r24, 0x00	; 0
    1406:	21 f4       	brne	.+8      	; 0x1410 <xQueueGenericSend+0x86>
    1408:	0f 90       	pop	r0
    140a:	0f be       	out	0x3f, r0	; 63
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	4a c0       	rjmp	.+148    	; 0x14a4 <xQueueGenericSend+0x11a>
    1410:	ff 20       	and	r15, r15
    1412:	29 f4       	brne	.+10     	; 0x141e <xQueueGenericSend+0x94>
    1414:	ce 01       	movw	r24, r28
    1416:	01 96       	adiw	r24, 0x01	; 1
    1418:	0e 94 4b 11 	call	0x2296	; 0x2296 <vTaskSetTimeOutState>
    141c:	fe 2c       	mov	r15, r14
    141e:	0f 90       	pop	r0
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <vTaskSuspendAll>
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	0f 92       	push	r0
    142c:	f8 01       	movw	r30, r16
    142e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1430:	8f 3f       	cpi	r24, 0xFF	; 255
    1432:	09 f4       	brne	.+2      	; 0x1436 <xQueueGenericSend+0xac>
    1434:	15 8e       	std	Z+29, r1	; 0x1d
    1436:	f8 01       	movw	r30, r16
    1438:	86 8d       	ldd	r24, Z+30	; 0x1e
    143a:	8f 3f       	cpi	r24, 0xFF	; 255
    143c:	09 f4       	brne	.+2      	; 0x1440 <xQueueGenericSend+0xb6>
    143e:	16 8e       	std	Z+30, r1	; 0x1e
    1440:	0f 90       	pop	r0
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	ce 01       	movw	r24, r28
    1446:	01 96       	adiw	r24, 0x01	; 1
    1448:	be 01       	movw	r22, r28
    144a:	6c 5f       	subi	r22, 0xFC	; 252
    144c:	7f 4f       	sbci	r23, 0xFF	; 255
    144e:	0e 94 56 11 	call	0x22ac	; 0x22ac <xTaskCheckForTimeOut>
    1452:	88 23       	and	r24, r24
    1454:	09 f5       	brne	.+66     	; 0x1498 <xQueueGenericSend+0x10e>
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	f8 94       	cli
    145a:	0f 92       	push	r0
    145c:	f8 01       	movw	r30, r16
    145e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1460:	0f 90       	pop	r0
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	f8 01       	movw	r30, r16
    1466:	83 8d       	ldd	r24, Z+27	; 0x1b
    1468:	98 17       	cp	r25, r24
    146a:	81 f4       	brne	.+32     	; 0x148c <xQueueGenericSend+0x102>
    146c:	6c 81       	ldd	r22, Y+4	; 0x04
    146e:	7d 81       	ldd	r23, Y+5	; 0x05
    1470:	c6 01       	movw	r24, r12
    1472:	0e 94 d7 10 	call	0x21ae	; 0x21ae <vTaskPlaceOnEventList>
    1476:	c8 01       	movw	r24, r16
    1478:	0e 94 00 09 	call	0x1200	; 0x1200 <prvUnlockQueue>
    147c:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <xTaskResumeAll>
    1480:	88 23       	and	r24, r24
    1482:	09 f0       	breq	.+2      	; 0x1486 <xQueueGenericSend+0xfc>
    1484:	a0 cf       	rjmp	.-192    	; 0x13c6 <xQueueGenericSend+0x3c>
    1486:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <vPortYield>
    148a:	9d cf       	rjmp	.-198    	; 0x13c6 <xQueueGenericSend+0x3c>
    148c:	c8 01       	movw	r24, r16
    148e:	0e 94 00 09 	call	0x1200	; 0x1200 <prvUnlockQueue>
    1492:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <xTaskResumeAll>
    1496:	97 cf       	rjmp	.-210    	; 0x13c6 <xQueueGenericSend+0x3c>
    1498:	c8 01       	movw	r24, r16
    149a:	0e 94 00 09 	call	0x1200	; 0x1200 <prvUnlockQueue>
    149e:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <xTaskResumeAll>
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	df 91       	pop	r29
    14b0:	cf 91       	pop	r28
    14b2:	1f 91       	pop	r17
    14b4:	0f 91       	pop	r16
    14b6:	ff 90       	pop	r15
    14b8:	ef 90       	pop	r14
    14ba:	df 90       	pop	r13
    14bc:	cf 90       	pop	r12
    14be:	bf 90       	pop	r11
    14c0:	9f 90       	pop	r9
    14c2:	8f 90       	pop	r8
    14c4:	08 95       	ret

000014c6 <xQueueGenericSendFromISR>:
    14c6:	0f 93       	push	r16
    14c8:	1f 93       	push	r17
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
    14ce:	ec 01       	movw	r28, r24
    14d0:	8a 01       	movw	r16, r20
    14d2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    14d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14d6:	98 17       	cp	r25, r24
    14d8:	e0 f4       	brcc	.+56     	; 0x1512 <xQueueGenericSendFromISR+0x4c>
    14da:	ce 01       	movw	r24, r28
    14dc:	42 2f       	mov	r20, r18
    14de:	0e 94 bf 08 	call	0x117e	; 0x117e <prvCopyDataToQueue>
    14e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14e4:	8f 3f       	cpi	r24, 0xFF	; 255
    14e6:	81 f4       	brne	.+32     	; 0x1508 <xQueueGenericSendFromISR+0x42>
    14e8:	89 89       	ldd	r24, Y+17	; 0x11
    14ea:	88 23       	and	r24, r24
    14ec:	a1 f0       	breq	.+40     	; 0x1516 <xQueueGenericSendFromISR+0x50>
    14ee:	ce 01       	movw	r24, r28
    14f0:	41 96       	adiw	r24, 0x11	; 17
    14f2:	0e 94 03 11 	call	0x2206	; 0x2206 <xTaskRemoveFromEventList>
    14f6:	88 23       	and	r24, r24
    14f8:	81 f0       	breq	.+32     	; 0x151a <xQueueGenericSendFromISR+0x54>
    14fa:	01 15       	cp	r16, r1
    14fc:	11 05       	cpc	r17, r1
    14fe:	79 f0       	breq	.+30     	; 0x151e <xQueueGenericSendFromISR+0x58>
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	f8 01       	movw	r30, r16
    1504:	80 83       	st	Z, r24
    1506:	0c c0       	rjmp	.+24     	; 0x1520 <xQueueGenericSendFromISR+0x5a>
    1508:	8e 8d       	ldd	r24, Y+30	; 0x1e
    150a:	8f 5f       	subi	r24, 0xFF	; 255
    150c:	8e 8f       	std	Y+30, r24	; 0x1e
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	07 c0       	rjmp	.+14     	; 0x1520 <xQueueGenericSendFromISR+0x5a>
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	05 c0       	rjmp	.+10     	; 0x1520 <xQueueGenericSendFromISR+0x5a>
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	03 c0       	rjmp	.+6      	; 0x1520 <xQueueGenericSendFromISR+0x5a>
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	01 c0       	rjmp	.+2      	; 0x1520 <xQueueGenericSendFromISR+0x5a>
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	df 91       	pop	r29
    1522:	cf 91       	pop	r28
    1524:	1f 91       	pop	r17
    1526:	0f 91       	pop	r16
    1528:	08 95       	ret

0000152a <xQueueGenericReceive>:
    152a:	8f 92       	push	r8
    152c:	9f 92       	push	r9
    152e:	bf 92       	push	r11
    1530:	cf 92       	push	r12
    1532:	df 92       	push	r13
    1534:	ef 92       	push	r14
    1536:	ff 92       	push	r15
    1538:	0f 93       	push	r16
    153a:	1f 93       	push	r17
    153c:	cf 93       	push	r28
    153e:	df 93       	push	r29
    1540:	00 d0       	rcall	.+0      	; 0x1542 <xQueueGenericReceive+0x18>
    1542:	00 d0       	rcall	.+0      	; 0x1544 <xQueueGenericReceive+0x1a>
    1544:	0f 92       	push	r0
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
    154a:	8c 01       	movw	r16, r24
    154c:	4b 01       	movw	r8, r22
    154e:	5d 83       	std	Y+5, r21	; 0x05
    1550:	4c 83       	std	Y+4, r20	; 0x04
    1552:	b2 2e       	mov	r11, r18
    1554:	ff 24       	eor	r15, r15
    1556:	ee 24       	eor	r14, r14
    1558:	e3 94       	inc	r14
    155a:	0f 2e       	mov	r0, r31
    155c:	f1 e1       	ldi	r31, 0x11	; 17
    155e:	cf 2e       	mov	r12, r31
    1560:	dd 24       	eor	r13, r13
    1562:	f0 2d       	mov	r31, r0
    1564:	c8 0e       	add	r12, r24
    1566:	d9 1e       	adc	r13, r25
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	f8 94       	cli
    156c:	0f 92       	push	r0
    156e:	f8 01       	movw	r30, r16
    1570:	82 8d       	ldd	r24, Z+26	; 0x1a
    1572:	88 23       	and	r24, r24
    1574:	51 f1       	breq	.+84     	; 0x15ca <xQueueGenericReceive+0xa0>
    1576:	e6 80       	ldd	r14, Z+6	; 0x06
    1578:	f7 80       	ldd	r15, Z+7	; 0x07
    157a:	c8 01       	movw	r24, r16
    157c:	b4 01       	movw	r22, r8
    157e:	0e 94 90 08 	call	0x1120	; 0x1120 <prvCopyDataFromQueue>
    1582:	bb 20       	and	r11, r11
    1584:	81 f4       	brne	.+32     	; 0x15a6 <xQueueGenericReceive+0x7c>
    1586:	f8 01       	movw	r30, r16
    1588:	82 8d       	ldd	r24, Z+26	; 0x1a
    158a:	81 50       	subi	r24, 0x01	; 1
    158c:	82 8f       	std	Z+26, r24	; 0x1a
    158e:	80 85       	ldd	r24, Z+8	; 0x08
    1590:	88 23       	and	r24, r24
    1592:	b9 f0       	breq	.+46     	; 0x15c2 <xQueueGenericReceive+0x98>
    1594:	c8 01       	movw	r24, r16
    1596:	08 96       	adiw	r24, 0x08	; 8
    1598:	0e 94 03 11 	call	0x2206	; 0x2206 <xTaskRemoveFromEventList>
    159c:	81 30       	cpi	r24, 0x01	; 1
    159e:	89 f4       	brne	.+34     	; 0x15c2 <xQueueGenericReceive+0x98>
    15a0:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <vPortYield>
    15a4:	0e c0       	rjmp	.+28     	; 0x15c2 <xQueueGenericReceive+0x98>
    15a6:	f8 01       	movw	r30, r16
    15a8:	f7 82       	std	Z+7, r15	; 0x07
    15aa:	e6 82       	std	Z+6, r14	; 0x06
    15ac:	81 89       	ldd	r24, Z+17	; 0x11
    15ae:	88 23       	and	r24, r24
    15b0:	41 f0       	breq	.+16     	; 0x15c2 <xQueueGenericReceive+0x98>
    15b2:	c8 01       	movw	r24, r16
    15b4:	41 96       	adiw	r24, 0x11	; 17
    15b6:	0e 94 03 11 	call	0x2206	; 0x2206 <xTaskRemoveFromEventList>
    15ba:	88 23       	and	r24, r24
    15bc:	11 f0       	breq	.+4      	; 0x15c2 <xQueueGenericReceive+0x98>
    15be:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <vPortYield>
    15c2:	0f 90       	pop	r0
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	50 c0       	rjmp	.+160    	; 0x166a <xQueueGenericReceive+0x140>
    15ca:	8c 81       	ldd	r24, Y+4	; 0x04
    15cc:	9d 81       	ldd	r25, Y+5	; 0x05
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	21 f4       	brne	.+8      	; 0x15da <xQueueGenericReceive+0xb0>
    15d2:	0f 90       	pop	r0
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	48 c0       	rjmp	.+144    	; 0x166a <xQueueGenericReceive+0x140>
    15da:	ff 20       	and	r15, r15
    15dc:	29 f4       	brne	.+10     	; 0x15e8 <xQueueGenericReceive+0xbe>
    15de:	ce 01       	movw	r24, r28
    15e0:	01 96       	adiw	r24, 0x01	; 1
    15e2:	0e 94 4b 11 	call	0x2296	; 0x2296 <vTaskSetTimeOutState>
    15e6:	fe 2c       	mov	r15, r14
    15e8:	0f 90       	pop	r0
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <vTaskSuspendAll>
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	f8 94       	cli
    15f4:	0f 92       	push	r0
    15f6:	f8 01       	movw	r30, r16
    15f8:	85 8d       	ldd	r24, Z+29	; 0x1d
    15fa:	8f 3f       	cpi	r24, 0xFF	; 255
    15fc:	09 f4       	brne	.+2      	; 0x1600 <xQueueGenericReceive+0xd6>
    15fe:	15 8e       	std	Z+29, r1	; 0x1d
    1600:	f8 01       	movw	r30, r16
    1602:	86 8d       	ldd	r24, Z+30	; 0x1e
    1604:	8f 3f       	cpi	r24, 0xFF	; 255
    1606:	09 f4       	brne	.+2      	; 0x160a <xQueueGenericReceive+0xe0>
    1608:	16 8e       	std	Z+30, r1	; 0x1e
    160a:	0f 90       	pop	r0
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	ce 01       	movw	r24, r28
    1610:	01 96       	adiw	r24, 0x01	; 1
    1612:	be 01       	movw	r22, r28
    1614:	6c 5f       	subi	r22, 0xFC	; 252
    1616:	7f 4f       	sbci	r23, 0xFF	; 255
    1618:	0e 94 56 11 	call	0x22ac	; 0x22ac <xTaskCheckForTimeOut>
    161c:	88 23       	and	r24, r24
    161e:	f9 f4       	brne	.+62     	; 0x165e <xQueueGenericReceive+0x134>
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	f8 94       	cli
    1624:	0f 92       	push	r0
    1626:	f8 01       	movw	r30, r16
    1628:	82 8d       	ldd	r24, Z+26	; 0x1a
    162a:	0f 90       	pop	r0
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	88 23       	and	r24, r24
    1630:	81 f4       	brne	.+32     	; 0x1652 <xQueueGenericReceive+0x128>
    1632:	6c 81       	ldd	r22, Y+4	; 0x04
    1634:	7d 81       	ldd	r23, Y+5	; 0x05
    1636:	c6 01       	movw	r24, r12
    1638:	0e 94 d7 10 	call	0x21ae	; 0x21ae <vTaskPlaceOnEventList>
    163c:	c8 01       	movw	r24, r16
    163e:	0e 94 00 09 	call	0x1200	; 0x1200 <prvUnlockQueue>
    1642:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <xTaskResumeAll>
    1646:	88 23       	and	r24, r24
    1648:	09 f0       	breq	.+2      	; 0x164c <xQueueGenericReceive+0x122>
    164a:	8e cf       	rjmp	.-228    	; 0x1568 <xQueueGenericReceive+0x3e>
    164c:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <vPortYield>
    1650:	8b cf       	rjmp	.-234    	; 0x1568 <xQueueGenericReceive+0x3e>
    1652:	c8 01       	movw	r24, r16
    1654:	0e 94 00 09 	call	0x1200	; 0x1200 <prvUnlockQueue>
    1658:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <xTaskResumeAll>
    165c:	85 cf       	rjmp	.-246    	; 0x1568 <xQueueGenericReceive+0x3e>
    165e:	c8 01       	movw	r24, r16
    1660:	0e 94 00 09 	call	0x1200	; 0x1200 <prvUnlockQueue>
    1664:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <xTaskResumeAll>
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	df 91       	pop	r29
    1676:	cf 91       	pop	r28
    1678:	1f 91       	pop	r17
    167a:	0f 91       	pop	r16
    167c:	ff 90       	pop	r15
    167e:	ef 90       	pop	r14
    1680:	df 90       	pop	r13
    1682:	cf 90       	pop	r12
    1684:	bf 90       	pop	r11
    1686:	9f 90       	pop	r9
    1688:	8f 90       	pop	r8
    168a:	08 95       	ret

0000168c <xQueueReceiveFromISR>:
    168c:	0f 93       	push	r16
    168e:	1f 93       	push	r17
    1690:	cf 93       	push	r28
    1692:	df 93       	push	r29
    1694:	ec 01       	movw	r28, r24
    1696:	8a 01       	movw	r16, r20
    1698:	8a 8d       	ldd	r24, Y+26	; 0x1a
    169a:	88 23       	and	r24, r24
    169c:	f1 f0       	breq	.+60     	; 0x16da <xQueueReceiveFromISR+0x4e>
    169e:	ce 01       	movw	r24, r28
    16a0:	0e 94 90 08 	call	0x1120	; 0x1120 <prvCopyDataFromQueue>
    16a4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16a6:	81 50       	subi	r24, 0x01	; 1
    16a8:	8a 8f       	std	Y+26, r24	; 0x1a
    16aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16ac:	8f 3f       	cpi	r24, 0xFF	; 255
    16ae:	81 f4       	brne	.+32     	; 0x16d0 <xQueueReceiveFromISR+0x44>
    16b0:	88 85       	ldd	r24, Y+8	; 0x08
    16b2:	88 23       	and	r24, r24
    16b4:	a1 f0       	breq	.+40     	; 0x16de <xQueueReceiveFromISR+0x52>
    16b6:	ce 01       	movw	r24, r28
    16b8:	08 96       	adiw	r24, 0x08	; 8
    16ba:	0e 94 03 11 	call	0x2206	; 0x2206 <xTaskRemoveFromEventList>
    16be:	88 23       	and	r24, r24
    16c0:	81 f0       	breq	.+32     	; 0x16e2 <xQueueReceiveFromISR+0x56>
    16c2:	01 15       	cp	r16, r1
    16c4:	11 05       	cpc	r17, r1
    16c6:	79 f0       	breq	.+30     	; 0x16e6 <xQueueReceiveFromISR+0x5a>
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	f8 01       	movw	r30, r16
    16cc:	80 83       	st	Z, r24
    16ce:	0c c0       	rjmp	.+24     	; 0x16e8 <xQueueReceiveFromISR+0x5c>
    16d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16d2:	8f 5f       	subi	r24, 0xFF	; 255
    16d4:	8d 8f       	std	Y+29, r24	; 0x1d
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	07 c0       	rjmp	.+14     	; 0x16e8 <xQueueReceiveFromISR+0x5c>
    16da:	80 e0       	ldi	r24, 0x00	; 0
    16dc:	05 c0       	rjmp	.+10     	; 0x16e8 <xQueueReceiveFromISR+0x5c>
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	03 c0       	rjmp	.+6      	; 0x16e8 <xQueueReceiveFromISR+0x5c>
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	01 c0       	rjmp	.+2      	; 0x16e8 <xQueueReceiveFromISR+0x5c>
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	df 91       	pop	r29
    16ea:	cf 91       	pop	r28
    16ec:	1f 91       	pop	r17
    16ee:	0f 91       	pop	r16
    16f0:	08 95       	ret

000016f2 <uxQueueMessagesWaiting>:
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	f8 94       	cli
    16f6:	0f 92       	push	r0
    16f8:	fc 01       	movw	r30, r24
    16fa:	82 8d       	ldd	r24, Z+26	; 0x1a
    16fc:	0f 90       	pop	r0
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	08 95       	ret

00001702 <uxQueueMessagesWaitingFromISR>:
    1702:	fc 01       	movw	r30, r24
    1704:	82 8d       	ldd	r24, Z+26	; 0x1a
    1706:	08 95       	ret

00001708 <vQueueDelete>:
    1708:	cf 93       	push	r28
    170a:	df 93       	push	r29
    170c:	ec 01       	movw	r28, r24
    170e:	88 81       	ld	r24, Y
    1710:	99 81       	ldd	r25, Y+1	; 0x01
    1712:	0e 94 21 04 	call	0x842	; 0x842 <vPortFree>
    1716:	ce 01       	movw	r24, r28
    1718:	0e 94 21 04 	call	0x842	; 0x842 <vPortFree>
    171c:	df 91       	pop	r29
    171e:	cf 91       	pop	r28
    1720:	08 95       	ret

00001722 <xQueueIsQueueEmptyFromISR>:
    1722:	fc 01       	movw	r30, r24
    1724:	92 8d       	ldd	r25, Z+26	; 0x1a
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	91 11       	cpse	r25, r1
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	08 95       	ret

0000172e <xQueueIsQueueFullFromISR>:
    172e:	fc 01       	movw	r30, r24
    1730:	22 8d       	ldd	r18, Z+26	; 0x1a
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	93 8d       	ldd	r25, Z+27	; 0x1b
    1736:	29 13       	cpse	r18, r25
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	08 95       	ret

0000173c <prvAddCurrentTaskToDelayedList>:
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	ec 01       	movw	r28, r24
    1742:	e0 91 94 06 	lds	r30, 0x0694
    1746:	f0 91 95 06 	lds	r31, 0x0695
    174a:	93 83       	std	Z+3, r25	; 0x03
    174c:	82 83       	std	Z+2, r24	; 0x02
    174e:	80 91 9c 06 	lds	r24, 0x069C
    1752:	90 91 9d 06 	lds	r25, 0x069D
    1756:	c8 17       	cp	r28, r24
    1758:	d9 07       	cpc	r29, r25
    175a:	68 f4       	brcc	.+26     	; 0x1776 <prvAddCurrentTaskToDelayedList+0x3a>
    175c:	80 91 a0 06 	lds	r24, 0x06A0
    1760:	90 91 a1 06 	lds	r25, 0x06A1
    1764:	60 91 94 06 	lds	r22, 0x0694
    1768:	70 91 95 06 	lds	r23, 0x0695
    176c:	6e 5f       	subi	r22, 0xFE	; 254
    176e:	7f 4f       	sbci	r23, 0xFF	; 255
    1770:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <vListInsert>
    1774:	17 c0       	rjmp	.+46     	; 0x17a4 <prvAddCurrentTaskToDelayedList+0x68>
    1776:	80 91 a2 06 	lds	r24, 0x06A2
    177a:	90 91 a3 06 	lds	r25, 0x06A3
    177e:	60 91 94 06 	lds	r22, 0x0694
    1782:	70 91 95 06 	lds	r23, 0x0695
    1786:	6e 5f       	subi	r22, 0xFE	; 254
    1788:	7f 4f       	sbci	r23, 0xFF	; 255
    178a:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <vListInsert>
    178e:	80 91 78 00 	lds	r24, 0x0078
    1792:	90 91 79 00 	lds	r25, 0x0079
    1796:	c8 17       	cp	r28, r24
    1798:	d9 07       	cpc	r29, r25
    179a:	20 f4       	brcc	.+8      	; 0x17a4 <prvAddCurrentTaskToDelayedList+0x68>
    179c:	d0 93 79 00 	sts	0x0079, r29
    17a0:	c0 93 78 00 	sts	0x0078, r28
    17a4:	df 91       	pop	r29
    17a6:	cf 91       	pop	r28
    17a8:	08 95       	ret

000017aa <xTaskGenericCreate>:
    17aa:	4f 92       	push	r4
    17ac:	5f 92       	push	r5
    17ae:	6f 92       	push	r6
    17b0:	7f 92       	push	r7
    17b2:	8f 92       	push	r8
    17b4:	9f 92       	push	r9
    17b6:	bf 92       	push	r11
    17b8:	cf 92       	push	r12
    17ba:	df 92       	push	r13
    17bc:	ef 92       	push	r14
    17be:	ff 92       	push	r15
    17c0:	0f 93       	push	r16
    17c2:	1f 93       	push	r17
    17c4:	cf 93       	push	r28
    17c6:	df 93       	push	r29
    17c8:	2c 01       	movw	r4, r24
    17ca:	4b 01       	movw	r8, r22
    17cc:	ea 01       	movw	r28, r20
    17ce:	39 01       	movw	r6, r18
    17d0:	b0 2e       	mov	r11, r16
    17d2:	87 e3       	ldi	r24, 0x37	; 55
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <pvPortMalloc>
    17da:	8c 01       	movw	r16, r24
    17dc:	00 97       	sbiw	r24, 0x00	; 0
    17de:	09 f4       	brne	.+2      	; 0x17e2 <xTaskGenericCreate+0x38>
    17e0:	e7 c0       	rjmp	.+462    	; 0x19b0 <xTaskGenericCreate+0x206>
    17e2:	c1 14       	cp	r12, r1
    17e4:	d1 04       	cpc	r13, r1
    17e6:	09 f0       	breq	.+2      	; 0x17ea <xTaskGenericCreate+0x40>
    17e8:	f8 c0       	rjmp	.+496    	; 0x19da <xTaskGenericCreate+0x230>
    17ea:	ce 01       	movw	r24, r28
    17ec:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <pvPortMalloc>
    17f0:	6c 01       	movw	r12, r24
    17f2:	f8 01       	movw	r30, r16
    17f4:	90 8f       	std	Z+24, r25	; 0x18
    17f6:	87 8b       	std	Z+23, r24	; 0x17
    17f8:	00 97       	sbiw	r24, 0x00	; 0
    17fa:	29 f4       	brne	.+10     	; 0x1806 <xTaskGenericCreate+0x5c>
    17fc:	c8 01       	movw	r24, r16
    17fe:	0e 94 21 04 	call	0x842	; 0x842 <vPortFree>
    1802:	8f ef       	ldi	r24, 0xFF	; 255
    1804:	da c0       	rjmp	.+436    	; 0x19ba <xTaskGenericCreate+0x210>
    1806:	c6 01       	movw	r24, r12
    1808:	65 ea       	ldi	r22, 0xA5	; 165
    180a:	70 e0       	ldi	r23, 0x00	; 0
    180c:	ae 01       	movw	r20, r28
    180e:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <memset>
    1812:	9e 01       	movw	r18, r28
    1814:	21 50       	subi	r18, 0x01	; 1
    1816:	30 40       	sbci	r19, 0x00	; 0
    1818:	f8 01       	movw	r30, r16
    181a:	87 89       	ldd	r24, Z+23	; 0x17
    181c:	90 8d       	ldd	r25, Z+24	; 0x18
    181e:	6c 01       	movw	r12, r24
    1820:	c2 0e       	add	r12, r18
    1822:	d3 1e       	adc	r13, r19
    1824:	c8 01       	movw	r24, r16
    1826:	49 96       	adiw	r24, 0x19	; 25
    1828:	b4 01       	movw	r22, r8
    182a:	4e e1       	ldi	r20, 0x1E	; 30
    182c:	50 e0       	ldi	r21, 0x00	; 0
    182e:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <strncpy>
    1832:	f8 01       	movw	r30, r16
    1834:	16 aa       	sts	0x96, r17
    1836:	cb 2d       	mov	r28, r11
    1838:	f3 e0       	ldi	r31, 0x03	; 3
    183a:	fb 15       	cp	r31, r11
    183c:	08 f4       	brcc	.+2      	; 0x1840 <xTaskGenericCreate+0x96>
    183e:	c3 e0       	ldi	r28, 0x03	; 3
    1840:	f8 01       	movw	r30, r16
    1842:	c6 8b       	std	Z+22, r28	; 0x16
    1844:	88 24       	eor	r8, r8
    1846:	99 24       	eor	r9, r9
    1848:	68 94       	set
    184a:	81 f8       	bld	r8, 1
    184c:	80 0e       	add	r8, r16
    184e:	91 1e       	adc	r9, r17
    1850:	c4 01       	movw	r24, r8
    1852:	0e 94 3e 04 	call	0x87c	; 0x87c <vListInitialiseItem>
    1856:	c8 01       	movw	r24, r16
    1858:	0c 96       	adiw	r24, 0x0c	; 12
    185a:	0e 94 3e 04 	call	0x87c	; 0x87c <vListInitialiseItem>
    185e:	f8 01       	movw	r30, r16
    1860:	11 87       	std	Z+9, r17	; 0x09
    1862:	00 87       	std	Z+8, r16	; 0x08
    1864:	84 e0       	ldi	r24, 0x04	; 4
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	8c 1b       	sub	r24, r28
    186a:	91 09       	sbc	r25, r1
    186c:	95 87       	std	Z+13, r25	; 0x0d
    186e:	84 87       	std	Z+12, r24	; 0x0c
    1870:	13 8b       	std	Z+19, r17	; 0x13
    1872:	02 8b       	std	Z+18, r16	; 0x12
    1874:	c6 01       	movw	r24, r12
    1876:	b2 01       	movw	r22, r4
    1878:	a3 01       	movw	r20, r6
    187a:	0e 94 13 07 	call	0xe26	; 0xe26 <pxPortInitialiseStack>
    187e:	f8 01       	movw	r30, r16
    1880:	91 83       	std	Z+1, r25	; 0x01
    1882:	80 83       	st	Z, r24
    1884:	e1 14       	cp	r14, r1
    1886:	f1 04       	cpc	r15, r1
    1888:	19 f0       	breq	.+6      	; 0x1890 <xTaskGenericCreate+0xe6>
    188a:	f7 01       	movw	r30, r14
    188c:	11 83       	std	Z+1, r17	; 0x01
    188e:	00 83       	st	Z, r16
    1890:	0f b6       	in	r0, 0x3f	; 63
    1892:	f8 94       	cli
    1894:	0f 92       	push	r0
    1896:	80 91 9e 06 	lds	r24, 0x069E
    189a:	8f 5f       	subi	r24, 0xFF	; 255
    189c:	80 93 9e 06 	sts	0x069E, r24
    18a0:	80 91 94 06 	lds	r24, 0x0694
    18a4:	90 91 95 06 	lds	r25, 0x0695
    18a8:	00 97       	sbiw	r24, 0x00	; 0
    18aa:	09 f0       	breq	.+2      	; 0x18ae <xTaskGenericCreate+0x104>
    18ac:	3f c0       	rjmp	.+126    	; 0x192c <xTaskGenericCreate+0x182>
    18ae:	10 93 95 06 	sts	0x0695, r17
    18b2:	00 93 94 06 	sts	0x0694, r16
    18b6:	80 91 9e 06 	lds	r24, 0x069E
    18ba:	81 30       	cpi	r24, 0x01	; 1
    18bc:	09 f0       	breq	.+2      	; 0x18c0 <xTaskGenericCreate+0x116>
    18be:	45 c0       	rjmp	.+138    	; 0x194a <xTaskGenericCreate+0x1a0>
    18c0:	c0 e0       	ldi	r28, 0x00	; 0
    18c2:	d0 e0       	ldi	r29, 0x00	; 0
    18c4:	ce 01       	movw	r24, r28
    18c6:	88 0f       	add	r24, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	88 0f       	add	r24, r24
    18cc:	99 1f       	adc	r25, r25
    18ce:	88 0f       	add	r24, r24
    18d0:	99 1f       	adc	r25, r25
    18d2:	8c 0f       	add	r24, r28
    18d4:	9d 1f       	adc	r25, r29
    18d6:	8a 55       	subi	r24, 0x5A	; 90
    18d8:	99 4f       	sbci	r25, 0xF9	; 249
    18da:	0e 94 30 04 	call	0x860	; 0x860 <vListInitialise>
    18de:	21 96       	adiw	r28, 0x01	; 1
    18e0:	c4 30       	cpi	r28, 0x04	; 4
    18e2:	d1 05       	cpc	r29, r1
    18e4:	79 f7       	brne	.-34     	; 0x18c4 <xTaskGenericCreate+0x11a>
    18e6:	ca ec       	ldi	r28, 0xCA	; 202
    18e8:	d6 e0       	ldi	r29, 0x06	; 6
    18ea:	ce 01       	movw	r24, r28
    18ec:	0e 94 30 04 	call	0x860	; 0x860 <vListInitialise>
    18f0:	0f 2e       	mov	r0, r31
    18f2:	f3 ed       	ldi	r31, 0xD3	; 211
    18f4:	ef 2e       	mov	r14, r31
    18f6:	f6 e0       	ldi	r31, 0x06	; 6
    18f8:	ff 2e       	mov	r15, r31
    18fa:	f0 2d       	mov	r31, r0
    18fc:	c7 01       	movw	r24, r14
    18fe:	0e 94 30 04 	call	0x860	; 0x860 <vListInitialise>
    1902:	8c ed       	ldi	r24, 0xDC	; 220
    1904:	96 e0       	ldi	r25, 0x06	; 6
    1906:	0e 94 30 04 	call	0x860	; 0x860 <vListInitialise>
    190a:	85 ee       	ldi	r24, 0xE5	; 229
    190c:	96 e0       	ldi	r25, 0x06	; 6
    190e:	0e 94 30 04 	call	0x860	; 0x860 <vListInitialise>
    1912:	8e ee       	ldi	r24, 0xEE	; 238
    1914:	96 e0       	ldi	r25, 0x06	; 6
    1916:	0e 94 30 04 	call	0x860	; 0x860 <vListInitialise>
    191a:	d0 93 a3 06 	sts	0x06A3, r29
    191e:	c0 93 a2 06 	sts	0x06A2, r28
    1922:	f0 92 a1 06 	sts	0x06A1, r15
    1926:	e0 92 a0 06 	sts	0x06A0, r14
    192a:	0f c0       	rjmp	.+30     	; 0x194a <xTaskGenericCreate+0x1a0>
    192c:	80 91 9a 06 	lds	r24, 0x069A
    1930:	88 23       	and	r24, r24
    1932:	59 f4       	brne	.+22     	; 0x194a <xTaskGenericCreate+0x1a0>
    1934:	e0 91 94 06 	lds	r30, 0x0694
    1938:	f0 91 95 06 	lds	r31, 0x0695
    193c:	86 89       	ldd	r24, Z+22	; 0x16
    193e:	b8 16       	cp	r11, r24
    1940:	20 f0       	brcs	.+8      	; 0x194a <xTaskGenericCreate+0x1a0>
    1942:	10 93 95 06 	sts	0x0695, r17
    1946:	00 93 94 06 	sts	0x0694, r16
    194a:	f8 01       	movw	r30, r16
    194c:	86 89       	ldd	r24, Z+22	; 0x16
    194e:	90 91 a4 06 	lds	r25, 0x06A4
    1952:	98 17       	cp	r25, r24
    1954:	10 f4       	brcc	.+4      	; 0x195a <xTaskGenericCreate+0x1b0>
    1956:	80 93 a4 06 	sts	0x06A4, r24
    195a:	90 91 a5 06 	lds	r25, 0x06A5
    195e:	9f 5f       	subi	r25, 0xFF	; 255
    1960:	90 93 a5 06 	sts	0x06A5, r25
    1964:	90 91 9b 06 	lds	r25, 0x069B
    1968:	98 17       	cp	r25, r24
    196a:	10 f4       	brcc	.+4      	; 0x1970 <xTaskGenericCreate+0x1c6>
    196c:	80 93 9b 06 	sts	0x069B, r24
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	9c 01       	movw	r18, r24
    1974:	22 0f       	add	r18, r18
    1976:	33 1f       	adc	r19, r19
    1978:	22 0f       	add	r18, r18
    197a:	33 1f       	adc	r19, r19
    197c:	22 0f       	add	r18, r18
    197e:	33 1f       	adc	r19, r19
    1980:	82 0f       	add	r24, r18
    1982:	93 1f       	adc	r25, r19
    1984:	8a 55       	subi	r24, 0x5A	; 90
    1986:	99 4f       	sbci	r25, 0xF9	; 249
    1988:	b4 01       	movw	r22, r8
    198a:	0e 94 42 04 	call	0x884	; 0x884 <vListInsertEnd>
    198e:	0f 90       	pop	r0
    1990:	0f be       	out	0x3f, r0	; 63
    1992:	80 91 9a 06 	lds	r24, 0x069A
    1996:	88 23       	and	r24, r24
    1998:	69 f0       	breq	.+26     	; 0x19b4 <xTaskGenericCreate+0x20a>
    199a:	e0 91 94 06 	lds	r30, 0x0694
    199e:	f0 91 95 06 	lds	r31, 0x0695
    19a2:	86 89       	ldd	r24, Z+22	; 0x16
    19a4:	8b 15       	cp	r24, r11
    19a6:	40 f4       	brcc	.+16     	; 0x19b8 <xTaskGenericCreate+0x20e>
    19a8:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <vPortYield>
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	05 c0       	rjmp	.+10     	; 0x19ba <xTaskGenericCreate+0x210>
    19b0:	8f ef       	ldi	r24, 0xFF	; 255
    19b2:	03 c0       	rjmp	.+6      	; 0x19ba <xTaskGenericCreate+0x210>
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	01 c0       	rjmp	.+2      	; 0x19ba <xTaskGenericCreate+0x210>
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	df 91       	pop	r29
    19bc:	cf 91       	pop	r28
    19be:	1f 91       	pop	r17
    19c0:	0f 91       	pop	r16
    19c2:	ff 90       	pop	r15
    19c4:	ef 90       	pop	r14
    19c6:	df 90       	pop	r13
    19c8:	cf 90       	pop	r12
    19ca:	bf 90       	pop	r11
    19cc:	9f 90       	pop	r9
    19ce:	8f 90       	pop	r8
    19d0:	7f 90       	pop	r7
    19d2:	6f 90       	pop	r6
    19d4:	5f 90       	pop	r5
    19d6:	4f 90       	pop	r4
    19d8:	08 95       	ret
    19da:	fc 01       	movw	r30, r24
    19dc:	d0 8e       	std	Z+24, r13	; 0x18
    19de:	c7 8a       	std	Z+23, r12	; 0x17
    19e0:	12 cf       	rjmp	.-476    	; 0x1806 <xTaskGenericCreate+0x5c>

000019e2 <vTaskDelete>:
    19e2:	ef 92       	push	r14
    19e4:	ff 92       	push	r15
    19e6:	0f 93       	push	r16
    19e8:	1f 93       	push	r17
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	7c 01       	movw	r14, r24
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	f8 94       	cli
    19f4:	0f 92       	push	r0
    19f6:	80 91 94 06 	lds	r24, 0x0694
    19fa:	90 91 95 06 	lds	r25, 0x0695
    19fe:	e8 16       	cp	r14, r24
    1a00:	f9 06       	cpc	r15, r25
    1a02:	21 f0       	breq	.+8      	; 0x1a0c <vTaskDelete+0x2a>
    1a04:	e1 14       	cp	r14, r1
    1a06:	f1 04       	cpc	r15, r1
    1a08:	41 f4       	brne	.+16     	; 0x1a1a <vTaskDelete+0x38>
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <vTaskDelete+0x2e>
    1a0c:	ee 24       	eor	r14, r14
    1a0e:	ff 24       	eor	r15, r15
    1a10:	c0 91 94 06 	lds	r28, 0x0694
    1a14:	d0 91 95 06 	lds	r29, 0x0695
    1a18:	01 c0       	rjmp	.+2      	; 0x1a1c <vTaskDelete+0x3a>
    1a1a:	e7 01       	movw	r28, r14
    1a1c:	8e 01       	movw	r16, r28
    1a1e:	0e 5f       	subi	r16, 0xFE	; 254
    1a20:	1f 4f       	sbci	r17, 0xFF	; 255
    1a22:	c8 01       	movw	r24, r16
    1a24:	0e 94 a8 04 	call	0x950	; 0x950 <uxListRemove>
    1a28:	8c 89       	ldd	r24, Y+20	; 0x14
    1a2a:	9d 89       	ldd	r25, Y+21	; 0x15
    1a2c:	00 97       	sbiw	r24, 0x00	; 0
    1a2e:	21 f0       	breq	.+8      	; 0x1a38 <vTaskDelete+0x56>
    1a30:	ce 01       	movw	r24, r28
    1a32:	0c 96       	adiw	r24, 0x0c	; 12
    1a34:	0e 94 a8 04 	call	0x950	; 0x950 <uxListRemove>
    1a38:	85 ee       	ldi	r24, 0xE5	; 229
    1a3a:	96 e0       	ldi	r25, 0x06	; 6
    1a3c:	b8 01       	movw	r22, r16
    1a3e:	0e 94 42 04 	call	0x884	; 0x884 <vListInsertEnd>
    1a42:	80 91 9f 06 	lds	r24, 0x069F
    1a46:	8f 5f       	subi	r24, 0xFF	; 255
    1a48:	80 93 9f 06 	sts	0x069F, r24
    1a4c:	80 91 a5 06 	lds	r24, 0x06A5
    1a50:	8f 5f       	subi	r24, 0xFF	; 255
    1a52:	80 93 a5 06 	sts	0x06A5, r24
    1a56:	0f 90       	pop	r0
    1a58:	0f be       	out	0x3f, r0	; 63
    1a5a:	80 91 9a 06 	lds	r24, 0x069A
    1a5e:	88 23       	and	r24, r24
    1a60:	29 f0       	breq	.+10     	; 0x1a6c <vTaskDelete+0x8a>
    1a62:	e1 14       	cp	r14, r1
    1a64:	f1 04       	cpc	r15, r1
    1a66:	11 f4       	brne	.+4      	; 0x1a6c <vTaskDelete+0x8a>
    1a68:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <vPortYield>
    1a6c:	df 91       	pop	r29
    1a6e:	cf 91       	pop	r28
    1a70:	1f 91       	pop	r17
    1a72:	0f 91       	pop	r16
    1a74:	ff 90       	pop	r15
    1a76:	ef 90       	pop	r14
    1a78:	08 95       	ret

00001a7a <xTaskIsTaskSuspended>:
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	82 85       	ldd	r24, Z+10	; 0x0a
    1a7e:	93 85       	ldd	r25, Z+11	; 0x0b
    1a80:	26 e0       	ldi	r18, 0x06	; 6
    1a82:	8e 3e       	cpi	r24, 0xEE	; 238
    1a84:	92 07       	cpc	r25, r18
    1a86:	61 f4       	brne	.+24     	; 0x1aa0 <xTaskIsTaskSuspended+0x26>
    1a88:	24 89       	ldd	r18, Z+20	; 0x14
    1a8a:	35 89       	ldd	r19, Z+21	; 0x15
    1a8c:	86 e0       	ldi	r24, 0x06	; 6
    1a8e:	2c 3d       	cpi	r18, 0xDC	; 220
    1a90:	38 07       	cpc	r19, r24
    1a92:	41 f0       	breq	.+16     	; 0x1aa4 <xTaskIsTaskSuspended+0x2a>
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	21 15       	cp	r18, r1
    1a98:	31 05       	cpc	r19, r1
    1a9a:	29 f0       	breq	.+10     	; 0x1aa6 <xTaskIsTaskSuspended+0x2c>
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	08 95       	ret
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	08 95       	ret
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	08 95       	ret

00001aa8 <vTaskResume>:
    1aa8:	0f 93       	push	r16
    1aaa:	1f 93       	push	r17
    1aac:	cf 93       	push	r28
    1aae:	df 93       	push	r29
    1ab0:	ec 01       	movw	r28, r24
    1ab2:	00 97       	sbiw	r24, 0x00	; 0
    1ab4:	b9 f1       	breq	.+110    	; 0x1b24 <vTaskResume+0x7c>
    1ab6:	80 91 94 06 	lds	r24, 0x0694
    1aba:	90 91 95 06 	lds	r25, 0x0695
    1abe:	c8 17       	cp	r28, r24
    1ac0:	d9 07       	cpc	r29, r25
    1ac2:	81 f1       	breq	.+96     	; 0x1b24 <vTaskResume+0x7c>
    1ac4:	0f b6       	in	r0, 0x3f	; 63
    1ac6:	f8 94       	cli
    1ac8:	0f 92       	push	r0
    1aca:	ce 01       	movw	r24, r28
    1acc:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <xTaskIsTaskSuspended>
    1ad0:	81 30       	cpi	r24, 0x01	; 1
    1ad2:	31 f5       	brne	.+76     	; 0x1b20 <vTaskResume+0x78>
    1ad4:	8e 01       	movw	r16, r28
    1ad6:	0e 5f       	subi	r16, 0xFE	; 254
    1ad8:	1f 4f       	sbci	r17, 0xFF	; 255
    1ada:	c8 01       	movw	r24, r16
    1adc:	0e 94 a8 04 	call	0x950	; 0x950 <uxListRemove>
    1ae0:	8e 89       	ldd	r24, Y+22	; 0x16
    1ae2:	90 91 9b 06 	lds	r25, 0x069B
    1ae6:	98 17       	cp	r25, r24
    1ae8:	10 f4       	brcc	.+4      	; 0x1aee <vTaskResume+0x46>
    1aea:	80 93 9b 06 	sts	0x069B, r24
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	9c 01       	movw	r18, r24
    1af2:	22 0f       	add	r18, r18
    1af4:	33 1f       	adc	r19, r19
    1af6:	22 0f       	add	r18, r18
    1af8:	33 1f       	adc	r19, r19
    1afa:	22 0f       	add	r18, r18
    1afc:	33 1f       	adc	r19, r19
    1afe:	82 0f       	add	r24, r18
    1b00:	93 1f       	adc	r25, r19
    1b02:	8a 55       	subi	r24, 0x5A	; 90
    1b04:	99 4f       	sbci	r25, 0xF9	; 249
    1b06:	b8 01       	movw	r22, r16
    1b08:	0e 94 42 04 	call	0x884	; 0x884 <vListInsertEnd>
    1b0c:	e0 91 94 06 	lds	r30, 0x0694
    1b10:	f0 91 95 06 	lds	r31, 0x0695
    1b14:	9e 89       	ldd	r25, Y+22	; 0x16
    1b16:	86 89       	ldd	r24, Z+22	; 0x16
    1b18:	98 17       	cp	r25, r24
    1b1a:	10 f0       	brcs	.+4      	; 0x1b20 <vTaskResume+0x78>
    1b1c:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <vPortYield>
    1b20:	0f 90       	pop	r0
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	df 91       	pop	r29
    1b26:	cf 91       	pop	r28
    1b28:	1f 91       	pop	r17
    1b2a:	0f 91       	pop	r16
    1b2c:	08 95       	ret

00001b2e <xTaskResumeFromISR>:
    1b2e:	ef 92       	push	r14
    1b30:	ff 92       	push	r15
    1b32:	1f 93       	push	r17
    1b34:	cf 93       	push	r28
    1b36:	df 93       	push	r29
    1b38:	ec 01       	movw	r28, r24
    1b3a:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <xTaskIsTaskSuspended>
    1b3e:	81 30       	cpi	r24, 0x01	; 1
    1b40:	b9 f5       	brne	.+110    	; 0x1bb0 <xTaskResumeFromISR+0x82>
    1b42:	80 91 99 06 	lds	r24, 0x0699
    1b46:	88 23       	and	r24, r24
    1b48:	51 f5       	brne	.+84     	; 0x1b9e <xTaskResumeFromISR+0x70>
    1b4a:	e0 91 94 06 	lds	r30, 0x0694
    1b4e:	f0 91 95 06 	lds	r31, 0x0695
    1b52:	11 e0       	ldi	r17, 0x01	; 1
    1b54:	9e 89       	ldd	r25, Y+22	; 0x16
    1b56:	86 89       	ldd	r24, Z+22	; 0x16
    1b58:	98 17       	cp	r25, r24
    1b5a:	08 f4       	brcc	.+2      	; 0x1b5e <xTaskResumeFromISR+0x30>
    1b5c:	10 e0       	ldi	r17, 0x00	; 0
    1b5e:	ee 24       	eor	r14, r14
    1b60:	ff 24       	eor	r15, r15
    1b62:	68 94       	set
    1b64:	e1 f8       	bld	r14, 1
    1b66:	ec 0e       	add	r14, r28
    1b68:	fd 1e       	adc	r15, r29
    1b6a:	c7 01       	movw	r24, r14
    1b6c:	0e 94 a8 04 	call	0x950	; 0x950 <uxListRemove>
    1b70:	8e 89       	ldd	r24, Y+22	; 0x16
    1b72:	90 91 9b 06 	lds	r25, 0x069B
    1b76:	98 17       	cp	r25, r24
    1b78:	10 f4       	brcc	.+4      	; 0x1b7e <xTaskResumeFromISR+0x50>
    1b7a:	80 93 9b 06 	sts	0x069B, r24
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	9c 01       	movw	r18, r24
    1b82:	22 0f       	add	r18, r18
    1b84:	33 1f       	adc	r19, r19
    1b86:	22 0f       	add	r18, r18
    1b88:	33 1f       	adc	r19, r19
    1b8a:	22 0f       	add	r18, r18
    1b8c:	33 1f       	adc	r19, r19
    1b8e:	82 0f       	add	r24, r18
    1b90:	93 1f       	adc	r25, r19
    1b92:	8a 55       	subi	r24, 0x5A	; 90
    1b94:	99 4f       	sbci	r25, 0xF9	; 249
    1b96:	b7 01       	movw	r22, r14
    1b98:	0e 94 42 04 	call	0x884	; 0x884 <vListInsertEnd>
    1b9c:	0a c0       	rjmp	.+20     	; 0x1bb2 <xTaskResumeFromISR+0x84>
    1b9e:	be 01       	movw	r22, r28
    1ba0:	64 5f       	subi	r22, 0xF4	; 244
    1ba2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba4:	8c ed       	ldi	r24, 0xDC	; 220
    1ba6:	96 e0       	ldi	r25, 0x06	; 6
    1ba8:	0e 94 42 04 	call	0x884	; 0x884 <vListInsertEnd>
    1bac:	10 e0       	ldi	r17, 0x00	; 0
    1bae:	01 c0       	rjmp	.+2      	; 0x1bb2 <xTaskResumeFromISR+0x84>
    1bb0:	10 e0       	ldi	r17, 0x00	; 0
    1bb2:	81 2f       	mov	r24, r17
    1bb4:	df 91       	pop	r29
    1bb6:	cf 91       	pop	r28
    1bb8:	1f 91       	pop	r17
    1bba:	ff 90       	pop	r15
    1bbc:	ef 90       	pop	r14
    1bbe:	08 95       	ret

00001bc0 <vTaskStartScheduler>:
    1bc0:	af 92       	push	r10
    1bc2:	bf 92       	push	r11
    1bc4:	cf 92       	push	r12
    1bc6:	df 92       	push	r13
    1bc8:	ef 92       	push	r14
    1bca:	ff 92       	push	r15
    1bcc:	0f 93       	push	r16
    1bce:	8f e7       	ldi	r24, 0x7F	; 127
    1bd0:	9f e0       	ldi	r25, 0x0F	; 15
    1bd2:	63 e7       	ldi	r22, 0x73	; 115
    1bd4:	70 e0       	ldi	r23, 0x00	; 0
    1bd6:	4a e5       	ldi	r20, 0x5A	; 90
    1bd8:	50 e0       	ldi	r21, 0x00	; 0
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	00 e0       	ldi	r16, 0x00	; 0
    1be0:	ee 24       	eor	r14, r14
    1be2:	ff 24       	eor	r15, r15
    1be4:	cc 24       	eor	r12, r12
    1be6:	dd 24       	eor	r13, r13
    1be8:	aa 24       	eor	r10, r10
    1bea:	bb 24       	eor	r11, r11
    1bec:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <xTaskGenericCreate>
    1bf0:	81 30       	cpi	r24, 0x01	; 1
    1bf2:	49 f4       	brne	.+18     	; 0x1c06 <vTaskStartScheduler+0x46>
    1bf4:	f8 94       	cli
    1bf6:	80 93 9a 06 	sts	0x069A, r24
    1bfa:	10 92 9d 06 	sts	0x069D, r1
    1bfe:	10 92 9c 06 	sts	0x069C, r1
    1c02:	0e 94 a3 07 	call	0xf46	; 0xf46 <xPortStartScheduler>
    1c06:	0f 91       	pop	r16
    1c08:	ff 90       	pop	r15
    1c0a:	ef 90       	pop	r14
    1c0c:	df 90       	pop	r13
    1c0e:	cf 90       	pop	r12
    1c10:	bf 90       	pop	r11
    1c12:	af 90       	pop	r10
    1c14:	08 95       	ret

00001c16 <vTaskEndScheduler>:
    1c16:	f8 94       	cli
    1c18:	10 92 9a 06 	sts	0x069A, r1
    1c1c:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <vPortEndScheduler>
    1c20:	08 95       	ret

00001c22 <vTaskSuspendAll>:
    1c22:	80 91 99 06 	lds	r24, 0x0699
    1c26:	8f 5f       	subi	r24, 0xFF	; 255
    1c28:	80 93 99 06 	sts	0x0699, r24
    1c2c:	08 95       	ret

00001c2e <xTaskGetTickCount>:
    1c2e:	0f b6       	in	r0, 0x3f	; 63
    1c30:	f8 94       	cli
    1c32:	0f 92       	push	r0
    1c34:	80 91 9c 06 	lds	r24, 0x069C
    1c38:	90 91 9d 06 	lds	r25, 0x069D
    1c3c:	0f 90       	pop	r0
    1c3e:	0f be       	out	0x3f, r0	; 63
    1c40:	08 95       	ret

00001c42 <xTaskGetTickCountFromISR>:
    1c42:	80 91 9c 06 	lds	r24, 0x069C
    1c46:	90 91 9d 06 	lds	r25, 0x069D
    1c4a:	08 95       	ret

00001c4c <uxTaskGetNumberOfTasks>:
    1c4c:	80 91 9e 06 	lds	r24, 0x069E
    1c50:	08 95       	ret

00001c52 <vTaskIncrementTick>:
    1c52:	0f 93       	push	r16
    1c54:	1f 93       	push	r17
    1c56:	cf 93       	push	r28
    1c58:	df 93       	push	r29
    1c5a:	80 91 99 06 	lds	r24, 0x0699
    1c5e:	88 23       	and	r24, r24
    1c60:	09 f0       	breq	.+2      	; 0x1c64 <vTaskIncrementTick+0x12>
    1c62:	b3 c0       	rjmp	.+358    	; 0x1dca <vTaskIncrementTick+0x178>
    1c64:	80 91 9c 06 	lds	r24, 0x069C
    1c68:	90 91 9d 06 	lds	r25, 0x069D
    1c6c:	01 96       	adiw	r24, 0x01	; 1
    1c6e:	90 93 9d 06 	sts	0x069D, r25
    1c72:	80 93 9c 06 	sts	0x069C, r24
    1c76:	80 91 9c 06 	lds	r24, 0x069C
    1c7a:	90 91 9d 06 	lds	r25, 0x069D
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	99 f5       	brne	.+102    	; 0x1ce8 <vTaskIncrementTick+0x96>
    1c82:	80 91 a2 06 	lds	r24, 0x06A2
    1c86:	90 91 a3 06 	lds	r25, 0x06A3
    1c8a:	20 91 a0 06 	lds	r18, 0x06A0
    1c8e:	30 91 a1 06 	lds	r19, 0x06A1
    1c92:	30 93 a3 06 	sts	0x06A3, r19
    1c96:	20 93 a2 06 	sts	0x06A2, r18
    1c9a:	90 93 a1 06 	sts	0x06A1, r25
    1c9e:	80 93 a0 06 	sts	0x06A0, r24
    1ca2:	80 91 96 06 	lds	r24, 0x0696
    1ca6:	8f 5f       	subi	r24, 0xFF	; 255
    1ca8:	80 93 96 06 	sts	0x0696, r24
    1cac:	e0 91 a2 06 	lds	r30, 0x06A2
    1cb0:	f0 91 a3 06 	lds	r31, 0x06A3
    1cb4:	80 81       	ld	r24, Z
    1cb6:	88 23       	and	r24, r24
    1cb8:	39 f4       	brne	.+14     	; 0x1cc8 <vTaskIncrementTick+0x76>
    1cba:	8f ef       	ldi	r24, 0xFF	; 255
    1cbc:	9f ef       	ldi	r25, 0xFF	; 255
    1cbe:	90 93 79 00 	sts	0x0079, r25
    1cc2:	80 93 78 00 	sts	0x0078, r24
    1cc6:	10 c0       	rjmp	.+32     	; 0x1ce8 <vTaskIncrementTick+0x96>
    1cc8:	e0 91 a2 06 	lds	r30, 0x06A2
    1ccc:	f0 91 a3 06 	lds	r31, 0x06A3
    1cd0:	05 80       	ldd	r0, Z+5	; 0x05
    1cd2:	f6 81       	ldd	r31, Z+6	; 0x06
    1cd4:	e0 2d       	mov	r30, r0
    1cd6:	06 80       	ldd	r0, Z+6	; 0x06
    1cd8:	f7 81       	ldd	r31, Z+7	; 0x07
    1cda:	e0 2d       	mov	r30, r0
    1cdc:	82 81       	ldd	r24, Z+2	; 0x02
    1cde:	93 81       	ldd	r25, Z+3	; 0x03
    1ce0:	90 93 79 00 	sts	0x0079, r25
    1ce4:	80 93 78 00 	sts	0x0078, r24
    1ce8:	20 91 9c 06 	lds	r18, 0x069C
    1cec:	30 91 9d 06 	lds	r19, 0x069D
    1cf0:	80 91 78 00 	lds	r24, 0x0078
    1cf4:	90 91 79 00 	lds	r25, 0x0079
    1cf8:	28 17       	cp	r18, r24
    1cfa:	39 07       	cpc	r19, r25
    1cfc:	08 f4       	brcc	.+2      	; 0x1d00 <vTaskIncrementTick+0xae>
    1cfe:	6a c0       	rjmp	.+212    	; 0x1dd4 <vTaskIncrementTick+0x182>
    1d00:	e0 91 a2 06 	lds	r30, 0x06A2
    1d04:	f0 91 a3 06 	lds	r31, 0x06A3
    1d08:	80 81       	ld	r24, Z
    1d0a:	88 23       	and	r24, r24
    1d0c:	99 f0       	breq	.+38     	; 0x1d34 <vTaskIncrementTick+0xe2>
    1d0e:	e0 91 a2 06 	lds	r30, 0x06A2
    1d12:	f0 91 a3 06 	lds	r31, 0x06A3
    1d16:	05 80       	ldd	r0, Z+5	; 0x05
    1d18:	f6 81       	ldd	r31, Z+6	; 0x06
    1d1a:	e0 2d       	mov	r30, r0
    1d1c:	c6 81       	ldd	r28, Z+6	; 0x06
    1d1e:	d7 81       	ldd	r29, Z+7	; 0x07
    1d20:	8a 81       	ldd	r24, Y+2	; 0x02
    1d22:	9b 81       	ldd	r25, Y+3	; 0x03
    1d24:	20 91 9c 06 	lds	r18, 0x069C
    1d28:	30 91 9d 06 	lds	r19, 0x069D
    1d2c:	28 17       	cp	r18, r24
    1d2e:	39 07       	cpc	r19, r25
    1d30:	f8 f4       	brcc	.+62     	; 0x1d70 <vTaskIncrementTick+0x11e>
    1d32:	19 c0       	rjmp	.+50     	; 0x1d66 <vTaskIncrementTick+0x114>
    1d34:	8f ef       	ldi	r24, 0xFF	; 255
    1d36:	9f ef       	ldi	r25, 0xFF	; 255
    1d38:	90 93 79 00 	sts	0x0079, r25
    1d3c:	80 93 78 00 	sts	0x0078, r24
    1d40:	49 c0       	rjmp	.+146    	; 0x1dd4 <vTaskIncrementTick+0x182>
    1d42:	e0 91 a2 06 	lds	r30, 0x06A2
    1d46:	f0 91 a3 06 	lds	r31, 0x06A3
    1d4a:	05 80       	ldd	r0, Z+5	; 0x05
    1d4c:	f6 81       	ldd	r31, Z+6	; 0x06
    1d4e:	e0 2d       	mov	r30, r0
    1d50:	c6 81       	ldd	r28, Z+6	; 0x06
    1d52:	d7 81       	ldd	r29, Z+7	; 0x07
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	9b 81       	ldd	r25, Y+3	; 0x03
    1d58:	20 91 9c 06 	lds	r18, 0x069C
    1d5c:	30 91 9d 06 	lds	r19, 0x069D
    1d60:	28 17       	cp	r18, r24
    1d62:	39 07       	cpc	r19, r25
    1d64:	28 f4       	brcc	.+10     	; 0x1d70 <vTaskIncrementTick+0x11e>
    1d66:	90 93 79 00 	sts	0x0079, r25
    1d6a:	80 93 78 00 	sts	0x0078, r24
    1d6e:	32 c0       	rjmp	.+100    	; 0x1dd4 <vTaskIncrementTick+0x182>
    1d70:	8e 01       	movw	r16, r28
    1d72:	0e 5f       	subi	r16, 0xFE	; 254
    1d74:	1f 4f       	sbci	r17, 0xFF	; 255
    1d76:	c8 01       	movw	r24, r16
    1d78:	0e 94 a8 04 	call	0x950	; 0x950 <uxListRemove>
    1d7c:	8c 89       	ldd	r24, Y+20	; 0x14
    1d7e:	9d 89       	ldd	r25, Y+21	; 0x15
    1d80:	00 97       	sbiw	r24, 0x00	; 0
    1d82:	21 f0       	breq	.+8      	; 0x1d8c <vTaskIncrementTick+0x13a>
    1d84:	ce 01       	movw	r24, r28
    1d86:	0c 96       	adiw	r24, 0x0c	; 12
    1d88:	0e 94 a8 04 	call	0x950	; 0x950 <uxListRemove>
    1d8c:	8e 89       	ldd	r24, Y+22	; 0x16
    1d8e:	90 91 9b 06 	lds	r25, 0x069B
    1d92:	98 17       	cp	r25, r24
    1d94:	10 f4       	brcc	.+4      	; 0x1d9a <vTaskIncrementTick+0x148>
    1d96:	80 93 9b 06 	sts	0x069B, r24
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	9c 01       	movw	r18, r24
    1d9e:	22 0f       	add	r18, r18
    1da0:	33 1f       	adc	r19, r19
    1da2:	22 0f       	add	r18, r18
    1da4:	33 1f       	adc	r19, r19
    1da6:	22 0f       	add	r18, r18
    1da8:	33 1f       	adc	r19, r19
    1daa:	82 0f       	add	r24, r18
    1dac:	93 1f       	adc	r25, r19
    1dae:	8a 55       	subi	r24, 0x5A	; 90
    1db0:	99 4f       	sbci	r25, 0xF9	; 249
    1db2:	b8 01       	movw	r22, r16
    1db4:	0e 94 42 04 	call	0x884	; 0x884 <vListInsertEnd>
    1db8:	e0 91 a2 06 	lds	r30, 0x06A2
    1dbc:	f0 91 a3 06 	lds	r31, 0x06A3
    1dc0:	80 81       	ld	r24, Z
    1dc2:	88 23       	and	r24, r24
    1dc4:	09 f0       	breq	.+2      	; 0x1dc8 <vTaskIncrementTick+0x176>
    1dc6:	bd cf       	rjmp	.-134    	; 0x1d42 <vTaskIncrementTick+0xf0>
    1dc8:	b5 cf       	rjmp	.-150    	; 0x1d34 <vTaskIncrementTick+0xe2>
    1dca:	80 91 98 06 	lds	r24, 0x0698
    1dce:	8f 5f       	subi	r24, 0xFF	; 255
    1dd0:	80 93 98 06 	sts	0x0698, r24
    1dd4:	df 91       	pop	r29
    1dd6:	cf 91       	pop	r28
    1dd8:	1f 91       	pop	r17
    1dda:	0f 91       	pop	r16
    1ddc:	08 95       	ret

00001dde <xTaskResumeAll>:
    1dde:	af 92       	push	r10
    1de0:	bf 92       	push	r11
    1de2:	cf 92       	push	r12
    1de4:	df 92       	push	r13
    1de6:	ef 92       	push	r14
    1de8:	ff 92       	push	r15
    1dea:	0f 93       	push	r16
    1dec:	1f 93       	push	r17
    1dee:	cf 93       	push	r28
    1df0:	df 93       	push	r29
    1df2:	0f b6       	in	r0, 0x3f	; 63
    1df4:	f8 94       	cli
    1df6:	0f 92       	push	r0
    1df8:	80 91 99 06 	lds	r24, 0x0699
    1dfc:	81 50       	subi	r24, 0x01	; 1
    1dfe:	80 93 99 06 	sts	0x0699, r24
    1e02:	80 91 99 06 	lds	r24, 0x0699
    1e06:	88 23       	and	r24, r24
    1e08:	09 f0       	breq	.+2      	; 0x1e0c <xTaskResumeAll+0x2e>
    1e0a:	69 c0       	rjmp	.+210    	; 0x1ede <xTaskResumeAll+0x100>
    1e0c:	80 91 9e 06 	lds	r24, 0x069E
    1e10:	88 23       	and	r24, r24
    1e12:	81 f5       	brne	.+96     	; 0x1e74 <xTaskResumeAll+0x96>
    1e14:	67 c0       	rjmp	.+206    	; 0x1ee4 <xTaskResumeAll+0x106>
    1e16:	d6 01       	movw	r26, r12
    1e18:	ed 91       	ld	r30, X+
    1e1a:	fc 91       	ld	r31, X
    1e1c:	c6 81       	ldd	r28, Z+6	; 0x06
    1e1e:	d7 81       	ldd	r29, Z+7	; 0x07
    1e20:	ce 01       	movw	r24, r28
    1e22:	0c 96       	adiw	r24, 0x0c	; 12
    1e24:	0e 94 a8 04 	call	0x950	; 0x950 <uxListRemove>
    1e28:	8e 01       	movw	r16, r28
    1e2a:	0e 5f       	subi	r16, 0xFE	; 254
    1e2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e2e:	c8 01       	movw	r24, r16
    1e30:	0e 94 a8 04 	call	0x950	; 0x950 <uxListRemove>
    1e34:	8e 89       	ldd	r24, Y+22	; 0x16
    1e36:	90 91 9b 06 	lds	r25, 0x069B
    1e3a:	98 17       	cp	r25, r24
    1e3c:	10 f4       	brcc	.+4      	; 0x1e42 <xTaskResumeAll+0x64>
    1e3e:	80 93 9b 06 	sts	0x069B, r24
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	9c 01       	movw	r18, r24
    1e46:	22 0f       	add	r18, r18
    1e48:	33 1f       	adc	r19, r19
    1e4a:	22 0f       	add	r18, r18
    1e4c:	33 1f       	adc	r19, r19
    1e4e:	22 0f       	add	r18, r18
    1e50:	33 1f       	adc	r19, r19
    1e52:	82 0f       	add	r24, r18
    1e54:	93 1f       	adc	r25, r19
    1e56:	8a 55       	subi	r24, 0x5A	; 90
    1e58:	99 4f       	sbci	r25, 0xF9	; 249
    1e5a:	b8 01       	movw	r22, r16
    1e5c:	0e 94 42 04 	call	0x884	; 0x884 <vListInsertEnd>
    1e60:	e0 91 94 06 	lds	r30, 0x0694
    1e64:	f0 91 95 06 	lds	r31, 0x0695
    1e68:	9e 89       	ldd	r25, Y+22	; 0x16
    1e6a:	86 89       	ldd	r24, Z+22	; 0x16
    1e6c:	98 17       	cp	r25, r24
    1e6e:	88 f0       	brcs	.+34     	; 0x1e92 <xTaskResumeAll+0xb4>
    1e70:	ba 2c       	mov	r11, r10
    1e72:	0f c0       	rjmp	.+30     	; 0x1e92 <xTaskResumeAll+0xb4>
    1e74:	bb 24       	eor	r11, r11
    1e76:	0f 2e       	mov	r0, r31
    1e78:	fc ed       	ldi	r31, 0xDC	; 220
    1e7a:	ef 2e       	mov	r14, r31
    1e7c:	f6 e0       	ldi	r31, 0x06	; 6
    1e7e:	ff 2e       	mov	r15, r31
    1e80:	f0 2d       	mov	r31, r0
    1e82:	0f 2e       	mov	r0, r31
    1e84:	f1 ee       	ldi	r31, 0xE1	; 225
    1e86:	cf 2e       	mov	r12, r31
    1e88:	f6 e0       	ldi	r31, 0x06	; 6
    1e8a:	df 2e       	mov	r13, r31
    1e8c:	f0 2d       	mov	r31, r0
    1e8e:	aa 24       	eor	r10, r10
    1e90:	a3 94       	inc	r10
    1e92:	f7 01       	movw	r30, r14
    1e94:	80 81       	ld	r24, Z
    1e96:	88 23       	and	r24, r24
    1e98:	09 f0       	breq	.+2      	; 0x1e9c <xTaskResumeAll+0xbe>
    1e9a:	bd cf       	rjmp	.-134    	; 0x1e16 <xTaskResumeAll+0x38>
    1e9c:	80 91 98 06 	lds	r24, 0x0698
    1ea0:	88 23       	and	r24, r24
    1ea2:	81 f0       	breq	.+32     	; 0x1ec4 <xTaskResumeAll+0xe6>
    1ea4:	80 91 98 06 	lds	r24, 0x0698
    1ea8:	88 23       	and	r24, r24
    1eaa:	99 f0       	breq	.+38     	; 0x1ed2 <xTaskResumeAll+0xf4>
    1eac:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <vTaskIncrementTick>
    1eb0:	80 91 98 06 	lds	r24, 0x0698
    1eb4:	81 50       	subi	r24, 0x01	; 1
    1eb6:	80 93 98 06 	sts	0x0698, r24
    1eba:	80 91 98 06 	lds	r24, 0x0698
    1ebe:	88 23       	and	r24, r24
    1ec0:	a9 f7       	brne	.-22     	; 0x1eac <xTaskResumeAll+0xce>
    1ec2:	07 c0       	rjmp	.+14     	; 0x1ed2 <xTaskResumeAll+0xf4>
    1ec4:	f1 e0       	ldi	r31, 0x01	; 1
    1ec6:	bf 16       	cp	r11, r31
    1ec8:	21 f0       	breq	.+8      	; 0x1ed2 <xTaskResumeAll+0xf4>
    1eca:	80 91 97 06 	lds	r24, 0x0697
    1ece:	81 30       	cpi	r24, 0x01	; 1
    1ed0:	41 f4       	brne	.+16     	; 0x1ee2 <xTaskResumeAll+0x104>
    1ed2:	10 92 97 06 	sts	0x0697, r1
    1ed6:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <vPortYield>
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	03 c0       	rjmp	.+6      	; 0x1ee4 <xTaskResumeAll+0x106>
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	01 c0       	rjmp	.+2      	; 0x1ee4 <xTaskResumeAll+0x106>
    1ee2:	80 e0       	ldi	r24, 0x00	; 0
    1ee4:	0f 90       	pop	r0
    1ee6:	0f be       	out	0x3f, r0	; 63
    1ee8:	df 91       	pop	r29
    1eea:	cf 91       	pop	r28
    1eec:	1f 91       	pop	r17
    1eee:	0f 91       	pop	r16
    1ef0:	ff 90       	pop	r15
    1ef2:	ef 90       	pop	r14
    1ef4:	df 90       	pop	r13
    1ef6:	cf 90       	pop	r12
    1ef8:	bf 90       	pop	r11
    1efa:	af 90       	pop	r10
    1efc:	08 95       	ret

00001efe <prvIdleTask>:
    1efe:	05 ee       	ldi	r16, 0xE5	; 229
    1f00:	16 e0       	ldi	r17, 0x06	; 6
    1f02:	0f 2e       	mov	r0, r31
    1f04:	fa ee       	ldi	r31, 0xEA	; 234
    1f06:	ef 2e       	mov	r14, r31
    1f08:	f6 e0       	ldi	r31, 0x06	; 6
    1f0a:	ff 2e       	mov	r15, r31
    1f0c:	f0 2d       	mov	r31, r0
    1f0e:	0f 2e       	mov	r0, r31
    1f10:	f6 ea       	ldi	r31, 0xA6	; 166
    1f12:	cf 2e       	mov	r12, r31
    1f14:	f6 e0       	ldi	r31, 0x06	; 6
    1f16:	df 2e       	mov	r13, r31
    1f18:	f0 2d       	mov	r31, r0
    1f1a:	27 c0       	rjmp	.+78     	; 0x1f6a <prvIdleTask+0x6c>
    1f1c:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <vTaskSuspendAll>
    1f20:	d8 01       	movw	r26, r16
    1f22:	cc 91       	ld	r28, X
    1f24:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <xTaskResumeAll>
    1f28:	cc 23       	and	r28, r28
    1f2a:	f9 f0       	breq	.+62     	; 0x1f6a <prvIdleTask+0x6c>
    1f2c:	0f b6       	in	r0, 0x3f	; 63
    1f2e:	f8 94       	cli
    1f30:	0f 92       	push	r0
    1f32:	d7 01       	movw	r26, r14
    1f34:	ed 91       	ld	r30, X+
    1f36:	fc 91       	ld	r31, X
    1f38:	c6 81       	ldd	r28, Z+6	; 0x06
    1f3a:	d7 81       	ldd	r29, Z+7	; 0x07
    1f3c:	ce 01       	movw	r24, r28
    1f3e:	02 96       	adiw	r24, 0x02	; 2
    1f40:	0e 94 a8 04 	call	0x950	; 0x950 <uxListRemove>
    1f44:	80 91 9e 06 	lds	r24, 0x069E
    1f48:	81 50       	subi	r24, 0x01	; 1
    1f4a:	80 93 9e 06 	sts	0x069E, r24
    1f4e:	80 91 9f 06 	lds	r24, 0x069F
    1f52:	81 50       	subi	r24, 0x01	; 1
    1f54:	80 93 9f 06 	sts	0x069F, r24
    1f58:	0f 90       	pop	r0
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f5e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f60:	0e 94 21 04 	call	0x842	; 0x842 <vPortFree>
    1f64:	ce 01       	movw	r24, r28
    1f66:	0e 94 21 04 	call	0x842	; 0x842 <vPortFree>
    1f6a:	80 91 9f 06 	lds	r24, 0x069F
    1f6e:	88 23       	and	r24, r24
    1f70:	a9 f6       	brne	.-86     	; 0x1f1c <prvIdleTask+0x1e>
    1f72:	f6 01       	movw	r30, r12
    1f74:	80 81       	ld	r24, Z
    1f76:	82 30       	cpi	r24, 0x02	; 2
    1f78:	c0 f3       	brcs	.-16     	; 0x1f6a <prvIdleTask+0x6c>
    1f7a:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <vPortYield>
    1f7e:	f5 cf       	rjmp	.-22     	; 0x1f6a <prvIdleTask+0x6c>

00001f80 <vTaskDelay>:
    1f80:	cf 93       	push	r28
    1f82:	df 93       	push	r29
    1f84:	ec 01       	movw	r28, r24
    1f86:	00 97       	sbiw	r24, 0x00	; 0
    1f88:	b1 f0       	breq	.+44     	; 0x1fb6 <vTaskDelay+0x36>
    1f8a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <vTaskSuspendAll>
    1f8e:	80 91 9c 06 	lds	r24, 0x069C
    1f92:	90 91 9d 06 	lds	r25, 0x069D
    1f96:	c8 0f       	add	r28, r24
    1f98:	d9 1f       	adc	r29, r25
    1f9a:	80 91 94 06 	lds	r24, 0x0694
    1f9e:	90 91 95 06 	lds	r25, 0x0695
    1fa2:	02 96       	adiw	r24, 0x02	; 2
    1fa4:	0e 94 a8 04 	call	0x950	; 0x950 <uxListRemove>
    1fa8:	ce 01       	movw	r24, r28
    1faa:	0e 94 9e 0b 	call	0x173c	; 0x173c <prvAddCurrentTaskToDelayedList>
    1fae:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <xTaskResumeAll>
    1fb2:	88 23       	and	r24, r24
    1fb4:	11 f4       	brne	.+4      	; 0x1fba <vTaskDelay+0x3a>
    1fb6:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <vPortYield>
    1fba:	df 91       	pop	r29
    1fbc:	cf 91       	pop	r28
    1fbe:	08 95       	ret

00001fc0 <vTaskDelayUntil>:
    1fc0:	0f 93       	push	r16
    1fc2:	1f 93       	push	r17
    1fc4:	cf 93       	push	r28
    1fc6:	df 93       	push	r29
    1fc8:	8c 01       	movw	r16, r24
    1fca:	eb 01       	movw	r28, r22
    1fcc:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <vTaskSuspendAll>
    1fd0:	f8 01       	movw	r30, r16
    1fd2:	80 81       	ld	r24, Z
    1fd4:	91 81       	ldd	r25, Z+1	; 0x01
    1fd6:	c8 0f       	add	r28, r24
    1fd8:	d9 1f       	adc	r29, r25
    1fda:	20 91 9c 06 	lds	r18, 0x069C
    1fde:	30 91 9d 06 	lds	r19, 0x069D
    1fe2:	28 17       	cp	r18, r24
    1fe4:	39 07       	cpc	r19, r25
    1fe6:	68 f4       	brcc	.+26     	; 0x2002 <vTaskDelayUntil+0x42>
    1fe8:	c8 17       	cp	r28, r24
    1fea:	d9 07       	cpc	r29, r25
    1fec:	50 f5       	brcc	.+84     	; 0x2042 <vTaskDelayUntil+0x82>
    1fee:	80 91 9c 06 	lds	r24, 0x069C
    1ff2:	90 91 9d 06 	lds	r25, 0x069D
    1ff6:	d1 83       	std	Z+1, r29	; 0x01
    1ff8:	c0 83       	st	Z, r28
    1ffa:	8c 17       	cp	r24, r28
    1ffc:	9d 07       	cpc	r25, r29
    1ffe:	b0 f4       	brcc	.+44     	; 0x202c <vTaskDelayUntil+0x6c>
    2000:	0b c0       	rjmp	.+22     	; 0x2018 <vTaskDelayUntil+0x58>
    2002:	c8 17       	cp	r28, r24
    2004:	d9 07       	cpc	r29, r25
    2006:	c8 f0       	brcs	.+50     	; 0x203a <vTaskDelayUntil+0x7a>
    2008:	80 91 9c 06 	lds	r24, 0x069C
    200c:	90 91 9d 06 	lds	r25, 0x069D
    2010:	8c 17       	cp	r24, r28
    2012:	9d 07       	cpc	r25, r29
    2014:	90 f0       	brcs	.+36     	; 0x203a <vTaskDelayUntil+0x7a>
    2016:	15 c0       	rjmp	.+42     	; 0x2042 <vTaskDelayUntil+0x82>
    2018:	80 91 94 06 	lds	r24, 0x0694
    201c:	90 91 95 06 	lds	r25, 0x0695
    2020:	02 96       	adiw	r24, 0x02	; 2
    2022:	0e 94 a8 04 	call	0x950	; 0x950 <uxListRemove>
    2026:	ce 01       	movw	r24, r28
    2028:	0e 94 9e 0b 	call	0x173c	; 0x173c <prvAddCurrentTaskToDelayedList>
    202c:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <xTaskResumeAll>
    2030:	88 23       	and	r24, r24
    2032:	59 f4       	brne	.+22     	; 0x204a <vTaskDelayUntil+0x8a>
    2034:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <vPortYield>
    2038:	08 c0       	rjmp	.+16     	; 0x204a <vTaskDelayUntil+0x8a>
    203a:	f8 01       	movw	r30, r16
    203c:	d1 83       	std	Z+1, r29	; 0x01
    203e:	c0 83       	st	Z, r28
    2040:	eb cf       	rjmp	.-42     	; 0x2018 <vTaskDelayUntil+0x58>
    2042:	f8 01       	movw	r30, r16
    2044:	d1 83       	std	Z+1, r29	; 0x01
    2046:	c0 83       	st	Z, r28
    2048:	f1 cf       	rjmp	.-30     	; 0x202c <vTaskDelayUntil+0x6c>
    204a:	df 91       	pop	r29
    204c:	cf 91       	pop	r28
    204e:	1f 91       	pop	r17
    2050:	0f 91       	pop	r16
    2052:	08 95       	ret

00002054 <vTaskSwitchContext>:
    2054:	80 91 99 06 	lds	r24, 0x0699
    2058:	88 23       	and	r24, r24
    205a:	99 f4       	brne	.+38     	; 0x2082 <vTaskSwitchContext+0x2e>
    205c:	80 91 9b 06 	lds	r24, 0x069B
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	fc 01       	movw	r30, r24
    2064:	ee 0f       	add	r30, r30
    2066:	ff 1f       	adc	r31, r31
    2068:	ee 0f       	add	r30, r30
    206a:	ff 1f       	adc	r31, r31
    206c:	ee 0f       	add	r30, r30
    206e:	ff 1f       	adc	r31, r31
    2070:	8e 0f       	add	r24, r30
    2072:	9f 1f       	adc	r25, r31
    2074:	fc 01       	movw	r30, r24
    2076:	ea 55       	subi	r30, 0x5A	; 90
    2078:	f9 4f       	sbci	r31, 0xF9	; 249
    207a:	80 81       	ld	r24, Z
    207c:	88 23       	and	r24, r24
    207e:	29 f0       	breq	.+10     	; 0x208a <vTaskSwitchContext+0x36>
    2080:	1b c0       	rjmp	.+54     	; 0x20b8 <vTaskSwitchContext+0x64>
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	80 93 97 06 	sts	0x0697, r24
    2088:	08 95       	ret
    208a:	80 91 9b 06 	lds	r24, 0x069B
    208e:	81 50       	subi	r24, 0x01	; 1
    2090:	80 93 9b 06 	sts	0x069B, r24
    2094:	80 91 9b 06 	lds	r24, 0x069B
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	fc 01       	movw	r30, r24
    209c:	ee 0f       	add	r30, r30
    209e:	ff 1f       	adc	r31, r31
    20a0:	ee 0f       	add	r30, r30
    20a2:	ff 1f       	adc	r31, r31
    20a4:	ee 0f       	add	r30, r30
    20a6:	ff 1f       	adc	r31, r31
    20a8:	8e 0f       	add	r24, r30
    20aa:	9f 1f       	adc	r25, r31
    20ac:	fc 01       	movw	r30, r24
    20ae:	ea 55       	subi	r30, 0x5A	; 90
    20b0:	f9 4f       	sbci	r31, 0xF9	; 249
    20b2:	80 81       	ld	r24, Z
    20b4:	88 23       	and	r24, r24
    20b6:	49 f3       	breq	.-46     	; 0x208a <vTaskSwitchContext+0x36>
    20b8:	80 91 9b 06 	lds	r24, 0x069B
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	fc 01       	movw	r30, r24
    20c0:	ee 0f       	add	r30, r30
    20c2:	ff 1f       	adc	r31, r31
    20c4:	ee 0f       	add	r30, r30
    20c6:	ff 1f       	adc	r31, r31
    20c8:	ee 0f       	add	r30, r30
    20ca:	ff 1f       	adc	r31, r31
    20cc:	e8 0f       	add	r30, r24
    20ce:	f9 1f       	adc	r31, r25
    20d0:	ea 55       	subi	r30, 0x5A	; 90
    20d2:	f9 4f       	sbci	r31, 0xF9	; 249
    20d4:	a1 81       	ldd	r26, Z+1	; 0x01
    20d6:	b2 81       	ldd	r27, Z+2	; 0x02
    20d8:	12 96       	adiw	r26, 0x02	; 2
    20da:	0d 90       	ld	r0, X+
    20dc:	bc 91       	ld	r27, X
    20de:	a0 2d       	mov	r26, r0
    20e0:	b2 83       	std	Z+2, r27	; 0x02
    20e2:	a1 83       	std	Z+1, r26	; 0x01
    20e4:	cf 01       	movw	r24, r30
    20e6:	03 96       	adiw	r24, 0x03	; 3
    20e8:	a8 17       	cp	r26, r24
    20ea:	b9 07       	cpc	r27, r25
    20ec:	31 f4       	brne	.+12     	; 0x20fa <vTaskSwitchContext+0xa6>
    20ee:	12 96       	adiw	r26, 0x02	; 2
    20f0:	8d 91       	ld	r24, X+
    20f2:	9c 91       	ld	r25, X
    20f4:	13 97       	sbiw	r26, 0x03	; 3
    20f6:	92 83       	std	Z+2, r25	; 0x02
    20f8:	81 83       	std	Z+1, r24	; 0x01
    20fa:	01 80       	ldd	r0, Z+1	; 0x01
    20fc:	f2 81       	ldd	r31, Z+2	; 0x02
    20fe:	e0 2d       	mov	r30, r0
    2100:	86 81       	ldd	r24, Z+6	; 0x06
    2102:	97 81       	ldd	r25, Z+7	; 0x07
    2104:	90 93 95 06 	sts	0x0695, r25
    2108:	80 93 94 06 	sts	0x0694, r24
    210c:	08 95       	ret

0000210e <vTaskSuspend>:
    210e:	ef 92       	push	r14
    2110:	ff 92       	push	r15
    2112:	0f 93       	push	r16
    2114:	1f 93       	push	r17
    2116:	cf 93       	push	r28
    2118:	df 93       	push	r29
    211a:	7c 01       	movw	r14, r24
    211c:	0f b6       	in	r0, 0x3f	; 63
    211e:	f8 94       	cli
    2120:	0f 92       	push	r0
    2122:	80 91 94 06 	lds	r24, 0x0694
    2126:	90 91 95 06 	lds	r25, 0x0695
    212a:	e8 16       	cp	r14, r24
    212c:	f9 06       	cpc	r15, r25
    212e:	21 f0       	breq	.+8      	; 0x2138 <vTaskSuspend+0x2a>
    2130:	e1 14       	cp	r14, r1
    2132:	f1 04       	cpc	r15, r1
    2134:	41 f4       	brne	.+16     	; 0x2146 <vTaskSuspend+0x38>
    2136:	02 c0       	rjmp	.+4      	; 0x213c <vTaskSuspend+0x2e>
    2138:	ee 24       	eor	r14, r14
    213a:	ff 24       	eor	r15, r15
    213c:	c0 91 94 06 	lds	r28, 0x0694
    2140:	d0 91 95 06 	lds	r29, 0x0695
    2144:	01 c0       	rjmp	.+2      	; 0x2148 <vTaskSuspend+0x3a>
    2146:	e7 01       	movw	r28, r14
    2148:	8e 01       	movw	r16, r28
    214a:	0e 5f       	subi	r16, 0xFE	; 254
    214c:	1f 4f       	sbci	r17, 0xFF	; 255
    214e:	c8 01       	movw	r24, r16
    2150:	0e 94 a8 04 	call	0x950	; 0x950 <uxListRemove>
    2154:	8c 89       	ldd	r24, Y+20	; 0x14
    2156:	9d 89       	ldd	r25, Y+21	; 0x15
    2158:	00 97       	sbiw	r24, 0x00	; 0
    215a:	21 f0       	breq	.+8      	; 0x2164 <vTaskSuspend+0x56>
    215c:	ce 01       	movw	r24, r28
    215e:	0c 96       	adiw	r24, 0x0c	; 12
    2160:	0e 94 a8 04 	call	0x950	; 0x950 <uxListRemove>
    2164:	8e ee       	ldi	r24, 0xEE	; 238
    2166:	96 e0       	ldi	r25, 0x06	; 6
    2168:	b8 01       	movw	r22, r16
    216a:	0e 94 42 04 	call	0x884	; 0x884 <vListInsertEnd>
    216e:	0f 90       	pop	r0
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	e1 14       	cp	r14, r1
    2174:	f1 04       	cpc	r15, r1
    2176:	a1 f4       	brne	.+40     	; 0x21a0 <vTaskSuspend+0x92>
    2178:	80 91 9a 06 	lds	r24, 0x069A
    217c:	88 23       	and	r24, r24
    217e:	19 f0       	breq	.+6      	; 0x2186 <vTaskSuspend+0x78>
    2180:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <vPortYield>
    2184:	0d c0       	rjmp	.+26     	; 0x21a0 <vTaskSuspend+0x92>
    2186:	90 91 ee 06 	lds	r25, 0x06EE
    218a:	80 91 9e 06 	lds	r24, 0x069E
    218e:	98 17       	cp	r25, r24
    2190:	29 f4       	brne	.+10     	; 0x219c <vTaskSuspend+0x8e>
    2192:	10 92 95 06 	sts	0x0695, r1
    2196:	10 92 94 06 	sts	0x0694, r1
    219a:	02 c0       	rjmp	.+4      	; 0x21a0 <vTaskSuspend+0x92>
    219c:	0e 94 2a 10 	call	0x2054	; 0x2054 <vTaskSwitchContext>
    21a0:	df 91       	pop	r29
    21a2:	cf 91       	pop	r28
    21a4:	1f 91       	pop	r17
    21a6:	0f 91       	pop	r16
    21a8:	ff 90       	pop	r15
    21aa:	ef 90       	pop	r14
    21ac:	08 95       	ret

000021ae <vTaskPlaceOnEventList>:
    21ae:	cf 93       	push	r28
    21b0:	df 93       	push	r29
    21b2:	eb 01       	movw	r28, r22
    21b4:	60 91 94 06 	lds	r22, 0x0694
    21b8:	70 91 95 06 	lds	r23, 0x0695
    21bc:	64 5f       	subi	r22, 0xF4	; 244
    21be:	7f 4f       	sbci	r23, 0xFF	; 255
    21c0:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <vListInsert>
    21c4:	80 91 94 06 	lds	r24, 0x0694
    21c8:	90 91 95 06 	lds	r25, 0x0695
    21cc:	02 96       	adiw	r24, 0x02	; 2
    21ce:	0e 94 a8 04 	call	0x950	; 0x950 <uxListRemove>
    21d2:	8f ef       	ldi	r24, 0xFF	; 255
    21d4:	cf 3f       	cpi	r28, 0xFF	; 255
    21d6:	d8 07       	cpc	r29, r24
    21d8:	59 f4       	brne	.+22     	; 0x21f0 <vTaskPlaceOnEventList+0x42>
    21da:	60 91 94 06 	lds	r22, 0x0694
    21de:	70 91 95 06 	lds	r23, 0x0695
    21e2:	6e 5f       	subi	r22, 0xFE	; 254
    21e4:	7f 4f       	sbci	r23, 0xFF	; 255
    21e6:	8e ee       	ldi	r24, 0xEE	; 238
    21e8:	96 e0       	ldi	r25, 0x06	; 6
    21ea:	0e 94 42 04 	call	0x884	; 0x884 <vListInsertEnd>
    21ee:	08 c0       	rjmp	.+16     	; 0x2200 <vTaskPlaceOnEventList+0x52>
    21f0:	80 91 9c 06 	lds	r24, 0x069C
    21f4:	90 91 9d 06 	lds	r25, 0x069D
    21f8:	8c 0f       	add	r24, r28
    21fa:	9d 1f       	adc	r25, r29
    21fc:	0e 94 9e 0b 	call	0x173c	; 0x173c <prvAddCurrentTaskToDelayedList>
    2200:	df 91       	pop	r29
    2202:	cf 91       	pop	r28
    2204:	08 95       	ret

00002206 <xTaskRemoveFromEventList>:
    2206:	0f 93       	push	r16
    2208:	1f 93       	push	r17
    220a:	cf 93       	push	r28
    220c:	df 93       	push	r29
    220e:	dc 01       	movw	r26, r24
    2210:	15 96       	adiw	r26, 0x05	; 5
    2212:	ed 91       	ld	r30, X+
    2214:	fc 91       	ld	r31, X
    2216:	16 97       	sbiw	r26, 0x06	; 6
    2218:	06 81       	ldd	r16, Z+6	; 0x06
    221a:	17 81       	ldd	r17, Z+7	; 0x07
    221c:	e8 01       	movw	r28, r16
    221e:	2c 96       	adiw	r28, 0x0c	; 12
    2220:	ce 01       	movw	r24, r28
    2222:	0e 94 a8 04 	call	0x950	; 0x950 <uxListRemove>
    2226:	80 91 99 06 	lds	r24, 0x0699
    222a:	88 23       	and	r24, r24
    222c:	e9 f4       	brne	.+58     	; 0x2268 <xTaskRemoveFromEventList+0x62>
    222e:	e8 01       	movw	r28, r16
    2230:	22 96       	adiw	r28, 0x02	; 2
    2232:	ce 01       	movw	r24, r28
    2234:	0e 94 a8 04 	call	0x950	; 0x950 <uxListRemove>
    2238:	f8 01       	movw	r30, r16
    223a:	86 89       	ldd	r24, Z+22	; 0x16
    223c:	90 91 9b 06 	lds	r25, 0x069B
    2240:	98 17       	cp	r25, r24
    2242:	10 f4       	brcc	.+4      	; 0x2248 <xTaskRemoveFromEventList+0x42>
    2244:	80 93 9b 06 	sts	0x069B, r24
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	9c 01       	movw	r18, r24
    224c:	22 0f       	add	r18, r18
    224e:	33 1f       	adc	r19, r19
    2250:	22 0f       	add	r18, r18
    2252:	33 1f       	adc	r19, r19
    2254:	22 0f       	add	r18, r18
    2256:	33 1f       	adc	r19, r19
    2258:	82 0f       	add	r24, r18
    225a:	93 1f       	adc	r25, r19
    225c:	8a 55       	subi	r24, 0x5A	; 90
    225e:	99 4f       	sbci	r25, 0xF9	; 249
    2260:	be 01       	movw	r22, r28
    2262:	0e 94 42 04 	call	0x884	; 0x884 <vListInsertEnd>
    2266:	05 c0       	rjmp	.+10     	; 0x2272 <xTaskRemoveFromEventList+0x6c>
    2268:	8c ed       	ldi	r24, 0xDC	; 220
    226a:	96 e0       	ldi	r25, 0x06	; 6
    226c:	be 01       	movw	r22, r28
    226e:	0e 94 42 04 	call	0x884	; 0x884 <vListInsertEnd>
    2272:	e0 91 94 06 	lds	r30, 0x0694
    2276:	f0 91 95 06 	lds	r31, 0x0695
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	d8 01       	movw	r26, r16
    227e:	56 96       	adiw	r26, 0x16	; 22
    2280:	2c 91       	ld	r18, X
    2282:	56 97       	sbiw	r26, 0x16	; 22
    2284:	96 89       	ldd	r25, Z+22	; 0x16
    2286:	29 17       	cp	r18, r25
    2288:	08 f4       	brcc	.+2      	; 0x228c <xTaskRemoveFromEventList+0x86>
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	df 91       	pop	r29
    228e:	cf 91       	pop	r28
    2290:	1f 91       	pop	r17
    2292:	0f 91       	pop	r16
    2294:	08 95       	ret

00002296 <vTaskSetTimeOutState>:
    2296:	fc 01       	movw	r30, r24
    2298:	80 91 96 06 	lds	r24, 0x0696
    229c:	80 83       	st	Z, r24
    229e:	80 91 9c 06 	lds	r24, 0x069C
    22a2:	90 91 9d 06 	lds	r25, 0x069D
    22a6:	92 83       	std	Z+2, r25	; 0x02
    22a8:	81 83       	std	Z+1, r24	; 0x01
    22aa:	08 95       	ret

000022ac <xTaskCheckForTimeOut>:
    22ac:	fc 01       	movw	r30, r24
    22ae:	db 01       	movw	r26, r22
    22b0:	0f b6       	in	r0, 0x3f	; 63
    22b2:	f8 94       	cli
    22b4:	0f 92       	push	r0
    22b6:	4d 91       	ld	r20, X+
    22b8:	5c 91       	ld	r21, X
    22ba:	11 97       	sbiw	r26, 0x01	; 1
    22bc:	6f ef       	ldi	r22, 0xFF	; 255
    22be:	4f 3f       	cpi	r20, 0xFF	; 255
    22c0:	56 07       	cpc	r21, r22
    22c2:	51 f1       	breq	.+84     	; 0x2318 <xTaskCheckForTimeOut+0x6c>
    22c4:	80 91 96 06 	lds	r24, 0x0696
    22c8:	90 81       	ld	r25, Z
    22ca:	98 17       	cp	r25, r24
    22cc:	49 f0       	breq	.+18     	; 0x22e0 <xTaskCheckForTimeOut+0x34>
    22ce:	20 91 9c 06 	lds	r18, 0x069C
    22d2:	30 91 9d 06 	lds	r19, 0x069D
    22d6:	81 81       	ldd	r24, Z+1	; 0x01
    22d8:	92 81       	ldd	r25, Z+2	; 0x02
    22da:	28 17       	cp	r18, r24
    22dc:	39 07       	cpc	r19, r25
    22de:	f0 f4       	brcc	.+60     	; 0x231c <xTaskCheckForTimeOut+0x70>
    22e0:	80 91 9c 06 	lds	r24, 0x069C
    22e4:	90 91 9d 06 	lds	r25, 0x069D
    22e8:	21 81       	ldd	r18, Z+1	; 0x01
    22ea:	32 81       	ldd	r19, Z+2	; 0x02
    22ec:	82 1b       	sub	r24, r18
    22ee:	93 0b       	sbc	r25, r19
    22f0:	84 17       	cp	r24, r20
    22f2:	95 07       	cpc	r25, r21
    22f4:	a8 f4       	brcc	.+42     	; 0x2320 <xTaskCheckForTimeOut+0x74>
    22f6:	80 91 9c 06 	lds	r24, 0x069C
    22fa:	90 91 9d 06 	lds	r25, 0x069D
    22fe:	b9 01       	movw	r22, r18
    2300:	68 1b       	sub	r22, r24
    2302:	79 0b       	sbc	r23, r25
    2304:	cb 01       	movw	r24, r22
    2306:	84 0f       	add	r24, r20
    2308:	95 1f       	adc	r25, r21
    230a:	8d 93       	st	X+, r24
    230c:	9c 93       	st	X, r25
    230e:	cf 01       	movw	r24, r30
    2310:	0e 94 4b 11 	call	0x2296	; 0x2296 <vTaskSetTimeOutState>
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	05 c0       	rjmp	.+10     	; 0x2322 <xTaskCheckForTimeOut+0x76>
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	03 c0       	rjmp	.+6      	; 0x2322 <xTaskCheckForTimeOut+0x76>
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	01 c0       	rjmp	.+2      	; 0x2322 <xTaskCheckForTimeOut+0x76>
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	0f 90       	pop	r0
    2324:	0f be       	out	0x3f, r0	; 63
    2326:	08 95       	ret

00002328 <vTaskMissedYield>:
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	80 93 97 06 	sts	0x0697, r24
    232e:	08 95       	ret

00002330 <__subsf3>:
    2330:	50 58       	subi	r21, 0x80	; 128

00002332 <__addsf3>:
    2332:	bb 27       	eor	r27, r27
    2334:	aa 27       	eor	r26, r26
    2336:	0e d0       	rcall	.+28     	; 0x2354 <__addsf3x>
    2338:	44 c1       	rjmp	.+648    	; 0x25c2 <__fp_round>
    233a:	35 d1       	rcall	.+618    	; 0x25a6 <__fp_pscA>
    233c:	30 f0       	brcs	.+12     	; 0x234a <__addsf3+0x18>
    233e:	3a d1       	rcall	.+628    	; 0x25b4 <__fp_pscB>
    2340:	20 f0       	brcs	.+8      	; 0x234a <__addsf3+0x18>
    2342:	31 f4       	brne	.+12     	; 0x2350 <__addsf3+0x1e>
    2344:	9f 3f       	cpi	r25, 0xFF	; 255
    2346:	11 f4       	brne	.+4      	; 0x234c <__addsf3+0x1a>
    2348:	1e f4       	brtc	.+6      	; 0x2350 <__addsf3+0x1e>
    234a:	2a c1       	rjmp	.+596    	; 0x25a0 <__fp_nan>
    234c:	0e f4       	brtc	.+2      	; 0x2350 <__addsf3+0x1e>
    234e:	e0 95       	com	r30
    2350:	e7 fb       	bst	r30, 7
    2352:	20 c1       	rjmp	.+576    	; 0x2594 <__fp_inf>

00002354 <__addsf3x>:
    2354:	e9 2f       	mov	r30, r25
    2356:	46 d1       	rcall	.+652    	; 0x25e4 <__fp_split3>
    2358:	80 f3       	brcs	.-32     	; 0x233a <__addsf3+0x8>
    235a:	ba 17       	cp	r27, r26
    235c:	62 07       	cpc	r22, r18
    235e:	73 07       	cpc	r23, r19
    2360:	84 07       	cpc	r24, r20
    2362:	95 07       	cpc	r25, r21
    2364:	18 f0       	brcs	.+6      	; 0x236c <__addsf3x+0x18>
    2366:	71 f4       	brne	.+28     	; 0x2384 <__addsf3x+0x30>
    2368:	9e f5       	brtc	.+102    	; 0x23d0 <__addsf3x+0x7c>
    236a:	5e c1       	rjmp	.+700    	; 0x2628 <__fp_zero>
    236c:	0e f4       	brtc	.+2      	; 0x2370 <__addsf3x+0x1c>
    236e:	e0 95       	com	r30
    2370:	0b 2e       	mov	r0, r27
    2372:	ba 2f       	mov	r27, r26
    2374:	a0 2d       	mov	r26, r0
    2376:	0b 01       	movw	r0, r22
    2378:	b9 01       	movw	r22, r18
    237a:	90 01       	movw	r18, r0
    237c:	0c 01       	movw	r0, r24
    237e:	ca 01       	movw	r24, r20
    2380:	a0 01       	movw	r20, r0
    2382:	11 24       	eor	r1, r1
    2384:	ff 27       	eor	r31, r31
    2386:	59 1b       	sub	r21, r25
    2388:	99 f0       	breq	.+38     	; 0x23b0 <__addsf3x+0x5c>
    238a:	59 3f       	cpi	r21, 0xF9	; 249
    238c:	50 f4       	brcc	.+20     	; 0x23a2 <__addsf3x+0x4e>
    238e:	50 3e       	cpi	r21, 0xE0	; 224
    2390:	68 f1       	brcs	.+90     	; 0x23ec <__addsf3x+0x98>
    2392:	1a 16       	cp	r1, r26
    2394:	f0 40       	sbci	r31, 0x00	; 0
    2396:	a2 2f       	mov	r26, r18
    2398:	23 2f       	mov	r18, r19
    239a:	34 2f       	mov	r19, r20
    239c:	44 27       	eor	r20, r20
    239e:	58 5f       	subi	r21, 0xF8	; 248
    23a0:	f3 cf       	rjmp	.-26     	; 0x2388 <__addsf3x+0x34>
    23a2:	46 95       	lsr	r20
    23a4:	37 95       	ror	r19
    23a6:	27 95       	ror	r18
    23a8:	a7 95       	ror	r26
    23aa:	f0 40       	sbci	r31, 0x00	; 0
    23ac:	53 95       	inc	r21
    23ae:	c9 f7       	brne	.-14     	; 0x23a2 <__addsf3x+0x4e>
    23b0:	7e f4       	brtc	.+30     	; 0x23d0 <__addsf3x+0x7c>
    23b2:	1f 16       	cp	r1, r31
    23b4:	ba 0b       	sbc	r27, r26
    23b6:	62 0b       	sbc	r22, r18
    23b8:	73 0b       	sbc	r23, r19
    23ba:	84 0b       	sbc	r24, r20
    23bc:	ba f0       	brmi	.+46     	; 0x23ec <__addsf3x+0x98>
    23be:	91 50       	subi	r25, 0x01	; 1
    23c0:	a1 f0       	breq	.+40     	; 0x23ea <__addsf3x+0x96>
    23c2:	ff 0f       	add	r31, r31
    23c4:	bb 1f       	adc	r27, r27
    23c6:	66 1f       	adc	r22, r22
    23c8:	77 1f       	adc	r23, r23
    23ca:	88 1f       	adc	r24, r24
    23cc:	c2 f7       	brpl	.-16     	; 0x23be <__addsf3x+0x6a>
    23ce:	0e c0       	rjmp	.+28     	; 0x23ec <__addsf3x+0x98>
    23d0:	ba 0f       	add	r27, r26
    23d2:	62 1f       	adc	r22, r18
    23d4:	73 1f       	adc	r23, r19
    23d6:	84 1f       	adc	r24, r20
    23d8:	48 f4       	brcc	.+18     	; 0x23ec <__addsf3x+0x98>
    23da:	87 95       	ror	r24
    23dc:	77 95       	ror	r23
    23de:	67 95       	ror	r22
    23e0:	b7 95       	ror	r27
    23e2:	f7 95       	ror	r31
    23e4:	9e 3f       	cpi	r25, 0xFE	; 254
    23e6:	08 f0       	brcs	.+2      	; 0x23ea <__addsf3x+0x96>
    23e8:	b3 cf       	rjmp	.-154    	; 0x2350 <__addsf3+0x1e>
    23ea:	93 95       	inc	r25
    23ec:	88 0f       	add	r24, r24
    23ee:	08 f0       	brcs	.+2      	; 0x23f2 <__addsf3x+0x9e>
    23f0:	99 27       	eor	r25, r25
    23f2:	ee 0f       	add	r30, r30
    23f4:	97 95       	ror	r25
    23f6:	87 95       	ror	r24
    23f8:	08 95       	ret

000023fa <__cmpsf2>:
    23fa:	a8 d0       	rcall	.+336    	; 0x254c <__fp_cmp>
    23fc:	08 f4       	brcc	.+2      	; 0x2400 <__cmpsf2+0x6>
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	08 95       	ret

00002402 <__divsf3>:
    2402:	0c d0       	rcall	.+24     	; 0x241c <__divsf3x>
    2404:	de c0       	rjmp	.+444    	; 0x25c2 <__fp_round>
    2406:	d6 d0       	rcall	.+428    	; 0x25b4 <__fp_pscB>
    2408:	40 f0       	brcs	.+16     	; 0x241a <__divsf3+0x18>
    240a:	cd d0       	rcall	.+410    	; 0x25a6 <__fp_pscA>
    240c:	30 f0       	brcs	.+12     	; 0x241a <__divsf3+0x18>
    240e:	21 f4       	brne	.+8      	; 0x2418 <__divsf3+0x16>
    2410:	5f 3f       	cpi	r21, 0xFF	; 255
    2412:	19 f0       	breq	.+6      	; 0x241a <__divsf3+0x18>
    2414:	bf c0       	rjmp	.+382    	; 0x2594 <__fp_inf>
    2416:	51 11       	cpse	r21, r1
    2418:	08 c1       	rjmp	.+528    	; 0x262a <__fp_szero>
    241a:	c2 c0       	rjmp	.+388    	; 0x25a0 <__fp_nan>

0000241c <__divsf3x>:
    241c:	e3 d0       	rcall	.+454    	; 0x25e4 <__fp_split3>
    241e:	98 f3       	brcs	.-26     	; 0x2406 <__divsf3+0x4>

00002420 <__divsf3_pse>:
    2420:	99 23       	and	r25, r25
    2422:	c9 f3       	breq	.-14     	; 0x2416 <__divsf3+0x14>
    2424:	55 23       	and	r21, r21
    2426:	b1 f3       	breq	.-20     	; 0x2414 <__divsf3+0x12>
    2428:	95 1b       	sub	r25, r21
    242a:	55 0b       	sbc	r21, r21
    242c:	bb 27       	eor	r27, r27
    242e:	aa 27       	eor	r26, r26
    2430:	62 17       	cp	r22, r18
    2432:	73 07       	cpc	r23, r19
    2434:	84 07       	cpc	r24, r20
    2436:	38 f0       	brcs	.+14     	; 0x2446 <__divsf3_pse+0x26>
    2438:	9f 5f       	subi	r25, 0xFF	; 255
    243a:	5f 4f       	sbci	r21, 0xFF	; 255
    243c:	22 0f       	add	r18, r18
    243e:	33 1f       	adc	r19, r19
    2440:	44 1f       	adc	r20, r20
    2442:	aa 1f       	adc	r26, r26
    2444:	a9 f3       	breq	.-22     	; 0x2430 <__divsf3_pse+0x10>
    2446:	33 d0       	rcall	.+102    	; 0x24ae <__divsf3_pse+0x8e>
    2448:	0e 2e       	mov	r0, r30
    244a:	3a f0       	brmi	.+14     	; 0x245a <__divsf3_pse+0x3a>
    244c:	e0 e8       	ldi	r30, 0x80	; 128
    244e:	30 d0       	rcall	.+96     	; 0x24b0 <__divsf3_pse+0x90>
    2450:	91 50       	subi	r25, 0x01	; 1
    2452:	50 40       	sbci	r21, 0x00	; 0
    2454:	e6 95       	lsr	r30
    2456:	00 1c       	adc	r0, r0
    2458:	ca f7       	brpl	.-14     	; 0x244c <__divsf3_pse+0x2c>
    245a:	29 d0       	rcall	.+82     	; 0x24ae <__divsf3_pse+0x8e>
    245c:	fe 2f       	mov	r31, r30
    245e:	27 d0       	rcall	.+78     	; 0x24ae <__divsf3_pse+0x8e>
    2460:	66 0f       	add	r22, r22
    2462:	77 1f       	adc	r23, r23
    2464:	88 1f       	adc	r24, r24
    2466:	bb 1f       	adc	r27, r27
    2468:	26 17       	cp	r18, r22
    246a:	37 07       	cpc	r19, r23
    246c:	48 07       	cpc	r20, r24
    246e:	ab 07       	cpc	r26, r27
    2470:	b0 e8       	ldi	r27, 0x80	; 128
    2472:	09 f0       	breq	.+2      	; 0x2476 <__divsf3_pse+0x56>
    2474:	bb 0b       	sbc	r27, r27
    2476:	80 2d       	mov	r24, r0
    2478:	bf 01       	movw	r22, r30
    247a:	ff 27       	eor	r31, r31
    247c:	93 58       	subi	r25, 0x83	; 131
    247e:	5f 4f       	sbci	r21, 0xFF	; 255
    2480:	2a f0       	brmi	.+10     	; 0x248c <__divsf3_pse+0x6c>
    2482:	9e 3f       	cpi	r25, 0xFE	; 254
    2484:	51 05       	cpc	r21, r1
    2486:	68 f0       	brcs	.+26     	; 0x24a2 <__divsf3_pse+0x82>
    2488:	85 c0       	rjmp	.+266    	; 0x2594 <__fp_inf>
    248a:	cf c0       	rjmp	.+414    	; 0x262a <__fp_szero>
    248c:	5f 3f       	cpi	r21, 0xFF	; 255
    248e:	ec f3       	brlt	.-6      	; 0x248a <__divsf3_pse+0x6a>
    2490:	98 3e       	cpi	r25, 0xE8	; 232
    2492:	dc f3       	brlt	.-10     	; 0x248a <__divsf3_pse+0x6a>
    2494:	86 95       	lsr	r24
    2496:	77 95       	ror	r23
    2498:	67 95       	ror	r22
    249a:	b7 95       	ror	r27
    249c:	f7 95       	ror	r31
    249e:	9f 5f       	subi	r25, 0xFF	; 255
    24a0:	c9 f7       	brne	.-14     	; 0x2494 <__divsf3_pse+0x74>
    24a2:	88 0f       	add	r24, r24
    24a4:	91 1d       	adc	r25, r1
    24a6:	96 95       	lsr	r25
    24a8:	87 95       	ror	r24
    24aa:	97 f9       	bld	r25, 7
    24ac:	08 95       	ret
    24ae:	e1 e0       	ldi	r30, 0x01	; 1
    24b0:	66 0f       	add	r22, r22
    24b2:	77 1f       	adc	r23, r23
    24b4:	88 1f       	adc	r24, r24
    24b6:	bb 1f       	adc	r27, r27
    24b8:	62 17       	cp	r22, r18
    24ba:	73 07       	cpc	r23, r19
    24bc:	84 07       	cpc	r24, r20
    24be:	ba 07       	cpc	r27, r26
    24c0:	20 f0       	brcs	.+8      	; 0x24ca <__divsf3_pse+0xaa>
    24c2:	62 1b       	sub	r22, r18
    24c4:	73 0b       	sbc	r23, r19
    24c6:	84 0b       	sbc	r24, r20
    24c8:	ba 0b       	sbc	r27, r26
    24ca:	ee 1f       	adc	r30, r30
    24cc:	88 f7       	brcc	.-30     	; 0x24b0 <__divsf3_pse+0x90>
    24ce:	e0 95       	com	r30
    24d0:	08 95       	ret

000024d2 <__floatunsisf>:
    24d2:	e8 94       	clt
    24d4:	09 c0       	rjmp	.+18     	; 0x24e8 <__floatsisf+0x12>

000024d6 <__floatsisf>:
    24d6:	97 fb       	bst	r25, 7
    24d8:	3e f4       	brtc	.+14     	; 0x24e8 <__floatsisf+0x12>
    24da:	90 95       	com	r25
    24dc:	80 95       	com	r24
    24de:	70 95       	com	r23
    24e0:	61 95       	neg	r22
    24e2:	7f 4f       	sbci	r23, 0xFF	; 255
    24e4:	8f 4f       	sbci	r24, 0xFF	; 255
    24e6:	9f 4f       	sbci	r25, 0xFF	; 255
    24e8:	99 23       	and	r25, r25
    24ea:	a9 f0       	breq	.+42     	; 0x2516 <__floatsisf+0x40>
    24ec:	f9 2f       	mov	r31, r25
    24ee:	96 e9       	ldi	r25, 0x96	; 150
    24f0:	bb 27       	eor	r27, r27
    24f2:	93 95       	inc	r25
    24f4:	f6 95       	lsr	r31
    24f6:	87 95       	ror	r24
    24f8:	77 95       	ror	r23
    24fa:	67 95       	ror	r22
    24fc:	b7 95       	ror	r27
    24fe:	f1 11       	cpse	r31, r1
    2500:	f8 cf       	rjmp	.-16     	; 0x24f2 <__floatsisf+0x1c>
    2502:	fa f4       	brpl	.+62     	; 0x2542 <__floatsisf+0x6c>
    2504:	bb 0f       	add	r27, r27
    2506:	11 f4       	brne	.+4      	; 0x250c <__floatsisf+0x36>
    2508:	60 ff       	sbrs	r22, 0
    250a:	1b c0       	rjmp	.+54     	; 0x2542 <__floatsisf+0x6c>
    250c:	6f 5f       	subi	r22, 0xFF	; 255
    250e:	7f 4f       	sbci	r23, 0xFF	; 255
    2510:	8f 4f       	sbci	r24, 0xFF	; 255
    2512:	9f 4f       	sbci	r25, 0xFF	; 255
    2514:	16 c0       	rjmp	.+44     	; 0x2542 <__floatsisf+0x6c>
    2516:	88 23       	and	r24, r24
    2518:	11 f0       	breq	.+4      	; 0x251e <__floatsisf+0x48>
    251a:	96 e9       	ldi	r25, 0x96	; 150
    251c:	11 c0       	rjmp	.+34     	; 0x2540 <__floatsisf+0x6a>
    251e:	77 23       	and	r23, r23
    2520:	21 f0       	breq	.+8      	; 0x252a <__floatsisf+0x54>
    2522:	9e e8       	ldi	r25, 0x8E	; 142
    2524:	87 2f       	mov	r24, r23
    2526:	76 2f       	mov	r23, r22
    2528:	05 c0       	rjmp	.+10     	; 0x2534 <__floatsisf+0x5e>
    252a:	66 23       	and	r22, r22
    252c:	71 f0       	breq	.+28     	; 0x254a <__floatsisf+0x74>
    252e:	96 e8       	ldi	r25, 0x86	; 134
    2530:	86 2f       	mov	r24, r22
    2532:	70 e0       	ldi	r23, 0x00	; 0
    2534:	60 e0       	ldi	r22, 0x00	; 0
    2536:	2a f0       	brmi	.+10     	; 0x2542 <__floatsisf+0x6c>
    2538:	9a 95       	dec	r25
    253a:	66 0f       	add	r22, r22
    253c:	77 1f       	adc	r23, r23
    253e:	88 1f       	adc	r24, r24
    2540:	da f7       	brpl	.-10     	; 0x2538 <__floatsisf+0x62>
    2542:	88 0f       	add	r24, r24
    2544:	96 95       	lsr	r25
    2546:	87 95       	ror	r24
    2548:	97 f9       	bld	r25, 7
    254a:	08 95       	ret

0000254c <__fp_cmp>:
    254c:	99 0f       	add	r25, r25
    254e:	00 08       	sbc	r0, r0
    2550:	55 0f       	add	r21, r21
    2552:	aa 0b       	sbc	r26, r26
    2554:	e0 e8       	ldi	r30, 0x80	; 128
    2556:	fe ef       	ldi	r31, 0xFE	; 254
    2558:	16 16       	cp	r1, r22
    255a:	17 06       	cpc	r1, r23
    255c:	e8 07       	cpc	r30, r24
    255e:	f9 07       	cpc	r31, r25
    2560:	c0 f0       	brcs	.+48     	; 0x2592 <__fp_cmp+0x46>
    2562:	12 16       	cp	r1, r18
    2564:	13 06       	cpc	r1, r19
    2566:	e4 07       	cpc	r30, r20
    2568:	f5 07       	cpc	r31, r21
    256a:	98 f0       	brcs	.+38     	; 0x2592 <__fp_cmp+0x46>
    256c:	62 1b       	sub	r22, r18
    256e:	73 0b       	sbc	r23, r19
    2570:	84 0b       	sbc	r24, r20
    2572:	95 0b       	sbc	r25, r21
    2574:	39 f4       	brne	.+14     	; 0x2584 <__fp_cmp+0x38>
    2576:	0a 26       	eor	r0, r26
    2578:	61 f0       	breq	.+24     	; 0x2592 <__fp_cmp+0x46>
    257a:	23 2b       	or	r18, r19
    257c:	24 2b       	or	r18, r20
    257e:	25 2b       	or	r18, r21
    2580:	21 f4       	brne	.+8      	; 0x258a <__fp_cmp+0x3e>
    2582:	08 95       	ret
    2584:	0a 26       	eor	r0, r26
    2586:	09 f4       	brne	.+2      	; 0x258a <__fp_cmp+0x3e>
    2588:	a1 40       	sbci	r26, 0x01	; 1
    258a:	a6 95       	lsr	r26
    258c:	8f ef       	ldi	r24, 0xFF	; 255
    258e:	81 1d       	adc	r24, r1
    2590:	81 1d       	adc	r24, r1
    2592:	08 95       	ret

00002594 <__fp_inf>:
    2594:	97 f9       	bld	r25, 7
    2596:	9f 67       	ori	r25, 0x7F	; 127
    2598:	80 e8       	ldi	r24, 0x80	; 128
    259a:	70 e0       	ldi	r23, 0x00	; 0
    259c:	60 e0       	ldi	r22, 0x00	; 0
    259e:	08 95       	ret

000025a0 <__fp_nan>:
    25a0:	9f ef       	ldi	r25, 0xFF	; 255
    25a2:	80 ec       	ldi	r24, 0xC0	; 192
    25a4:	08 95       	ret

000025a6 <__fp_pscA>:
    25a6:	00 24       	eor	r0, r0
    25a8:	0a 94       	dec	r0
    25aa:	16 16       	cp	r1, r22
    25ac:	17 06       	cpc	r1, r23
    25ae:	18 06       	cpc	r1, r24
    25b0:	09 06       	cpc	r0, r25
    25b2:	08 95       	ret

000025b4 <__fp_pscB>:
    25b4:	00 24       	eor	r0, r0
    25b6:	0a 94       	dec	r0
    25b8:	12 16       	cp	r1, r18
    25ba:	13 06       	cpc	r1, r19
    25bc:	14 06       	cpc	r1, r20
    25be:	05 06       	cpc	r0, r21
    25c0:	08 95       	ret

000025c2 <__fp_round>:
    25c2:	09 2e       	mov	r0, r25
    25c4:	03 94       	inc	r0
    25c6:	00 0c       	add	r0, r0
    25c8:	11 f4       	brne	.+4      	; 0x25ce <__fp_round+0xc>
    25ca:	88 23       	and	r24, r24
    25cc:	52 f0       	brmi	.+20     	; 0x25e2 <__fp_round+0x20>
    25ce:	bb 0f       	add	r27, r27
    25d0:	40 f4       	brcc	.+16     	; 0x25e2 <__fp_round+0x20>
    25d2:	bf 2b       	or	r27, r31
    25d4:	11 f4       	brne	.+4      	; 0x25da <__fp_round+0x18>
    25d6:	60 ff       	sbrs	r22, 0
    25d8:	04 c0       	rjmp	.+8      	; 0x25e2 <__fp_round+0x20>
    25da:	6f 5f       	subi	r22, 0xFF	; 255
    25dc:	7f 4f       	sbci	r23, 0xFF	; 255
    25de:	8f 4f       	sbci	r24, 0xFF	; 255
    25e0:	9f 4f       	sbci	r25, 0xFF	; 255
    25e2:	08 95       	ret

000025e4 <__fp_split3>:
    25e4:	57 fd       	sbrc	r21, 7
    25e6:	90 58       	subi	r25, 0x80	; 128
    25e8:	44 0f       	add	r20, r20
    25ea:	55 1f       	adc	r21, r21
    25ec:	59 f0       	breq	.+22     	; 0x2604 <__fp_splitA+0x10>
    25ee:	5f 3f       	cpi	r21, 0xFF	; 255
    25f0:	71 f0       	breq	.+28     	; 0x260e <__fp_splitA+0x1a>
    25f2:	47 95       	ror	r20

000025f4 <__fp_splitA>:
    25f4:	88 0f       	add	r24, r24
    25f6:	97 fb       	bst	r25, 7
    25f8:	99 1f       	adc	r25, r25
    25fa:	61 f0       	breq	.+24     	; 0x2614 <__fp_splitA+0x20>
    25fc:	9f 3f       	cpi	r25, 0xFF	; 255
    25fe:	79 f0       	breq	.+30     	; 0x261e <__fp_splitA+0x2a>
    2600:	87 95       	ror	r24
    2602:	08 95       	ret
    2604:	12 16       	cp	r1, r18
    2606:	13 06       	cpc	r1, r19
    2608:	14 06       	cpc	r1, r20
    260a:	55 1f       	adc	r21, r21
    260c:	f2 cf       	rjmp	.-28     	; 0x25f2 <__fp_split3+0xe>
    260e:	46 95       	lsr	r20
    2610:	f1 df       	rcall	.-30     	; 0x25f4 <__fp_splitA>
    2612:	08 c0       	rjmp	.+16     	; 0x2624 <__fp_splitA+0x30>
    2614:	16 16       	cp	r1, r22
    2616:	17 06       	cpc	r1, r23
    2618:	18 06       	cpc	r1, r24
    261a:	99 1f       	adc	r25, r25
    261c:	f1 cf       	rjmp	.-30     	; 0x2600 <__fp_splitA+0xc>
    261e:	86 95       	lsr	r24
    2620:	71 05       	cpc	r23, r1
    2622:	61 05       	cpc	r22, r1
    2624:	08 94       	sec
    2626:	08 95       	ret

00002628 <__fp_zero>:
    2628:	e8 94       	clt

0000262a <__fp_szero>:
    262a:	bb 27       	eor	r27, r27
    262c:	66 27       	eor	r22, r22
    262e:	77 27       	eor	r23, r23
    2630:	cb 01       	movw	r24, r22
    2632:	97 f9       	bld	r25, 7
    2634:	08 95       	ret

00002636 <__gesf2>:
    2636:	8a df       	rcall	.-236    	; 0x254c <__fp_cmp>
    2638:	08 f4       	brcc	.+2      	; 0x263c <__gesf2+0x6>
    263a:	8f ef       	ldi	r24, 0xFF	; 255
    263c:	08 95       	ret

0000263e <__mulsf3>:
    263e:	0b d0       	rcall	.+22     	; 0x2656 <__mulsf3x>
    2640:	c0 cf       	rjmp	.-128    	; 0x25c2 <__fp_round>
    2642:	b1 df       	rcall	.-158    	; 0x25a6 <__fp_pscA>
    2644:	28 f0       	brcs	.+10     	; 0x2650 <__mulsf3+0x12>
    2646:	b6 df       	rcall	.-148    	; 0x25b4 <__fp_pscB>
    2648:	18 f0       	brcs	.+6      	; 0x2650 <__mulsf3+0x12>
    264a:	95 23       	and	r25, r21
    264c:	09 f0       	breq	.+2      	; 0x2650 <__mulsf3+0x12>
    264e:	a2 cf       	rjmp	.-188    	; 0x2594 <__fp_inf>
    2650:	a7 cf       	rjmp	.-178    	; 0x25a0 <__fp_nan>
    2652:	11 24       	eor	r1, r1
    2654:	ea cf       	rjmp	.-44     	; 0x262a <__fp_szero>

00002656 <__mulsf3x>:
    2656:	c6 df       	rcall	.-116    	; 0x25e4 <__fp_split3>
    2658:	a0 f3       	brcs	.-24     	; 0x2642 <__mulsf3+0x4>

0000265a <__mulsf3_pse>:
    265a:	95 9f       	mul	r25, r21
    265c:	d1 f3       	breq	.-12     	; 0x2652 <__mulsf3+0x14>
    265e:	95 0f       	add	r25, r21
    2660:	50 e0       	ldi	r21, 0x00	; 0
    2662:	55 1f       	adc	r21, r21
    2664:	62 9f       	mul	r22, r18
    2666:	f0 01       	movw	r30, r0
    2668:	72 9f       	mul	r23, r18
    266a:	bb 27       	eor	r27, r27
    266c:	f0 0d       	add	r31, r0
    266e:	b1 1d       	adc	r27, r1
    2670:	63 9f       	mul	r22, r19
    2672:	aa 27       	eor	r26, r26
    2674:	f0 0d       	add	r31, r0
    2676:	b1 1d       	adc	r27, r1
    2678:	aa 1f       	adc	r26, r26
    267a:	64 9f       	mul	r22, r20
    267c:	66 27       	eor	r22, r22
    267e:	b0 0d       	add	r27, r0
    2680:	a1 1d       	adc	r26, r1
    2682:	66 1f       	adc	r22, r22
    2684:	82 9f       	mul	r24, r18
    2686:	22 27       	eor	r18, r18
    2688:	b0 0d       	add	r27, r0
    268a:	a1 1d       	adc	r26, r1
    268c:	62 1f       	adc	r22, r18
    268e:	73 9f       	mul	r23, r19
    2690:	b0 0d       	add	r27, r0
    2692:	a1 1d       	adc	r26, r1
    2694:	62 1f       	adc	r22, r18
    2696:	83 9f       	mul	r24, r19
    2698:	a0 0d       	add	r26, r0
    269a:	61 1d       	adc	r22, r1
    269c:	22 1f       	adc	r18, r18
    269e:	74 9f       	mul	r23, r20
    26a0:	33 27       	eor	r19, r19
    26a2:	a0 0d       	add	r26, r0
    26a4:	61 1d       	adc	r22, r1
    26a6:	23 1f       	adc	r18, r19
    26a8:	84 9f       	mul	r24, r20
    26aa:	60 0d       	add	r22, r0
    26ac:	21 1d       	adc	r18, r1
    26ae:	82 2f       	mov	r24, r18
    26b0:	76 2f       	mov	r23, r22
    26b2:	6a 2f       	mov	r22, r26
    26b4:	11 24       	eor	r1, r1
    26b6:	9f 57       	subi	r25, 0x7F	; 127
    26b8:	50 40       	sbci	r21, 0x00	; 0
    26ba:	8a f0       	brmi	.+34     	; 0x26de <__mulsf3_pse+0x84>
    26bc:	e1 f0       	breq	.+56     	; 0x26f6 <__mulsf3_pse+0x9c>
    26be:	88 23       	and	r24, r24
    26c0:	4a f0       	brmi	.+18     	; 0x26d4 <__mulsf3_pse+0x7a>
    26c2:	ee 0f       	add	r30, r30
    26c4:	ff 1f       	adc	r31, r31
    26c6:	bb 1f       	adc	r27, r27
    26c8:	66 1f       	adc	r22, r22
    26ca:	77 1f       	adc	r23, r23
    26cc:	88 1f       	adc	r24, r24
    26ce:	91 50       	subi	r25, 0x01	; 1
    26d0:	50 40       	sbci	r21, 0x00	; 0
    26d2:	a9 f7       	brne	.-22     	; 0x26be <__mulsf3_pse+0x64>
    26d4:	9e 3f       	cpi	r25, 0xFE	; 254
    26d6:	51 05       	cpc	r21, r1
    26d8:	70 f0       	brcs	.+28     	; 0x26f6 <__mulsf3_pse+0x9c>
    26da:	5c cf       	rjmp	.-328    	; 0x2594 <__fp_inf>
    26dc:	a6 cf       	rjmp	.-180    	; 0x262a <__fp_szero>
    26de:	5f 3f       	cpi	r21, 0xFF	; 255
    26e0:	ec f3       	brlt	.-6      	; 0x26dc <__mulsf3_pse+0x82>
    26e2:	98 3e       	cpi	r25, 0xE8	; 232
    26e4:	dc f3       	brlt	.-10     	; 0x26dc <__mulsf3_pse+0x82>
    26e6:	86 95       	lsr	r24
    26e8:	77 95       	ror	r23
    26ea:	67 95       	ror	r22
    26ec:	b7 95       	ror	r27
    26ee:	f7 95       	ror	r31
    26f0:	e7 95       	ror	r30
    26f2:	9f 5f       	subi	r25, 0xFF	; 255
    26f4:	c1 f7       	brne	.-16     	; 0x26e6 <__mulsf3_pse+0x8c>
    26f6:	fe 2b       	or	r31, r30
    26f8:	88 0f       	add	r24, r24
    26fa:	91 1d       	adc	r25, r1
    26fc:	96 95       	lsr	r25
    26fe:	87 95       	ror	r24
    2700:	97 f9       	bld	r25, 7
    2702:	08 95       	ret
    2704:	11 f4       	brne	.+4      	; 0x270a <__mulsf3_pse+0xb0>
    2706:	0e f4       	brtc	.+2      	; 0x270a <__mulsf3_pse+0xb0>
    2708:	4b cf       	rjmp	.-362    	; 0x25a0 <__fp_nan>
    270a:	3e c0       	rjmp	.+124    	; 0x2788 <__fp_mpack>

0000270c <sqrt>:
    270c:	73 df       	rcall	.-282    	; 0x25f4 <__fp_splitA>
    270e:	d0 f3       	brcs	.-12     	; 0x2704 <__mulsf3_pse+0xaa>
    2710:	99 23       	and	r25, r25
    2712:	d9 f3       	breq	.-10     	; 0x270a <__mulsf3_pse+0xb0>
    2714:	ce f3       	brts	.-14     	; 0x2708 <__mulsf3_pse+0xae>
    2716:	9f 57       	subi	r25, 0x7F	; 127
    2718:	55 0b       	sbc	r21, r21
    271a:	87 ff       	sbrs	r24, 7
    271c:	43 d0       	rcall	.+134    	; 0x27a4 <__fp_norm2>
    271e:	00 24       	eor	r0, r0
    2720:	a0 e6       	ldi	r26, 0x60	; 96
    2722:	40 ea       	ldi	r20, 0xA0	; 160
    2724:	90 01       	movw	r18, r0
    2726:	80 58       	subi	r24, 0x80	; 128
    2728:	56 95       	lsr	r21
    272a:	97 95       	ror	r25
    272c:	28 f4       	brcc	.+10     	; 0x2738 <sqrt+0x2c>
    272e:	80 5c       	subi	r24, 0xC0	; 192
    2730:	66 0f       	add	r22, r22
    2732:	77 1f       	adc	r23, r23
    2734:	88 1f       	adc	r24, r24
    2736:	20 f0       	brcs	.+8      	; 0x2740 <sqrt+0x34>
    2738:	26 17       	cp	r18, r22
    273a:	37 07       	cpc	r19, r23
    273c:	48 07       	cpc	r20, r24
    273e:	30 f4       	brcc	.+12     	; 0x274c <sqrt+0x40>
    2740:	62 1b       	sub	r22, r18
    2742:	73 0b       	sbc	r23, r19
    2744:	84 0b       	sbc	r24, r20
    2746:	20 29       	or	r18, r0
    2748:	31 29       	or	r19, r1
    274a:	4a 2b       	or	r20, r26
    274c:	a6 95       	lsr	r26
    274e:	17 94       	ror	r1
    2750:	07 94       	ror	r0
    2752:	20 25       	eor	r18, r0
    2754:	31 25       	eor	r19, r1
    2756:	4a 27       	eor	r20, r26
    2758:	58 f7       	brcc	.-42     	; 0x2730 <sqrt+0x24>
    275a:	66 0f       	add	r22, r22
    275c:	77 1f       	adc	r23, r23
    275e:	88 1f       	adc	r24, r24
    2760:	20 f0       	brcs	.+8      	; 0x276a <sqrt+0x5e>
    2762:	26 17       	cp	r18, r22
    2764:	37 07       	cpc	r19, r23
    2766:	48 07       	cpc	r20, r24
    2768:	30 f4       	brcc	.+12     	; 0x2776 <sqrt+0x6a>
    276a:	62 0b       	sbc	r22, r18
    276c:	73 0b       	sbc	r23, r19
    276e:	84 0b       	sbc	r24, r20
    2770:	20 0d       	add	r18, r0
    2772:	31 1d       	adc	r19, r1
    2774:	41 1d       	adc	r20, r1
    2776:	a0 95       	com	r26
    2778:	81 f7       	brne	.-32     	; 0x275a <sqrt+0x4e>
    277a:	b9 01       	movw	r22, r18
    277c:	84 2f       	mov	r24, r20
    277e:	91 58       	subi	r25, 0x81	; 129
    2780:	88 0f       	add	r24, r24
    2782:	96 95       	lsr	r25
    2784:	87 95       	ror	r24
    2786:	08 95       	ret

00002788 <__fp_mpack>:
    2788:	9f 3f       	cpi	r25, 0xFF	; 255
    278a:	31 f0       	breq	.+12     	; 0x2798 <__fp_mpack_finite+0xc>

0000278c <__fp_mpack_finite>:
    278c:	91 50       	subi	r25, 0x01	; 1
    278e:	20 f4       	brcc	.+8      	; 0x2798 <__fp_mpack_finite+0xc>
    2790:	87 95       	ror	r24
    2792:	77 95       	ror	r23
    2794:	67 95       	ror	r22
    2796:	b7 95       	ror	r27
    2798:	88 0f       	add	r24, r24
    279a:	91 1d       	adc	r25, r1
    279c:	96 95       	lsr	r25
    279e:	87 95       	ror	r24
    27a0:	97 f9       	bld	r25, 7
    27a2:	08 95       	ret

000027a4 <__fp_norm2>:
    27a4:	91 50       	subi	r25, 0x01	; 1
    27a6:	50 40       	sbci	r21, 0x00	; 0
    27a8:	66 0f       	add	r22, r22
    27aa:	77 1f       	adc	r23, r23
    27ac:	88 1f       	adc	r24, r24
    27ae:	d2 f7       	brpl	.-12     	; 0x27a4 <__fp_norm2>
    27b0:	08 95       	ret

000027b2 <memcpy>:
    27b2:	fb 01       	movw	r30, r22
    27b4:	dc 01       	movw	r26, r24
    27b6:	02 c0       	rjmp	.+4      	; 0x27bc <memcpy+0xa>
    27b8:	01 90       	ld	r0, Z+
    27ba:	0d 92       	st	X+, r0
    27bc:	41 50       	subi	r20, 0x01	; 1
    27be:	50 40       	sbci	r21, 0x00	; 0
    27c0:	d8 f7       	brcc	.-10     	; 0x27b8 <memcpy+0x6>
    27c2:	08 95       	ret

000027c4 <memset>:
    27c4:	dc 01       	movw	r26, r24
    27c6:	01 c0       	rjmp	.+2      	; 0x27ca <memset+0x6>
    27c8:	6d 93       	st	X+, r22
    27ca:	41 50       	subi	r20, 0x01	; 1
    27cc:	50 40       	sbci	r21, 0x00	; 0
    27ce:	e0 f7       	brcc	.-8      	; 0x27c8 <memset+0x4>
    27d0:	08 95       	ret

000027d2 <strncpy>:
    27d2:	fb 01       	movw	r30, r22
    27d4:	dc 01       	movw	r26, r24
    27d6:	41 50       	subi	r20, 0x01	; 1
    27d8:	50 40       	sbci	r21, 0x00	; 0
    27da:	48 f0       	brcs	.+18     	; 0x27ee <strncpy+0x1c>
    27dc:	01 90       	ld	r0, Z+
    27de:	0d 92       	st	X+, r0
    27e0:	00 20       	and	r0, r0
    27e2:	c9 f7       	brne	.-14     	; 0x27d6 <strncpy+0x4>
    27e4:	01 c0       	rjmp	.+2      	; 0x27e8 <strncpy+0x16>
    27e6:	1d 92       	st	X+, r1
    27e8:	41 50       	subi	r20, 0x01	; 1
    27ea:	50 40       	sbci	r21, 0x00	; 0
    27ec:	e0 f7       	brcc	.-8      	; 0x27e6 <strncpy+0x14>
    27ee:	08 95       	ret

000027f0 <_exit>:
    27f0:	f8 94       	cli

000027f2 <__stop_program>:
    27f2:	ff cf       	rjmp	.-2      	; 0x27f2 <__stop_program>
